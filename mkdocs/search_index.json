{
    "docs": [
        {
            "location": "/index.html",
            "text": "CS2030 Programming Methodology II\n\n\nAY17/18 Semester 2\n\n\nAbout\n\n\nThis module is a follow up to CS1010.  It explores two modern programming paradigms, object-oriented programming and functional programming.  Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using object-oriented design principles and advanced programming constructs available in the two paradigms.  Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.  \n\n\nWho/When/Where\n\n\n\n\nLecture:\n 10am - 12noon, every Monday\n\n\nVenue:\n LT19\n\n\nInstructor:\n \nOoi Wei Tsang\n (\nooiwt@comp.nus.edu.sg\n)\n\n\nTeaching Assistant:\n \n\n\nLan Ziquan (\nziquan@comp.nus.edu.sg\n)\n\n\n\n\n\n\nUG Tutors:\n\n\nBernard Teo Zhi Yi\n\n\nChang Ho Huan\n\n\nChung Zhi Li, Denzel\n\n\nEvan Tay\n\n\nHo Boon Wee Addison\n\n\nJeremy Lim Yu Xuan\n\n\nJoshi Atharv Abhay\n\n\nLim Heng Guang\n\n\nLin Si Jie\n\n\nOng Yan Zhi\n\n\nQiu Siyu\n\n\nTan Thong Cai, Nelvin\n\n\nTay Hui Chun\n\n\nTeh Zi Cong Nicholas\n\n\nThangavel Sharan\n\n\nTriston Pang Erh Syen\n\n\nWinson Heng Yong Seng\n\n\nYuen Jun Rong\n\n\n\n\n\n\nLab:\n Every Tuesday (Week 3 - Week 13)\n\n\nMidterm Test:\n March 5, 2018, Monday, 10am\n\n\nFinal Assessment:\n May 3, 2018, Thursday\n\n\n\n\nWorkload\n\n\nBesides the 4-hour contact time for lecture and lab, students are expected to spend about 6 hours on average weekly on homework and on preparing the class.\n\n\nHistory\n\n\nCS2030 is a new module, required for all students in Bachelor of Computing (Computer Science) and Second Major in Computer Science students, cohort 17/18 onwards.  In 2017, the Department of Computer Science reorganized the two module series on data structures and algorithms (CS1020, CS2010) into (CS2030, CS2040).  CS2040 focuses on data structures and algorithms, while the advanced programming methodologies from CS1020 are moved into CS2030.  CS2030 will also covers some basics OO design that previously were covered in CS2103, and introduces students to functional programming, concurrent programming, event-based programming, and other paradigms that are increasingly important.\n\n\nLearning Outcomes\n\n\nAfter completing the module, students should:\n\n\n\n\nbe confident in reading and developing medium-scale programs (up to 10K lines of code)\n\n\nbe familiarize enough with common OO concepts to understand software code written in common OO language and understand documentation of software libraries in OO\n\n\nbe able to apply OO concepts to design and implement medium to large scale  programs, including\n\n\ndesign and implement a class\n\n\ndecompose a problem solution into classes and define members and methods for each class\n\n\nuse polymorphism effectively\n\n\nuse inheritance to design simple class hierarchies that allow code reuse\n\n\ntrace the control flow of a programs that use dynamic dispatch\n\n\nuse encapsulation mechanisms such as interfaces, private methods/members\n\n\n\n\n\n\nbe familiarize enough with common functional programming concepts and constructs, including lambda expression, effect-free programming, first class functions, infinite streams.\n\n\nbe able to apply functional programming concepts to design and implement , including:\n\n\nImplement basic algorithms in functions that are effect free.\n\n\nImplement useful functions that take/return another function\n\n\nWrite correct and effective code using lambda expressions and/or infinite streams\n\n\n\n\n\n\nbe able to compare and contrast imperative programming, OO programming, and function programming paradigms, and select the most natural paradigms for each situation\n\n\nbe aware of how the OOP and FP concepts are implemented in different ways in different programming languages\n\n\nbe confident enough to learn new programming languages that uses OOP and FP paradigm\n\n\nattain proficiency in Java 8 (and above)\n\n\nbe equipped with solid programming foundations for further studies in computer science\n\n\n\n\nTextbook\n\n\nThere is no textbook for this class.\n\n\nThere are many good books and online articles written about the topics covered in the module.  These will be listed under the \nReadings\n section.",
            "title": "Home"
        },
        {
            "location": "/index.html#cs2030-programming-methodology-ii",
            "text": "",
            "title": "CS2030 Programming Methodology II"
        },
        {
            "location": "/index.html#ay1718-semester-2",
            "text": "",
            "title": "AY17/18 Semester 2"
        },
        {
            "location": "/index.html#about",
            "text": "This module is a follow up to CS1010.  It explores two modern programming paradigms, object-oriented programming and functional programming.  Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using object-oriented design principles and advanced programming constructs available in the two paradigms.  Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.",
            "title": "About"
        },
        {
            "location": "/index.html#whowhenwhere",
            "text": "Lecture:  10am - 12noon, every Monday  Venue:  LT19  Instructor:   Ooi Wei Tsang  ( ooiwt@comp.nus.edu.sg )  Teaching Assistant:    Lan Ziquan ( ziquan@comp.nus.edu.sg )    UG Tutors:  Bernard Teo Zhi Yi  Chang Ho Huan  Chung Zhi Li, Denzel  Evan Tay  Ho Boon Wee Addison  Jeremy Lim Yu Xuan  Joshi Atharv Abhay  Lim Heng Guang  Lin Si Jie  Ong Yan Zhi  Qiu Siyu  Tan Thong Cai, Nelvin  Tay Hui Chun  Teh Zi Cong Nicholas  Thangavel Sharan  Triston Pang Erh Syen  Winson Heng Yong Seng  Yuen Jun Rong    Lab:  Every Tuesday (Week 3 - Week 13)  Midterm Test:  March 5, 2018, Monday, 10am  Final Assessment:  May 3, 2018, Thursday",
            "title": "Who/When/Where"
        },
        {
            "location": "/index.html#workload",
            "text": "Besides the 4-hour contact time for lecture and lab, students are expected to spend about 6 hours on average weekly on homework and on preparing the class.",
            "title": "Workload"
        },
        {
            "location": "/index.html#history",
            "text": "CS2030 is a new module, required for all students in Bachelor of Computing (Computer Science) and Second Major in Computer Science students, cohort 17/18 onwards.  In 2017, the Department of Computer Science reorganized the two module series on data structures and algorithms (CS1020, CS2010) into (CS2030, CS2040).  CS2040 focuses on data structures and algorithms, while the advanced programming methodologies from CS1020 are moved into CS2030.  CS2030 will also covers some basics OO design that previously were covered in CS2103, and introduces students to functional programming, concurrent programming, event-based programming, and other paradigms that are increasingly important.",
            "title": "History"
        },
        {
            "location": "/index.html#learning-outcomes",
            "text": "After completing the module, students should:   be confident in reading and developing medium-scale programs (up to 10K lines of code)  be familiarize enough with common OO concepts to understand software code written in common OO language and understand documentation of software libraries in OO  be able to apply OO concepts to design and implement medium to large scale  programs, including  design and implement a class  decompose a problem solution into classes and define members and methods for each class  use polymorphism effectively  use inheritance to design simple class hierarchies that allow code reuse  trace the control flow of a programs that use dynamic dispatch  use encapsulation mechanisms such as interfaces, private methods/members    be familiarize enough with common functional programming concepts and constructs, including lambda expression, effect-free programming, first class functions, infinite streams.  be able to apply functional programming concepts to design and implement , including:  Implement basic algorithms in functions that are effect free.  Implement useful functions that take/return another function  Write correct and effective code using lambda expressions and/or infinite streams    be able to compare and contrast imperative programming, OO programming, and function programming paradigms, and select the most natural paradigms for each situation  be aware of how the OOP and FP concepts are implemented in different ways in different programming languages  be confident enough to learn new programming languages that uses OOP and FP paradigm  attain proficiency in Java 8 (and above)  be equipped with solid programming foundations for further studies in computer science",
            "title": "Learning Outcomes"
        },
        {
            "location": "/index.html#textbook",
            "text": "There is no textbook for this class.  There are many good books and online articles written about the topics covered in the module.  These will be listed under the  Readings  section.",
            "title": "Textbook"
        },
        {
            "location": "/index.html",
            "text": "CS2030 Programming Methodology II\n\n\nAY17/18 Semester 2\n\n\nAbout\n\n\nThis module is a follow up to CS1010.  It explores two modern programming paradigms, object-oriented programming and functional programming.  Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using object-oriented design principles and advanced programming constructs available in the two paradigms.  Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.  \n\n\nWho/When/Where\n\n\n\n\nLecture:\n 10am - 12noon, every Monday\n\n\nVenue:\n LT19\n\n\nInstructor:\n \nOoi Wei Tsang\n (\nooiwt@comp.nus.edu.sg\n)\n\n\nTeaching Assistant:\n \n\n\nLan Ziquan (\nziquan@comp.nus.edu.sg\n)\n\n\n\n\n\n\nUG Tutors:\n\n\nBernard Teo Zhi Yi\n\n\nChang Ho Huan\n\n\nChung Zhi Li, Denzel\n\n\nEvan Tay\n\n\nHo Boon Wee Addison\n\n\nJeremy Lim Yu Xuan\n\n\nJoshi Atharv Abhay\n\n\nLim Heng Guang\n\n\nLin Si Jie\n\n\nOng Yan Zhi\n\n\nQiu Siyu\n\n\nTan Thong Cai, Nelvin\n\n\nTay Hui Chun\n\n\nTeh Zi Cong Nicholas\n\n\nThangavel Sharan\n\n\nTriston Pang Erh Syen\n\n\nWinson Heng Yong Seng\n\n\nYuen Jun Rong\n\n\n\n\n\n\nLab:\n Every Tuesday (Week 3 - Week 13)\n\n\nMidterm Test:\n March 5, 2018, Monday, 10am\n\n\nFinal Assessment:\n May 3, 2018, Thursday\n\n\n\n\nWorkload\n\n\nBesides the 4-hour contact time for lecture and lab, students are expected to spend about 6 hours on average weekly on homework and on preparing the class.\n\n\nHistory\n\n\nCS2030 is a new module, required for all students in Bachelor of Computing (Computer Science) and Second Major in Computer Science students, cohort 17/18 onwards.  In 2017, the Department of Computer Science reorganized the two module series on data structures and algorithms (CS1020, CS2010) into (CS2030, CS2040).  CS2040 focuses on data structures and algorithms, while the advanced programming methodologies from CS1020 are moved into CS2030.  CS2030 will also covers some basics OO design that previously were covered in CS2103, and introduces students to functional programming, concurrent programming, event-based programming, and other paradigms that are increasingly important.\n\n\nLearning Outcomes\n\n\nAfter completing the module, students should:\n\n\n\n\nbe confident in reading and developing medium-scale programs (up to 10K lines of code)\n\n\nbe familiarize enough with common OO concepts to understand software code written in common OO language and understand documentation of software libraries in OO\n\n\nbe able to apply OO concepts to design and implement medium to large scale  programs, including\n\n\ndesign and implement a class\n\n\ndecompose a problem solution into classes and define members and methods for each class\n\n\nuse polymorphism effectively\n\n\nuse inheritance to design simple class hierarchies that allow code reuse\n\n\ntrace the control flow of a programs that use dynamic dispatch\n\n\nuse encapsulation mechanisms such as interfaces, private methods/members\n\n\n\n\n\n\nbe familiarize enough with common functional programming concepts and constructs, including lambda expression, effect-free programming, first class functions, infinite streams.\n\n\nbe able to apply functional programming concepts to design and implement , including:\n\n\nImplement basic algorithms in functions that are effect free.\n\n\nImplement useful functions that take/return another function\n\n\nWrite correct and effective code using lambda expressions and/or infinite streams\n\n\n\n\n\n\nbe able to compare and contrast imperative programming, OO programming, and function programming paradigms, and select the most natural paradigms for each situation\n\n\nbe aware of how the OOP and FP concepts are implemented in different ways in different programming languages\n\n\nbe confident enough to learn new programming languages that uses OOP and FP paradigm\n\n\nattain proficiency in Java 8 (and above)\n\n\nbe equipped with solid programming foundations for further studies in computer science\n\n\n\n\nTextbook\n\n\nThere is no textbook for this class.\n\n\nThere are many good books and online articles written about the topics covered in the module.  These will be listed under the \nReadings\n section.",
            "title": "About"
        },
        {
            "location": "/index.html#cs2030-programming-methodology-ii",
            "text": "",
            "title": "CS2030 Programming Methodology II"
        },
        {
            "location": "/index.html#ay1718-semester-2",
            "text": "",
            "title": "AY17/18 Semester 2"
        },
        {
            "location": "/index.html#about",
            "text": "This module is a follow up to CS1010.  It explores two modern programming paradigms, object-oriented programming and functional programming.  Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using object-oriented design principles and advanced programming constructs available in the two paradigms.  Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.",
            "title": "About"
        },
        {
            "location": "/index.html#whowhenwhere",
            "text": "Lecture:  10am - 12noon, every Monday  Venue:  LT19  Instructor:   Ooi Wei Tsang  ( ooiwt@comp.nus.edu.sg )  Teaching Assistant:    Lan Ziquan ( ziquan@comp.nus.edu.sg )    UG Tutors:  Bernard Teo Zhi Yi  Chang Ho Huan  Chung Zhi Li, Denzel  Evan Tay  Ho Boon Wee Addison  Jeremy Lim Yu Xuan  Joshi Atharv Abhay  Lim Heng Guang  Lin Si Jie  Ong Yan Zhi  Qiu Siyu  Tan Thong Cai, Nelvin  Tay Hui Chun  Teh Zi Cong Nicholas  Thangavel Sharan  Triston Pang Erh Syen  Winson Heng Yong Seng  Yuen Jun Rong    Lab:  Every Tuesday (Week 3 - Week 13)  Midterm Test:  March 5, 2018, Monday, 10am  Final Assessment:  May 3, 2018, Thursday",
            "title": "Who/When/Where"
        },
        {
            "location": "/index.html#workload",
            "text": "Besides the 4-hour contact time for lecture and lab, students are expected to spend about 6 hours on average weekly on homework and on preparing the class.",
            "title": "Workload"
        },
        {
            "location": "/index.html#history",
            "text": "CS2030 is a new module, required for all students in Bachelor of Computing (Computer Science) and Second Major in Computer Science students, cohort 17/18 onwards.  In 2017, the Department of Computer Science reorganized the two module series on data structures and algorithms (CS1020, CS2010) into (CS2030, CS2040).  CS2040 focuses on data structures and algorithms, while the advanced programming methodologies from CS1020 are moved into CS2030.  CS2030 will also covers some basics OO design that previously were covered in CS2103, and introduces students to functional programming, concurrent programming, event-based programming, and other paradigms that are increasingly important.",
            "title": "History"
        },
        {
            "location": "/index.html#learning-outcomes",
            "text": "After completing the module, students should:   be confident in reading and developing medium-scale programs (up to 10K lines of code)  be familiarize enough with common OO concepts to understand software code written in common OO language and understand documentation of software libraries in OO  be able to apply OO concepts to design and implement medium to large scale  programs, including  design and implement a class  decompose a problem solution into classes and define members and methods for each class  use polymorphism effectively  use inheritance to design simple class hierarchies that allow code reuse  trace the control flow of a programs that use dynamic dispatch  use encapsulation mechanisms such as interfaces, private methods/members    be familiarize enough with common functional programming concepts and constructs, including lambda expression, effect-free programming, first class functions, infinite streams.  be able to apply functional programming concepts to design and implement , including:  Implement basic algorithms in functions that are effect free.  Implement useful functions that take/return another function  Write correct and effective code using lambda expressions and/or infinite streams    be able to compare and contrast imperative programming, OO programming, and function programming paradigms, and select the most natural paradigms for each situation  be aware of how the OOP and FP concepts are implemented in different ways in different programming languages  be confident enough to learn new programming languages that uses OOP and FP paradigm  attain proficiency in Java 8 (and above)  be equipped with solid programming foundations for further studies in computer science",
            "title": "Learning Outcomes"
        },
        {
            "location": "/index.html#textbook",
            "text": "There is no textbook for this class.  There are many good books and online articles written about the topics covered in the module.  These will be listed under the  Readings  section.",
            "title": "Textbook"
        },
        {
            "location": "/prereqs/index.html",
            "text": "Assumed Prior Knowledge\n\n\nCS2030 has the prerequisite of CS1010 or its equivalent.  There are, however, several versions of CS1010, and some students are waived from doing CS1010 due to prior programming knowledge.  This document here outlines the prior knowledge that the instructors assume the students have before entering CS2030.\n\n\nBasic computational problem solving and programming skills\n\n\nHere are some learning outcomes that students should attained after taking CS1010.  Students should be familiar with:\n\n\n\n\nthe computational thinking process of formulating a problem and coming up with a solution,\n\n\nfundamental programming concepts, including variables, assignments, conditions, branches, loops, expressions, functions, recursions, and structures\n\n\nhow to program a given solution in a programming language\n\n\ndifferent classes of programming errors (logical errors, syntax errors, run-time errors)\n\n\ncommon debugging techniques and strategies\n\n\ngood programming practices (comments, naming convention, indentation, modular code)\n\n\nsimple data structures (e.g., arrays)\n\n\nwriting test cases to check correctness of own program\n\n\nhow a program is executed and represented in a computing device (at a high level)\n\n\nthe compilation process (at a high level)\n\n\nthe concept of reusability and the use of standard/3\nrd\n party software\n\n\nbubble sort, insertion sort, linear search, and binary search\n\n\n\n\nStudents who take CS2030 are assumed to have sufficient knowledge of the above.  If there are specific components that you are not familiar with, please pick up the notes from CS1010 and self-learn.\n\n\nUNIX command line\n\n\nWe will use the \nsunfire\n computing server for this module.  As such, you are expected to be comfortable with using CLI (command line interface) and the basic UNIX commands, in a text window without fancy windows and mouse, and the concept of \nssh\n-ing into a remote host and work remotely.\n\n\nIf you are not familiar with this concept, take a look at the \nslides from the CS1010/CS1020 workshop\n.\n\n\nSource code editors\n\n\nYou are expected to be familiar with one or more source code editors.  Note that source code editor is not the same as text editor (e.g., Notepad).  A source code editor automatically highlights syntax, indents the code, matches parenthesis, supports autocompletion and code folding, and integrates with the software development process (such as revision control).\n\n\nCS1010 started (or would have started) you off with \nvim\n.  Many good source code editors exists, such as \nAtom\n, \nVS Code\n, and of course \nemacs\n1\n!\n\n\nFor your career, you should pick one and master it.  If you want to learn \nvim\n, the command \nvimtutor\n is a good place to start.  There are also many tutorials, webcasts, games, etc, online to help you learn \nvim\n.  Just google.\n\n\nDeveloper's Friendly OS\n\n\nYour life through the computing modules would be much much better if you are using a developer's friendly operating system on your personal computer.  \n\n\n\n\n\n\nIf you uses Linux or macOS, you are all set.  For macOS users, \nbrew\n is highly recommended.\n\n\n\n\n\n\nIf you use Windows 10, you should definitely install the Ubuntu Bash Shell.  There are many excellent tutorials online (such as \nthis one\n).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI can't mention \nvim\n without mentioning \nemacs\n\u00a0\n\u21a9",
            "title": "Prerequisites"
        },
        {
            "location": "/prereqs/index.html#assumed-prior-knowledge",
            "text": "CS2030 has the prerequisite of CS1010 or its equivalent.  There are, however, several versions of CS1010, and some students are waived from doing CS1010 due to prior programming knowledge.  This document here outlines the prior knowledge that the instructors assume the students have before entering CS2030.",
            "title": "Assumed Prior Knowledge"
        },
        {
            "location": "/prereqs/index.html#basic-computational-problem-solving-and-programming-skills",
            "text": "Here are some learning outcomes that students should attained after taking CS1010.  Students should be familiar with:   the computational thinking process of formulating a problem and coming up with a solution,  fundamental programming concepts, including variables, assignments, conditions, branches, loops, expressions, functions, recursions, and structures  how to program a given solution in a programming language  different classes of programming errors (logical errors, syntax errors, run-time errors)  common debugging techniques and strategies  good programming practices (comments, naming convention, indentation, modular code)  simple data structures (e.g., arrays)  writing test cases to check correctness of own program  how a program is executed and represented in a computing device (at a high level)  the compilation process (at a high level)  the concept of reusability and the use of standard/3 rd  party software  bubble sort, insertion sort, linear search, and binary search   Students who take CS2030 are assumed to have sufficient knowledge of the above.  If there are specific components that you are not familiar with, please pick up the notes from CS1010 and self-learn.",
            "title": "Basic computational problem solving and programming skills"
        },
        {
            "location": "/prereqs/index.html#unix-command-line",
            "text": "We will use the  sunfire  computing server for this module.  As such, you are expected to be comfortable with using CLI (command line interface) and the basic UNIX commands, in a text window without fancy windows and mouse, and the concept of  ssh -ing into a remote host and work remotely.  If you are not familiar with this concept, take a look at the  slides from the CS1010/CS1020 workshop .",
            "title": "UNIX command line"
        },
        {
            "location": "/prereqs/index.html#source-code-editors",
            "text": "You are expected to be familiar with one or more source code editors.  Note that source code editor is not the same as text editor (e.g., Notepad).  A source code editor automatically highlights syntax, indents the code, matches parenthesis, supports autocompletion and code folding, and integrates with the software development process (such as revision control).  CS1010 started (or would have started) you off with  vim .  Many good source code editors exists, such as  Atom ,  VS Code , and of course  emacs 1 !  For your career, you should pick one and master it.  If you want to learn  vim , the command  vimtutor  is a good place to start.  There are also many tutorials, webcasts, games, etc, online to help you learn  vim .  Just google.",
            "title": "Source code editors"
        },
        {
            "location": "/prereqs/index.html#developers-friendly-os",
            "text": "Your life through the computing modules would be much much better if you are using a developer's friendly operating system on your personal computer.      If you uses Linux or macOS, you are all set.  For macOS users,  brew  is highly recommended.    If you use Windows 10, you should definitely install the Ubuntu Bash Shell.  There are many excellent tutorials online (such as  this one ).        I can't mention  vim  without mentioning  emacs \u00a0 \u21a9",
            "title": "Developer's Friendly OS"
        },
        {
            "location": "/policies/index.html",
            "text": "Policies\n\n\nEmail Communication\n\n\n\n\n\n\nPlease use only your official NUS email for communication with the teaching staffs -- either the one with \n@u.nus.edu\n or \n@comp.nus.edu.sg\n.  \n\n\n\n\n\n\nPlease use email only for private matters.  Prefix your email subject with \n[CS2030]\n.\n\n\n\n\n\n\nPlease use \nPiazza\n for other matters related to the module.  If you email us privately and we feel that your questions/answers are useful to the rest of the class, we will publish it on Piazza, with anonymization when appropriate.\n\n\n\n\n\n\nLab Sessions\n\n\n\n\n\n\nWe do take attendance during the lab sessions, but it does not affect your grades if you do not attend the lab sessions as long as you still need to submit the graded lab exercises.  \n\n\n\n\n\n\nYou should stick to your allocated time slot for labs.  If there is a strong reason for your to attend another lab session, please inform your lab instructors.\n\n\n\n\n\n\nLate Submissions\n\n\n\n\n\n\nAll graded exercise must be submitted on time.  If you need an extension, please ask for one and provide a justification for approval.  Only academic reasons can be considered (e.g., representing NUS for a sports event is OK, going for vacation is not)\n\n\n\n\n\n\nFor late submission, there is a 1% penalty (of the assessment grade) for every 5-minute after the deadline, capped at 80%.  For example, if a homework is deserved 40 marks, and it is submitted 100 minutes after the deadline, the student will get 32 marks instead (20% penalty).  If it is submitted 10 hours after the deadline, the student will get 8 marks (as it has hit the cap of 80% penalty).\n\n\n\n\n\n\nDiscussions and Plagiarism\n\n\n\n\n\n\nWe encourage discussions among students for lab assignments, but each student should be responsible for writing his/her own code and should give credits to others when appropriate.  \n\n\n\n\n\n\nNUS and School of Computing have a high standard on academic honesty and take any violation seriously.  In the context of computing modules, source code plagiarism -- copying code from another source and attributing it as one's own code -- is a series violation.   Please read the page \nPreventing Plagiarism\n from the school's website to familiarize yourself with the policy.\n\n\n\n\n\n\nI adopt a \"no mercy\" policy when it comes to disciplinary action on plagiarism.  Both parties, the student who copied, and the student who allowed others to copy, will be penalized equally.\n\n\n\n\n\n\nLecture Video\n\n\n\n\n\n\nScreencast will be recorded and posted online 2-3 days after the lecture. \nThis will be done on a 'best effort' basis and screencast will not be guaranteed to be available.  \n\n\n\n\n\n\nPosting of screencast is meant to help students who attended the lecture to recap the content, or to help those who are not able to attend the lecture due to unexpected circumstances.  It does not mean that you should skip lecture.\n\n\n\n\n\n\nModel Solutions and Slides\n\n\n\n\n\n\nSlides will be posted \nafter\n the class.  Note that slides are used as a \nvisual aid\n to assist me during lecture.  It is not meant as summary of lectures nor a replacement of lecture notes.\n\n\n\n\n\n\nIn a module like CS2030, there is often not a single correct answer.  Hence, there is no model solution for this module.  Sample solutions may be posted (both good and bad ones) for discussion.  I strongly encourage students to discuss your solution with me, instead of just comparing your solution with the sample solution.\n\n\n\n\n\n\nGrading\n\n\n\n\nStudents will received the grades they deserved irrespective of how the other students in the class performed (i.e., no bell curve)\n\n\n\n\nOpen Book Assessment\n\n\n\n\n\n\nAll assessment, including graded labs, midterm test, and final assessment, are open book assessment -- you can bring in your notes or other \nanalog\n reference materials.  Java documentation will be made available during labs.  Relevant Java APIs will be provided during midterm tests and final assessments.\n\n\n\n\n\n\nThere is \nnothing to memorize\n for this class.",
            "title": "Policies"
        },
        {
            "location": "/policies/index.html#policies",
            "text": "",
            "title": "Policies"
        },
        {
            "location": "/policies/index.html#email-communication",
            "text": "Please use only your official NUS email for communication with the teaching staffs -- either the one with  @u.nus.edu  or  @comp.nus.edu.sg .      Please use email only for private matters.  Prefix your email subject with  [CS2030] .    Please use  Piazza  for other matters related to the module.  If you email us privately and we feel that your questions/answers are useful to the rest of the class, we will publish it on Piazza, with anonymization when appropriate.",
            "title": "Email Communication"
        },
        {
            "location": "/policies/index.html#lab-sessions",
            "text": "We do take attendance during the lab sessions, but it does not affect your grades if you do not attend the lab sessions as long as you still need to submit the graded lab exercises.      You should stick to your allocated time slot for labs.  If there is a strong reason for your to attend another lab session, please inform your lab instructors.",
            "title": "Lab Sessions"
        },
        {
            "location": "/policies/index.html#late-submissions",
            "text": "All graded exercise must be submitted on time.  If you need an extension, please ask for one and provide a justification for approval.  Only academic reasons can be considered (e.g., representing NUS for a sports event is OK, going for vacation is not)    For late submission, there is a 1% penalty (of the assessment grade) for every 5-minute after the deadline, capped at 80%.  For example, if a homework is deserved 40 marks, and it is submitted 100 minutes after the deadline, the student will get 32 marks instead (20% penalty).  If it is submitted 10 hours after the deadline, the student will get 8 marks (as it has hit the cap of 80% penalty).",
            "title": "Late Submissions"
        },
        {
            "location": "/policies/index.html#discussions-and-plagiarism",
            "text": "We encourage discussions among students for lab assignments, but each student should be responsible for writing his/her own code and should give credits to others when appropriate.      NUS and School of Computing have a high standard on academic honesty and take any violation seriously.  In the context of computing modules, source code plagiarism -- copying code from another source and attributing it as one's own code -- is a series violation.   Please read the page  Preventing Plagiarism  from the school's website to familiarize yourself with the policy.    I adopt a \"no mercy\" policy when it comes to disciplinary action on plagiarism.  Both parties, the student who copied, and the student who allowed others to copy, will be penalized equally.",
            "title": "Discussions and Plagiarism"
        },
        {
            "location": "/policies/index.html#lecture-video",
            "text": "Screencast will be recorded and posted online 2-3 days after the lecture. \nThis will be done on a 'best effort' basis and screencast will not be guaranteed to be available.      Posting of screencast is meant to help students who attended the lecture to recap the content, or to help those who are not able to attend the lecture due to unexpected circumstances.  It does not mean that you should skip lecture.",
            "title": "Lecture Video"
        },
        {
            "location": "/policies/index.html#model-solutions-and-slides",
            "text": "Slides will be posted  after  the class.  Note that slides are used as a  visual aid  to assist me during lecture.  It is not meant as summary of lectures nor a replacement of lecture notes.    In a module like CS2030, there is often not a single correct answer.  Hence, there is no model solution for this module.  Sample solutions may be posted (both good and bad ones) for discussion.  I strongly encourage students to discuss your solution with me, instead of just comparing your solution with the sample solution.",
            "title": "Model Solutions and Slides"
        },
        {
            "location": "/policies/index.html#grading",
            "text": "Students will received the grades they deserved irrespective of how the other students in the class performed (i.e., no bell curve)",
            "title": "Grading"
        },
        {
            "location": "/policies/index.html#open-book-assessment",
            "text": "All assessment, including graded labs, midterm test, and final assessment, are open book assessment -- you can bring in your notes or other  analog  reference materials.  Java documentation will be made available during labs.  Relevant Java APIs will be provided during midterm tests and final assessments.    There is  nothing to memorize  for this class.",
            "title": "Open Book Assessment"
        },
        {
            "location": "/schedule/index.html",
            "text": "Schedule and Learning Material\n\n\n\n\n\n\n\n\nWeek\n\n\nDate\n\n\nTopics\n\n\nResources\n\n\nLabs\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n2018-01-15\n\n\n1. Abstraction and Encapsulation\n\n\n[Notes] . \nSlides\n\n\n\n\n\n\n\n\n\n\n2\n\n\n2018-01-22\n\n\n2. Inheritance and Polymorphism\n\n\n[Notes] . \nSlides\n\n\n\n\n\n\n\n\n\n\n3\n\n\n2018-01-29\n\n\n3. Inheritance vs. Composition\n\n\n[Notes] . \nSlides\n\n\nLab 0: Warm Up\n\n\n\n\n\n\n\n\n4\n\n\n2018-02-03\n\n\n4. Java Execution and Memory Models (incl Exceptions)\n\n\n[Notes++] . \nSlides\n\n\nLab 1a: Procedural to OO\n\n\n\n\n\n\n\n\n5\n\n\n2018-02-12\n\n\n5. Generics and Collections\n\n\n[Notes++] . \nSlides\n\n\nLab 1b: Simulator with Multiple Waiting Customers\n\n\n\n\n\n\n\n\n6\n\n\n2018-02-19\n\n\n6. Types and Nested Classes\n\n\n[Notes++] . \nSlides\n\n\nLab 2a: Simulator with Multiple Servers\n\n\n\n\n\n\n\n\n\n\n2018-02-26\n\n\nBreak\n\n\n\n\n\n\n\n\n\n\n\n\n7\n\n\n2018-03-05\n\n\n[Midterm]\n\n\n\n\nLab 2b: Simulator with Different Customer Types, Complex Events\n\n\n\n\n\n\n\n\n8\n\n\n2018-03-12\n\n\n7. Functions and Lambdas\n\n\n[Notes] . \nSlides\n\n\nLab 3a: Lambda List\n\n\n\n\n\n\n\n\n9\n\n\n2018-03-19\n\n\n8. Stream and Collections\n\n\n[Notes++] . \nSlides\n\n\nLab 3b: Infinite Lazy List\n\n\n\n\n\n\n\n\n10\n\n\n2018-03-26\n\n\n9. Optional, Functor, and Monad\n\n\n[Notes++] . \nSlides\n\n\nLab 4a: A Functional Simulator\n\n\n\n\n\n\n\n\n11\n\n\n2018-04-02\n\n\n10. Parallel Programming\n\n\n[Notes] . \nSlides\n\n\nLab 4b: A Functional Simulator, Continued\n\n\n\n\n\n\n\n\n12\n\n\n2018-04-09\n\n\n11. Asynchronous Programming\n\n\n[Notes] . \nSlides\n\n\nLab 5: Parallel\n\n\n\n\n\n\n\n\n13\n\n\n2018-04-16\n\n\n12. Recap\n\n\nNo Notes . \nSlides\n\n\nLab 6: Async",
            "title": "Schedule"
        },
        {
            "location": "/schedule/index.html#schedule-and-learning-material",
            "text": "Week  Date  Topics  Resources  Labs       1  2018-01-15  1. Abstraction and Encapsulation  [Notes] .  Slides      2  2018-01-22  2. Inheritance and Polymorphism  [Notes] .  Slides      3  2018-01-29  3. Inheritance vs. Composition  [Notes] .  Slides  Lab 0: Warm Up     4  2018-02-03  4. Java Execution and Memory Models (incl Exceptions)  [Notes++] .  Slides  Lab 1a: Procedural to OO     5  2018-02-12  5. Generics and Collections  [Notes++] .  Slides  Lab 1b: Simulator with Multiple Waiting Customers     6  2018-02-19  6. Types and Nested Classes  [Notes++] .  Slides  Lab 2a: Simulator with Multiple Servers      2018-02-26  Break       7  2018-03-05  [Midterm]   Lab 2b: Simulator with Different Customer Types, Complex Events     8  2018-03-12  7. Functions and Lambdas  [Notes] .  Slides  Lab 3a: Lambda List     9  2018-03-19  8. Stream and Collections  [Notes++] .  Slides  Lab 3b: Infinite Lazy List     10  2018-03-26  9. Optional, Functor, and Monad  [Notes++] .  Slides  Lab 4a: A Functional Simulator     11  2018-04-02  10. Parallel Programming  [Notes] .  Slides  Lab 4b: A Functional Simulator, Continued     12  2018-04-09  11. Asynchronous Programming  [Notes] .  Slides  Lab 5: Parallel     13  2018-04-16  12. Recap  No Notes .  Slides  Lab 6: Async",
            "title": "Schedule and Learning Material"
        },
        {
            "location": "/readings/index.html",
            "text": "Readings\n\n\nHere is a collection of readings related to CS2030 or otherwise.\n\n\nOn UNIX, Vim, and Emacs\n\n\n\n\n\n\nStackExchange: \nTime to Drop Emacs and Vim?\n\n\n\n\n\n\nBook: \nThe Art of UNIX Programming\n, online version, by Eric Steven Raymond, 2003. \n\n\n\n\n\n\nOn Programming Practices\n\n\n\n\nGoogle Java Style Guide\n\n\n\n\nOn OOP\n\n\n\n\n\n\nWhy extends is evil\n by Allen Holub. \n\"Good designers write most of their code in terms of interfaces, not concrete base classes.\"\n\n\n\n\n\n\nGoodbye, Object Oriented Programming\n by Charles Scalfani. \n\"One day, my code works and the next day it stops working. Here\u2019s the kicker. I didn\u2019t change my code.\n\"\n\n\n\n\n\n\nWhy getters and setters methods are evil\n, by Allen Holub. \"\nThough getter/setter methods are commonplace in Java, they are not particularly object oriented (OO). In fact, they can damage your code's maintainability. Moreover, the presence of numerous getter and setter methods is a red flag that the program isn't necessarily well designed from an OO perspective.\n\"\n\n\n\n\n\n\nGetters/Setters.  Evil.  Period\n, by Yegor Bygayenko.  \"\nThe gist of the following text is this: getters and setters is a terrible practice and those who use it can't be excused.\n\"\n\n\n\n\n\n\nTell, Don't Ask\n by Thoughtbot Inc. \n\"Good OOP is about telling objects what you want done, not querying an object and acting on its behalf. Data and operations that depend on that data belong in the same object.\"\n\n\n\n\n\n\nTell, Don't Ask\n by The Pragmatic Bookshelf. \n\"Procedural code gets information then makes decisions. Object-oriented code tells objects to do things.\"\n\n\n\n\n\n\nFor 1\nst\n Year Students\n\n\n\n\n\n\nNotes to Computer Science Freshmen, From the Future\n: \nEarly into the AY12/13 academic year, Prof Tay Yong Chiang organized a supper for Computer Science freshmen at Tembusu College. The bunch of seniors who were gathered there put together a document for NUS computing freshmen. This is that document.\n\n\n\n\n\n\nHow Not to Go About a Programming Assignment, by Agustin Cernuda del Rio\n: \nComputer programming students invariably fall into more than one bad habit. It can be extremely difficult to eradicate them (and many lecturers and professional programmers keep succumbing to them time and again)..\n\n\n\n\n\n\nBest Teacher I Ever Had, by David Owen\n: \nMr. Whitson taught sixth-grade science. On the first day of class, he gave us a lecture about a creature called the cattywampus, ..\n\n\n\n\n\n\nAcademic Honesty\n: \nAll students share the responsibility for upholding the academic standards and reputation of the University. Academic honesty is a prerequisite condition in the pursuit and acquisition of knowledge..",
            "title": "Readings"
        },
        {
            "location": "/readings/index.html#readings",
            "text": "Here is a collection of readings related to CS2030 or otherwise.",
            "title": "Readings"
        },
        {
            "location": "/readings/index.html#on-unix-vim-and-emacs",
            "text": "StackExchange:  Time to Drop Emacs and Vim?    Book:  The Art of UNIX Programming , online version, by Eric Steven Raymond, 2003.",
            "title": "On UNIX, Vim, and Emacs"
        },
        {
            "location": "/readings/index.html#on-programming-practices",
            "text": "Google Java Style Guide",
            "title": "On Programming Practices"
        },
        {
            "location": "/readings/index.html#on-oop",
            "text": "Why extends is evil  by Allen Holub.  \"Good designers write most of their code in terms of interfaces, not concrete base classes.\"    Goodbye, Object Oriented Programming  by Charles Scalfani.  \"One day, my code works and the next day it stops working. Here\u2019s the kicker. I didn\u2019t change my code.\n\"    Why getters and setters methods are evil , by Allen Holub. \" Though getter/setter methods are commonplace in Java, they are not particularly object oriented (OO). In fact, they can damage your code's maintainability. Moreover, the presence of numerous getter and setter methods is a red flag that the program isn't necessarily well designed from an OO perspective. \"    Getters/Setters.  Evil.  Period , by Yegor Bygayenko.  \" The gist of the following text is this: getters and setters is a terrible practice and those who use it can't be excused. \"    Tell, Don't Ask  by Thoughtbot Inc.  \"Good OOP is about telling objects what you want done, not querying an object and acting on its behalf. Data and operations that depend on that data belong in the same object.\"    Tell, Don't Ask  by The Pragmatic Bookshelf.  \"Procedural code gets information then makes decisions. Object-oriented code tells objects to do things.\"",
            "title": "On OOP"
        },
        {
            "location": "/readings/index.html#for-1st-year-students",
            "text": "Notes to Computer Science Freshmen, From the Future :  Early into the AY12/13 academic year, Prof Tay Yong Chiang organized a supper for Computer Science freshmen at Tembusu College. The bunch of seniors who were gathered there put together a document for NUS computing freshmen. This is that document.    How Not to Go About a Programming Assignment, by Agustin Cernuda del Rio :  Computer programming students invariably fall into more than one bad habit. It can be extremely difficult to eradicate them (and many lecturers and professional programmers keep succumbing to them time and again)..    Best Teacher I Ever Had, by David Owen :  Mr. Whitson taught sixth-grade science. On the first day of class, he gave us a lecture about a creature called the cattywampus, ..    Academic Honesty :  All students share the responsibility for upholding the academic standards and reputation of the University. Academic honesty is a prerequisite condition in the pursuit and acquisition of knowledge..",
            "title": "For 1st Year Students"
        },
        {
            "location": "/lec01/index.html",
            "text": "Lecture 1: Abstraction and Encapsulation\n\n\nLearning Objectives\n\n\nAfter this lecture, students should:\n\n\n\n\nrecap some fundamental programming concepts, including the execution model of a program, abstractions over code and data, primitive and composite data types.\n\n\nappreciate the importance of maintaining abstraction barrier in software development\n\n\nunderstand the differences between statically and dynamically typed languages\n\n\nunderstand the concepts of object-oriented programming, including encapsulation, data hiding, fields and methods, constructors, mutators/accessors, classes and objects, and their purposes of introducing them as a method of programming.\n\n\nknow the purpose and usage of Java keywords \nclass\n, \npublic\n, \nprivate\n, \nfinal\n, \nstatic\n, \nimport\n, \nnew\n\n\nunderstand that Java is a type-safe language, in contrast to C\n\n\nbe familiar with Java variable and primitive types\n\n\n\n\nWhat Exactly is a \nProgram\n?\n\n\nA program is a set of instructions we issue to computers to manipulate data.  A programming language is a formal language that helps programmers specify precisely what are the instructions we issue to computers, using code that are often made up of keywords, symbols, and names.  Computers execute the instructions in their \nprocessing units\n, and store the instructions and data in their \nmemory\n1\n.  The processing units recognize the instructions based on the specific patterns of bits and manipulate data as a sequence of bits.  A programming language, however, is written at a higher level of \nabstraction\n (i.e., at a higher conceptual level), so that as a programmer, we only need to write a few lines of code to give complex instructions to the computer.  A \ncompiler\n or \ninterpreter\n is responsible for translating these programs written in high level language to \nassembly code\n or \nmachine code\n, i.e., bit patterns that the processing units can understand.\n\n\nThere are thousands of programming languages in existence.  \nC\n is one of the languages that is a \nlow-level language\n -- i.e., it provides a very thin layer of abstractions on top of machine code.  On the other hand, languages such as \nPython\n and \nJavaScript\n are high-level languages.  As an example, in C, you can directly manage memory allocation.  In JavaScript and Python, you cannot.\n\n\nAbstraction: Variable and Type\n\n\nOne of the important abstractions that is provided by a programming language is \nvariable\n.  Data are stored in some location in the computer memory.  But we should not be referring to the memory location all the time.  First, referring to something like \n0xFA49130E\n is not user-friendly; Second, the location may change.  A \nvariable\n is an abstraction that allows us to give a user-friendly name to a piece of data in memory.  We use the \nvariable name\n whenever we want to access the \nvalue\n in that location, and \npointer to the variable\n or \nreference to the variable\n whenever we want to refer to the address of the location.\n\n\nLet's think a bit more about how a sequence of bits is abstracted as data in a programming language.  At the machine level, these bits are just, well, bits.  We give the bits a \nsemantic\n at the program level, e.g., we want to interpret the sequence of bits as numbers, letters, etc.  E.g., the number (integer, to be exact) \n65\n and the letter \nA\n all share the same sequence of bits \n0100 0001\n but are interpreted differently and possibly manipulated differently.  \n\n\nThe \ntype\n of a variable tells the compiler or the interpreter how to interpret the variable and how to manipulate the variable.  \n\n\nFor instance, supposed that in Python, if you have two variables \nx\n and \ny\n storing the values \n4\n and \n5\n respectively, if you \nprint x + y\n, you would get \n45\n if \nx\n and \ny\n are strings; you would get \n9\n if \nx\n and \ny\n are integers; you would get an error if \n4\n is an integer and \n5\n is a string.  \n\n\nIn the last instance above, you see that assigning a type to each variable helps to keep the program meaningful, as the operation \n+\n is not defined over an integer and a string in Python\n2\n.\n\n\nPython is a \ndynamically typed\n language.  The same variable can hold values of different types, and checking if the right type is used is done during the execution of the program.  Note that, the type is associated with the \nvalues\n, and the type of the variable changes depending on the value it holds.\n\n\nC, on the other hand, is a \nstatically typed\n language.  We need to \ndeclare\n every variable we use in the program and specify its type.  A variable can only hold values of the same type as the type of the variable, so we can't assign, for instance, a string to a variable of type \nint\n.  We check if the right type is used during the compilation of the program.\n\n\n1\n2\nint\n \nx\n \n=\n \n4\n;\n \n// ok\n\n\nint\n \ny\n \n=\n \n\"5\"\n;\n \n// error\n\n\n\n\n\n\n\nBy annotating each variable with its type, the C compiler also knows how much memory space is needed to store a variable.  \n\n\nAbstraction: Functions\n\n\nAnother important abstraction provided by a programming language is \nfunction\n (or \nprocedure\n).  This abstraction allows programmers to group a set of instructions and give it a name.  The named set of instructions may take one or more variables as input parameters, and return one or more values.   \n\n\nLike all other abstractions, defining functions allow us to think at a higher conceptual level.  By composing functions at increasingly higher level of abstractions, we can build programs with increasing level of complexity.\n\n\nDefining functions allow us to abstract away the implementation details from the caller.  Once a function is defined, we can change the way the function is implemented without affecting the code that calls the function, as long as the semantic and the \ninterface\n of the function remains the same.\n\n\nFunction therefore is a critical mechanism for achieving \nseparation of concerns\n in a program.  We separate the concerns about how a particular function is implemented, from the concerns about how the function is used to perform a higher-level task.\n\n\nDefining functions also allow us to \nreuse\n code.  We do not have to repeatedly write the same chunk of code if we group the sequence of code into a function -- then we just need to call the function to invoke this sequence of code every time we need it.  If this chunk of code is properly written and debugged, then we can be pretty sure that everywhere the function is invoked, the code is correct\n3\n.\n\n\nC is a \nprocedural language\n.  A C program consists of functions, with the \nmain()\n function serves as the entry point to the program.  Since C is a statically typed language, a C function has a return type, and each  function parameter (or \nargument\n) has a type as well.  (Note that this statement does not mean that a C function must return a \nvalue\n.  If the function does not return a value, we define its return type as \nvoid\n.)\n\n\nRecall that the bits representing the instructions are also stored in the computer memory in an area separated from the data.  The instructions that belong to the same function are stored in adjacent memory locations.  Just like we can refer to a variable using its memory address through its \nreference\n (or \npointer\n), we can refer to a function using the memory address of the entry point to the function.\n\n\nAbstraction: Composite Data type\n\n\nJust like functions allow programmers to group instructions, give it a name, and refer to it later, a \ncomposite data type\n allows programers to group \nprimitive types\n together, give it a name (a new type), and refer to it later.  This is another powerful abstraction in programming languages that help us to think at a higher conceptual level without worrying about the details.   Commonly used examples are mathematical objects such as complex numbers, 2D data points, multi-dimensional vectors, circles, etc, or everyday objects such as a person, a product, etc.\n\n\nDefining composite data type allows programmers to abstract away (and be separated from the concern of) how a complex data type is represented.\n\n\nFor instance, a circle on a 2D plane can be represented by the center (\nx\n, \ny\n) and its radius \nr\n, or it can be represented by the top left corner (\nx\n,\ny\n) and the width \nw\n of the bounding square.\n\n\nIn C, we build composite data type with \nstruct\n.  For example,\n\n\n1\n2\n3\n4\nstruct\n \ncircle\n \n{\n\n  \nfloat\n \nx\n,\n \ny\n;\n \n// (x,y) coordinate of the center.\n\n  \nfloat\n \nr\n;\n \n// radius\n\n\n}\n\n\n\n\n\n\n\nOnce we have the \nstruct\n defined, we are not completely shielded from its representation, until we write a set of functions that operates on the \ncircle\n composite type.  For instance,\n\n\n1\n2\n3\nfloat\n \ncircle_area\n(\ncircle\n \nc\n)\n \n{\n \n...\n \n};\n\n\nbool\n  \ncircle_contains_point\n(\ncircle\n \nc\n,\n \npoint\n \np\n)\n \n{\n \n...\n \n};\n\n  \n:\n\n\n\n\n\n\n\nImplementing these functions obviously requires the knowledge of how a circle is represented.  Once the set of functions that operates on and manipulates circles is available, we can use \ncircle\n type without worrying about the internal representation.  \n\n\nIf we decide to change the representation of a circle, then only the set of functions that operates on a circle type need to be changed, but not the code that uses circles to do other things.\n\n\nWe can imagine an \nabstraction barrier\n between the code that uses a composite data type along with its associated set of functions, and the code that define the data type along with the implementation of the functions.  Above the barrier, the concern is about using the composite data type to do useful things, while below the barrier, the concern is about how to represent and manipulate the composite data type.\n\n\nWhile many of you are used to writing a program solo, in practice, you rarely write a program with contributions from a single person.  The abstraction barrier separates the role of the programmer into two: (i) an \nimplementer\n, which define that data type and provide the implementation, and (ii) a \nclient\n, which uses the composite data type to perform a higher level task\n4\n.  Part of my aim in CS2030 is to switch your mindset into thinking in terms of these two roles.  Note that the implementer and the client may very well be the same programmer.\n\n\nAbstraction: Class and Object (or, Encapsulation)\n\n\nWe can further bundle the composite data type and its associated functions together in another abstraction, called a \nclass\n.  A class is a data type with a group of functions associated with it.  We call the functions as \nmethods\n and the data in the class as \nfields\n (or \nmembers\n, or \nstates\n, or \nattributes\n4\n).   A well-designed class maintains the abstraction barrier, properly wraps the barrier around the internal representation and implementation, and exposes just the right \ninterface\n for others to use.\n\n\nJust like we can create variables of a given type, we can create \nobjects\n of a given class.  Objects are \ninstances\n of a class, each allowing the same methods to be called, and each containing the same set of variables of the same types, but (possibly) storing different values.\n\n\nRecall that programs written in a procedural language such as a C consists of functions, with a \nmain()\n function as the entry point.  A program written in an \nobject-oriented language\n such as Java consists of classes, with one main class as the entry point.  One can view a running object-oriented (or OO) program as something that instantiates objects of different classes and orchestrates their interactions with each other by calling each others' methods.\n\n\nOne could argue that an object-oriented way of writing programs is much more natural, as it mirrors our world more closely.  If we look around us, we see objects all around us, and each object has certain properties, exhibit certain behavior, and they allow certain actions.  We interact with the objects through their interfaces, and we rarely need to know the internals of the objects we used everyday (unless we try to repair it)\n5\n.  \n\n\nThe concept of keeping all the data and functions operating on the data related to a composite data type together within an abstraction barrier, is called \nencapsulation\n.\n\n\nBreaking the Abstraction Barrier\n\n\nIn the ideal case, the code above the abstraction barrier would just call the provided interface to use the composite data type.  There, however, may be cases where a programmer may intentionally or accidentally break the abstraction barrier.  \n\n\nConsider the case of implementing \ncircle\n as a C \nstruct\n.  Suppose someone wants to move the center of the circle \nc\n to a new position (\nx\n, \ny\n), instead of implementing a function \ncircle_move_to(c, x, y)\n (which would still keep the representation used under the barrier), the person wrote:\n\n\n1\n2\nc\n.\nx\n \n=\n \nx\n;\n\n\nc\n.\ny\n \n=\n \ny\n;\n\n\n\n\n\n\n\nThis code would still be correct, but the abstraction barrier is broken since we now make explicit assumption that there are two variables \nx\n and \ny\n inside the \ncircle\n data type that correspond to the center of the circle.  If one day, we want to represent a circle differently, then we have to carefully change all the code that read and write these variables \nx\n and \ny\n and update them.\n\n\n\n\nBreaking Python's Abstraction Barrier\n\n\nPython tries to prevent \naccidental\n access to internal representation by having a convention of prefixing the internal variables with \n_\n (one underscore) or \n__\n (two underscores).   This method, however, does not prevent a lazy programmer from directly accessing the variables and possibly planting a bug / error that will surface later.\n\n\n\n\nData Hiding\n\n\nMany OO languages allow programmers to explicitly specify if a field or a method can be accessed from outside the abstraction barrier.  Java, for instance, support \nprivate\n and \npublic\n access modifiers\n5\n.  A field or a method that is declared as \nprivate\n cannot be accessed from outside the class, and can only be accessed within the class.  On the other hand, as you can guess, a \npublic\n field or method can be accessed, modified, or invoked from outside the class.\n\n\nSuch mechanism to protect the abstraction barrier from being broken is called \ndata hiding\n or \ninformation hiding\n.  This protection is enforced in the \ncompiler\n during compile time.\n\n\nExample: The Circle class\n\n\nLet's put together the concepts of encapsulation and data hiding to define a \nCircle\n class in Java:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n/**\n\n\n * A Circle object encapsulates a circle on a 2D plane.  \n\n\n */\n\n\nclass\n \nCircle\n \n{\n\n  \nprivate\n \ndouble\n \nx\n;\n  \n// x-coordinate of the center\n\n  \nprivate\n \ndouble\n \ny\n;\n  \n// y-coordinate of the center\n\n  \nprivate\n \ndouble\n \nr\n;\n  \n// the length of the radius\n\n\n  \n/**\n\n\n   * Return the area of the circle.\n\n\n   */\n\n  \npublic\n \ndouble\n \ngetArea\n()\n \n{\n\n    \nreturn\n \n3.1415926\n \n*\n \nr\n \n*\n \nr\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Move the center of the circle to the new position (newX, newY)\n\n\n   */\n\n  \npublic\n \nvoid\n \nmoveTo\n(\ndouble\n \nnewX\n,\n \ndouble\n \nnewY\n)\n \n{\n\n    \nx\n \n=\n \nnewX\n;\n\n    \ny\n \n=\n \nnewY\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nHere, we define \nx\n, \ny\n, and \nr\n as three private fields inside the class \nCircle\n.  Note that these fields are not accessible and modifiable outside of the class \nCircle\n, but they can be accessed and modified within \nCircle\n (inside the abstraction barrier), such as in the methods \ngetArea\n and \nmoveTo\n.\n\n\nConstructors, Accessors, and Mutators\n\n\nWith data hiding, we completely isolate the internal representation of a class using an abstraction barrier.  With no way for the user of the class to modify the fields directly, it is common for a class to provide methods to initialize and modify these internal fields (such as the \nmoveTo()\n method above).  A method that initializes an object is called a \nconstructor\n, and a method that retrieves or modifies the properties of the object is called the \naccessor\n (or \ngetter\n) or \nmutator\n (or \nsetter\n).\n\n\nA constructor method is a special method within the class.  It cannot be called directly, but is invoked automatically when an object is instantiated.   In Java, a constructor method \nhas the same name as the class\n and \nhas no return type\n.  A constructor can take in arguments just like other functions.  The class \nCircle\n can have a constructor such as the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nclass\n \nCircle\n \n{\n\n    \n:\n\n  \n/**\n\n\n   * Create a circle centered on (centerX, centerY) with given radius\n\n\n  */\n\n  \npublic\n \nCircle\n(\ndouble\n \ncenterX\n,\n \ndouble\n \ncenterY\n,\n \ndouble\n \nradius\n)\n \n{\n\n    \nx\n \n=\n \ncenterX\n;\n\n    \ny\n \n=\n \ncenterY\n;\n\n    \nr\n \n=\n \nradius\n;\n\n  \n}\n\n    \n:\n\n\n}\n\n\n\n\n\n\n\nThe use of accessor and mutator methods is a bit controversial.   Suppose that we provide an accessor method and a mutator method for every private field, then we are actually exposing the internal representation, therefore breaking the encapsulation.  For instance:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\nclass\n \nCircle\n \n{\n\n    \n:\n\n\n  \npublic\n \ndouble\n \ngetX\n()\n \n{\n\n    \nreturn\n \nx\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nsetX\n(\ndouble\n \nnewX\n)\n \n{\n\n    \nx\n \n=\n \nnewX\n;\n\n  \n}\n\n\n  \npublic\n \ndouble\n \ngetY\n()\n \n{\n\n    \nreturn\n \ny\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nsetY\n(\ndouble\n \nnewY\n)\n \n{\n\n    \ny\n \n=\n \nnewY\n:\n\n  \n}\n\n\n  \npublic\n \ndouble\n \ngetR\n()\n \n{\n\n    \nreturn\n \nr\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nsetR\n(\ndouble\n \nnewR\n)\n \n{\n\n    \nr\n \n=\n \nnewR\n;\n\n  \n}\n\n    \n:\n\n\n}\n\n\n\n\n\n\n\nThe examples above are pretty pointless.  If we need to know the internal and do something with it, we are doing it wrong.  The right approach is to implement a method within the class that do whatever we want the class to do.   For instance, suppose that we want to know the circumference of the circle \nc\n, one approach would be:\n\n\n1\n   \ndouble\n \ncircumference\n \n=\n \n2\n*\nc\n.\ngetR\n()*\n3.1415926\n;\n\n\n\n\n\n\n\nwhere \nc\n is a \nCircle\n object.\n\n\nA better approach would be to add a new method \ngetCircumference()\n in the \nCircle\n class, and call it instead:\n\n1\n   \ndouble\n \ncircumference\n \n=\n \nc\n.\ngetCircumference\n();\n\n\n\n\n\n\nThe better approach involves writing a few more lines of code to implement the method, but it keeps the encapsulation intact.  If one fine day, the implementer of \nCircle\n decided to store the diameter of the circle instead of the radius, then only the implementer needs to change the implementation of \ngetCircumference\n.  The client does not have to change anything.  \n\n\n\n\nConstructor in Python and JavaScript\n\n\nIn Python, the constructor is the \n__init__\n method.   In JavaScript, the constructor is simply called \nconstructor\n.\n\n\n\n\nClass Fields and Methods\n\n\nLet's look at the implementation of \ngetArea()\n above.  We use the constant \n\\(\\pi\\)\n but hardcoded it as 3.1415926.  Hardcoding such a magic number is a \nno no\n in terms of coding style.  This constant can appear in more than one places. If we hardcode such a number and want to change its precision later, we would need to trace down and change every occurrence.  Every time we need to use \n\\(\\pi\\)\n, we have to remember or lookup what is the precision that we use.  Not only does this practice introduce more work, it is also likely to introduce bugs.  \n\n\nIn C, we define \n\\(\\pi\\)\n as a macro constant \nM_PI\n.  But how should we do this in Java?  This is where the ideal that a program consists of only objects with internal states that communicate with each other feel a bit constraining.  The constant \n\\(\\pi\\)\n is universal, and does not really belong to any object (the value of \n\\(\\pi\\)\n is the same for every circle!).  Another example: if we define a method \nsqrt()\n that computes the square root of a given number, this is a general function that is not associated with any object as well.\n\n\nA solution to this is to associate these \nglobal\n values and functions with a \nclass\n instead of with an \nobject\n.  For instance. Java predefines a \nMath\n class\n6\n that is populated with constants \nPI\n and \nE\n (for Euler's number \n\\(e\\)\n), along with a long list of mathematical functions.  To associate a method or a field with a class in Java, we declare them with the \nstatic\n keyword.  We can additionally add a keyword \nfinal\n to indicate that the value of the field will not change\n7\n.\n\n\n1\n2\n3\n4\n5\n6\nclass\n \nMath\n \n{\n\n  \n:\n\n  \npublic\n \nstatic\n \nfinal\n \ndouble\n \nPI\n \n=\n \n3.141592653589793\n;\n\n  \n:\n\n  \n:\n\n\n}\n\n\n\n\n\n\n\nWe call these fields and methods that are associated with a class as \nclass fields\n and \nclass methods\n, and fields and methods that are associated with an object as \ninstance fields\n and \ninstance methods\n.\n\n\n\n\nClass Fields and Methods in Python\n\n\nNote that, in Python, any variable declared within a \nclass\n block is a class field:\n\n1\n2\n3\nclass\n \nCircle\n:\n\n  \nx\n \n=\n \n0\n\n  \ny\n \n=\n \n0\n\n\n\n\n\nIn the above example, \nx\n and \ny\n are class fields, not instance fields.\n\n\n\n\nExample: The Circle class\n\n\nNow, let revise our \nCircle\n class to improve the code and make it a little more complete:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\nimport\n \njava.lang.Math\n;\n\n\n\n/**\n\n\n * A Circle object encapsulates a circle on a 2D plane.  \n\n\n */\n\n\nclass\n \nCircle\n \n{\n\n  \nprivate\n \ndouble\n \nx\n;\n  \n// x-coordinate of the center\n\n  \nprivate\n \ndouble\n \ny\n;\n  \n// y-coordinate of the center\n\n  \nprivate\n \ndouble\n \nr\n;\n  \n// the length of the radius\n\n\n  \n/**\n\n\n   * Create a circle centered on (centerX, centerY) with given radius\n\n\n  */\n\n  \npublic\n \nCircle\n(\ndouble\n \ncenterX\n,\n \ndouble\n \ncenterY\n,\n \ndouble\n \nradius\n)\n \n{\n\n    \nx\n \n=\n \ncenterX\n;\n\n    \ny\n \n=\n \ncenterY\n;\n\n    \nr\n \n=\n \nradius\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Return the area of the circle.\n\n\n   */\n\n  \npublic\n \ndouble\n \ngetArea\n()\n \n{\n\n    \nreturn\n \nMath\n.\nPI\n*\nr\n*\nr\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Return the circumference of the circle.\n\n\n   */\n\n  \npublic\n \ndouble\n \ngetCircumference\n()\n \n{\n\n    \nreturn\n \nMath\n.\nPI\n*\n2\n*\nr\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Move the center of the circle to the new position (newX, newY)\n\n\n   */\n\n  \npublic\n \nvoid\n \nmoveTo\n(\ndouble\n \nnewX\n,\n \ndouble\n \nnewY\n)\n \n{\n\n    \nx\n \n=\n \nnewX\n;\n\n    \ny\n \n=\n \nnewY\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Return true if the given point (testX, testY) is within the circle.\n\n\n   */\n\n  \npublic\n \nboolean\n \ncontains\n(\ndouble\n \ntestX\n,\n \ndouble\n \ntestY\n)\n \n{\n\n    \nreturn\n \nfalse\n;\n\n    \n// TODO: left as an exercise  \n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nCreating and Interacting with \nCircle\n objects\n\n\nTo use the \nCircle\n class, we can either:\n\n\n\n\ncreate a \nmain()\n function, compile and link with the \nCircle\n class, and create an executable program, just like we usually do with a C program, OR\n\n\nuse \njshell\n, which is part of Java 9 (but not earlier versions). \njshell\n provides a \nread-evaluate-print loop\n (REPL) to help us quickly try out various features of Java.\n\n\n\n\nWe will write a complete Java program with \nmain()\n later in this class, but for now, we will use \njshell\n to demonstrate the various language features of Java\n7\n.\n\n\nThe demonstration below loads the \nCircle\n class written above (with the \ncontains\n method completed) from a file named \nCircle.java\n8\n, and creates two \nCircle\n objects, \nc1\n and \nc2\n.  We use the \nnew\n keyword to tell Java to create an object of type \nCircle\n here, passing in the center and the radius.\n\n\n1\nCircle\n \nc1\n \n=\n \nnew\n \nCircle\n(\n0\n,\n \n0\n,\n \n100\n);\n\n\n\n\n\n\n\n\n\n\nReference Type vs. Primitive Type\n\n\nThe variable \nc1\n actually stores an abstraction over a \nreference\n to the Circle object, instead of the object itself.\n\nAll objects are stored as references in Java\n.\n\n\nThe other variable type supported in Java is \nprimitive\n type.  A variable of primitive type stores the \nvalue\n instead of a reference to the value.\nJava supports eight \nprimitive\n data types: \nbyte\n, \nshort\n, \nint\n, \nlong\n, \nfloat\n, \ndouble\n, \nboolean\n and \nchar\n.  If you are familiar with C, these data types should not be foreign to you.  One important difference is that a \nchar\n variable stores a 16-bit Unicode character, not an 8-bit character like in C.  Java uses \nbyte\n for that.  The other notable difference is that Java defines \ntrue\n and \nfalse\n as possible value to a \nboolean\n, unlike C which uses \n0\n for false and non-\n0\n for true.  \n\n\nYou can read all about Java \nvariables\n and \nprimitive data types\n in Oracle's Java Tutorial.\n\n\nType Safety\n\n\nSome languages are stricter in terms of type \"compatibility\" than others.  C compilers, however, are not very strict.  If it detects something strange with the type you used, it will issue a warning, but still let your code compiles and run.\n\n\nTake:\n\n\n1\n2\n3\n4\n5\n#include\n \n<stdio.h>\n\n\nint\n \nmain\n()\n\n\n{\n\n    \nprintf\n(\n\"%d\n\\n\n\"\n,\n \n\"cs2030\"\n);\n\n\n}\n\n\n\n\n\n\n\nIn Line 4, we treat the address to a string as integer.  This generates a compiler's warning.\n\n\nIn C, you can \ntype cast\n a variable from one type into another, i.e., force the compiler to treat a variable of one type as another type.  The compiler would listen and do that for you.  The following code would print out gibberish and would compile perfectly without error.\n\n\n1\n2\n3\n4\n5\n#include\n \n<stdio.h>\n\n\nint\n \nmain\n()\n\n\n{\n\n    \nprintf\n(\n\"%d\n\\n\n\"\n,\n \n(\nint\n)\n\"cs2030\"\n);\n\n\n}\n\n\n\n\n\n\n\nSuch flexibility and loose rules for type compatibility could be useful, if you know what you are doing, but for most programmers, it could be a major source of unintentional bugs, especially if one does not pay attention to compiler's warning or one forces the warning to go away without fully understanding what is going on.\n\n\nJava is very strict when it comes to type checking, and is one of the \ntype-safe\n languages. Java ensures that basic operations (such as \n+\n, \n-\n, etc) and method calls apply to values in a way that makes sense.  If you try to pull the same trick as above, you will receive an error:\n\n\n\n\n\nExercise\n\n\n\n\n\n\nIn the example above, we implemented a class \nCircle\n.  There, we store and pass around two \ndouble\n variables that corresponds to the x-coordinate and y-coordinate of a point.  The code would be neater if we create a second class \nPoint\n that encapsulates the concept of a point on 2D plane and the operations on points.\n\n\nImplement a new class \nPoint\n and modify the class \nCircle\n to use the class \nPoint\n.  Pay attention to what methods and fields (if any) you expose as \npublic\n outside of the abstraction barrier of a \nPoint\n object.\n\n\nYou will need to use \njshell\n from Java 1.9 (or JDK 9) to interact with your new classes.\n\n\n\n\n\n\nUse \njshell\n to try out the following.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nclass\n \nA\n \n{\n\n    \npublic\n \nstatic\n \nint\n \nx\n \n=\n \n1\n;\n\n    \npublic\n \nint\n \ny\n \n=\n \n5\n;\n\n\n    \nvoid\n \nincrX\n()\n \n{\n\n        \nx\n \n=\n \nx\n \n+\n \n1\n;\n\n    \n}\n\n\n    \nvoid\n \nincrY\n()\n \n{\n\n        \ny\n \n=\n \ny\n \n+\n \n1\n;\n\n    \n}\n\n\n}\n\n\n\nA\n \na1\n \n=\n \nnew\n \nA\n();\n\n\nA\n \na2\n \n=\n \nnew\n \nA\n();\n\n\n\n\n\n\n\nAfter executing \na1.x = 10\n, what is the value of \na2.x\n?\n\n\nAfter executing \na1.y = 10\n, what is the value of \na2.y\n?\n\n\nIs \nA.x = 3\n a valid statement?  Is \nA.y = 3\n a valid statement?  \n\n\nNote: Even though \na1.x\n is valid, it is considered a bad programming practice to access a class field through an instance variable (e.g., \na1.x\n).  The proper way to do it is to use the class name \nA.x\n).\n\n\n\n\n\n\nConsider the following two classes:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nclass\n \nA\n \n{\n\n    \nprivate\n \nint\n \nx\n;\n\n  \npublic\n \nvoid\n \nchangeSelf\n()\n \n{\n\n    \nx\n \n=\n \n1\n;\n\n  \n}\n\n  \npublic\n \nvoid\n \nchangeAnother\n(\nA\n \na\n)\n \n{\n\n    \na\n.\nx\n \n=\n \n1\n;\n\n  \n}\n\n\n\n}\n\n\n\nclass\n \nB\n \n{\n\n    \npublic\n \nvoid\n \nchangeAnother\n(\nA\n \na\n)\n \n{\n\n        \na\n.\nx\n \n=\n \n1\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nWhich line(s) above violate the \nprivate\n access modifier of \nx\n?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOften, the instructions and data are stored in different regions of the memory.\u00a0\n\u21a9\n\n\n\n\n\n\nJavascript would happily convert \n4\n into a string for you, and return \n45\n.\u00a0\n\u21a9\n\n\n\n\n\n\nassuming the parameters are passed in correctly.\u00a0\n\u21a9\n\n\n\n\n\n\nComputer scientists just can't decide on what to call this!\u00a0\n\u21a9\n\u21a9\n\n\n\n\n\n\nOthers include \nprotected\n and the \ndefault\n modifier.  For beginners, it is better that we explicitly specify something as \nprivate\n or \npublic\n.\u00a0\n\u21a9\n\u21a9\n\n\n\n\n\n\nThe class \nMath\n is provided by the package \njava.lang\n in Java.  A package is simply a set of related classes (and interfaces, but I have not told you what is an interface yet).  To use this class, we need to add the line \nimport\n \njava.lang.Math\n in the beginning of our program.\u00a0\n\u21a9\n\n\n\n\n\n\nYou can download and install \njshell\n yourself, as part of \nJava Development Kit version 9 (JDK 9)\n\u00a0\n\u21a9\n\u21a9\n\n\n\n\n\n\nWe use the convention of one public class per file, name the file with the exact name of the class (including capitalization), and include the extension \n.java\n to the filename.\u00a0\n\u21a9",
            "title": "1. Abstraction & Encapsulation"
        },
        {
            "location": "/lec01/index.html#lecture-1-abstraction-and-encapsulation",
            "text": "",
            "title": "Lecture 1: Abstraction and Encapsulation"
        },
        {
            "location": "/lec01/index.html#learning-objectives",
            "text": "After this lecture, students should:   recap some fundamental programming concepts, including the execution model of a program, abstractions over code and data, primitive and composite data types.  appreciate the importance of maintaining abstraction barrier in software development  understand the differences between statically and dynamically typed languages  understand the concepts of object-oriented programming, including encapsulation, data hiding, fields and methods, constructors, mutators/accessors, classes and objects, and their purposes of introducing them as a method of programming.  know the purpose and usage of Java keywords  class ,  public ,  private ,  final ,  static ,  import ,  new  understand that Java is a type-safe language, in contrast to C  be familiar with Java variable and primitive types",
            "title": "Learning Objectives"
        },
        {
            "location": "/lec01/index.html#what-exactly-is-a-program",
            "text": "A program is a set of instructions we issue to computers to manipulate data.  A programming language is a formal language that helps programmers specify precisely what are the instructions we issue to computers, using code that are often made up of keywords, symbols, and names.  Computers execute the instructions in their  processing units , and store the instructions and data in their  memory 1 .  The processing units recognize the instructions based on the specific patterns of bits and manipulate data as a sequence of bits.  A programming language, however, is written at a higher level of  abstraction  (i.e., at a higher conceptual level), so that as a programmer, we only need to write a few lines of code to give complex instructions to the computer.  A  compiler  or  interpreter  is responsible for translating these programs written in high level language to  assembly code  or  machine code , i.e., bit patterns that the processing units can understand.  There are thousands of programming languages in existence.   C  is one of the languages that is a  low-level language  -- i.e., it provides a very thin layer of abstractions on top of machine code.  On the other hand, languages such as  Python  and  JavaScript  are high-level languages.  As an example, in C, you can directly manage memory allocation.  In JavaScript and Python, you cannot.",
            "title": "What Exactly is a Program?"
        },
        {
            "location": "/lec01/index.html#abstraction-variable-and-type",
            "text": "One of the important abstractions that is provided by a programming language is  variable .  Data are stored in some location in the computer memory.  But we should not be referring to the memory location all the time.  First, referring to something like  0xFA49130E  is not user-friendly; Second, the location may change.  A  variable  is an abstraction that allows us to give a user-friendly name to a piece of data in memory.  We use the  variable name  whenever we want to access the  value  in that location, and  pointer to the variable  or  reference to the variable  whenever we want to refer to the address of the location.  Let's think a bit more about how a sequence of bits is abstracted as data in a programming language.  At the machine level, these bits are just, well, bits.  We give the bits a  semantic  at the program level, e.g., we want to interpret the sequence of bits as numbers, letters, etc.  E.g., the number (integer, to be exact)  65  and the letter  A  all share the same sequence of bits  0100 0001  but are interpreted differently and possibly manipulated differently.    The  type  of a variable tells the compiler or the interpreter how to interpret the variable and how to manipulate the variable.    For instance, supposed that in Python, if you have two variables  x  and  y  storing the values  4  and  5  respectively, if you  print x + y , you would get  45  if  x  and  y  are strings; you would get  9  if  x  and  y  are integers; you would get an error if  4  is an integer and  5  is a string.    In the last instance above, you see that assigning a type to each variable helps to keep the program meaningful, as the operation  +  is not defined over an integer and a string in Python 2 .  Python is a  dynamically typed  language.  The same variable can hold values of different types, and checking if the right type is used is done during the execution of the program.  Note that, the type is associated with the  values , and the type of the variable changes depending on the value it holds.  C, on the other hand, is a  statically typed  language.  We need to  declare  every variable we use in the program and specify its type.  A variable can only hold values of the same type as the type of the variable, so we can't assign, for instance, a string to a variable of type  int .  We check if the right type is used during the compilation of the program.  1\n2 int   x   =   4 ;   // ok  int   y   =   \"5\" ;   // error    By annotating each variable with its type, the C compiler also knows how much memory space is needed to store a variable.",
            "title": "Abstraction: Variable and Type"
        },
        {
            "location": "/lec01/index.html#abstraction-functions",
            "text": "Another important abstraction provided by a programming language is  function  (or  procedure ).  This abstraction allows programmers to group a set of instructions and give it a name.  The named set of instructions may take one or more variables as input parameters, and return one or more values.     Like all other abstractions, defining functions allow us to think at a higher conceptual level.  By composing functions at increasingly higher level of abstractions, we can build programs with increasing level of complexity.  Defining functions allow us to abstract away the implementation details from the caller.  Once a function is defined, we can change the way the function is implemented without affecting the code that calls the function, as long as the semantic and the  interface  of the function remains the same.  Function therefore is a critical mechanism for achieving  separation of concerns  in a program.  We separate the concerns about how a particular function is implemented, from the concerns about how the function is used to perform a higher-level task.  Defining functions also allow us to  reuse  code.  We do not have to repeatedly write the same chunk of code if we group the sequence of code into a function -- then we just need to call the function to invoke this sequence of code every time we need it.  If this chunk of code is properly written and debugged, then we can be pretty sure that everywhere the function is invoked, the code is correct 3 .  C is a  procedural language .  A C program consists of functions, with the  main()  function serves as the entry point to the program.  Since C is a statically typed language, a C function has a return type, and each  function parameter (or  argument ) has a type as well.  (Note that this statement does not mean that a C function must return a  value .  If the function does not return a value, we define its return type as  void .)  Recall that the bits representing the instructions are also stored in the computer memory in an area separated from the data.  The instructions that belong to the same function are stored in adjacent memory locations.  Just like we can refer to a variable using its memory address through its  reference  (or  pointer ), we can refer to a function using the memory address of the entry point to the function.",
            "title": "Abstraction: Functions"
        },
        {
            "location": "/lec01/index.html#abstraction-composite-data-type",
            "text": "Just like functions allow programmers to group instructions, give it a name, and refer to it later, a  composite data type  allows programers to group  primitive types  together, give it a name (a new type), and refer to it later.  This is another powerful abstraction in programming languages that help us to think at a higher conceptual level without worrying about the details.   Commonly used examples are mathematical objects such as complex numbers, 2D data points, multi-dimensional vectors, circles, etc, or everyday objects such as a person, a product, etc.  Defining composite data type allows programmers to abstract away (and be separated from the concern of) how a complex data type is represented.  For instance, a circle on a 2D plane can be represented by the center ( x ,  y ) and its radius  r , or it can be represented by the top left corner ( x , y ) and the width  w  of the bounding square.  In C, we build composite data type with  struct .  For example,  1\n2\n3\n4 struct   circle   { \n   float   x ,   y ;   // (x,y) coordinate of the center. \n   float   r ;   // radius  }    Once we have the  struct  defined, we are not completely shielded from its representation, until we write a set of functions that operates on the  circle  composite type.  For instance,  1\n2\n3 float   circle_area ( circle   c )   {   ...   };  bool    circle_contains_point ( circle   c ,   point   p )   {   ...   }; \n   :    Implementing these functions obviously requires the knowledge of how a circle is represented.  Once the set of functions that operates on and manipulates circles is available, we can use  circle  type without worrying about the internal representation.    If we decide to change the representation of a circle, then only the set of functions that operates on a circle type need to be changed, but not the code that uses circles to do other things.  We can imagine an  abstraction barrier  between the code that uses a composite data type along with its associated set of functions, and the code that define the data type along with the implementation of the functions.  Above the barrier, the concern is about using the composite data type to do useful things, while below the barrier, the concern is about how to represent and manipulate the composite data type.  While many of you are used to writing a program solo, in practice, you rarely write a program with contributions from a single person.  The abstraction barrier separates the role of the programmer into two: (i) an  implementer , which define that data type and provide the implementation, and (ii) a  client , which uses the composite data type to perform a higher level task 4 .  Part of my aim in CS2030 is to switch your mindset into thinking in terms of these two roles.  Note that the implementer and the client may very well be the same programmer.",
            "title": "Abstraction: Composite Data type"
        },
        {
            "location": "/lec01/index.html#abstraction-class-and-object-or-encapsulation",
            "text": "We can further bundle the composite data type and its associated functions together in another abstraction, called a  class .  A class is a data type with a group of functions associated with it.  We call the functions as  methods  and the data in the class as  fields  (or  members , or  states , or  attributes 4 ).   A well-designed class maintains the abstraction barrier, properly wraps the barrier around the internal representation and implementation, and exposes just the right  interface  for others to use.  Just like we can create variables of a given type, we can create  objects  of a given class.  Objects are  instances  of a class, each allowing the same methods to be called, and each containing the same set of variables of the same types, but (possibly) storing different values.  Recall that programs written in a procedural language such as a C consists of functions, with a  main()  function as the entry point.  A program written in an  object-oriented language  such as Java consists of classes, with one main class as the entry point.  One can view a running object-oriented (or OO) program as something that instantiates objects of different classes and orchestrates their interactions with each other by calling each others' methods.  One could argue that an object-oriented way of writing programs is much more natural, as it mirrors our world more closely.  If we look around us, we see objects all around us, and each object has certain properties, exhibit certain behavior, and they allow certain actions.  We interact with the objects through their interfaces, and we rarely need to know the internals of the objects we used everyday (unless we try to repair it) 5 .    The concept of keeping all the data and functions operating on the data related to a composite data type together within an abstraction barrier, is called  encapsulation .",
            "title": "Abstraction: Class and Object (or, Encapsulation)"
        },
        {
            "location": "/lec01/index.html#breaking-the-abstraction-barrier",
            "text": "In the ideal case, the code above the abstraction barrier would just call the provided interface to use the composite data type.  There, however, may be cases where a programmer may intentionally or accidentally break the abstraction barrier.    Consider the case of implementing  circle  as a C  struct .  Suppose someone wants to move the center of the circle  c  to a new position ( x ,  y ), instead of implementing a function  circle_move_to(c, x, y)  (which would still keep the representation used under the barrier), the person wrote:  1\n2 c . x   =   x ;  c . y   =   y ;    This code would still be correct, but the abstraction barrier is broken since we now make explicit assumption that there are two variables  x  and  y  inside the  circle  data type that correspond to the center of the circle.  If one day, we want to represent a circle differently, then we have to carefully change all the code that read and write these variables  x  and  y  and update them.   Breaking Python's Abstraction Barrier  Python tries to prevent  accidental  access to internal representation by having a convention of prefixing the internal variables with  _  (one underscore) or  __  (two underscores).   This method, however, does not prevent a lazy programmer from directly accessing the variables and possibly planting a bug / error that will surface later.",
            "title": "Breaking the Abstraction Barrier"
        },
        {
            "location": "/lec01/index.html#data-hiding",
            "text": "Many OO languages allow programmers to explicitly specify if a field or a method can be accessed from outside the abstraction barrier.  Java, for instance, support  private  and  public  access modifiers 5 .  A field or a method that is declared as  private  cannot be accessed from outside the class, and can only be accessed within the class.  On the other hand, as you can guess, a  public  field or method can be accessed, modified, or invoked from outside the class.  Such mechanism to protect the abstraction barrier from being broken is called  data hiding  or  information hiding .  This protection is enforced in the  compiler  during compile time.",
            "title": "Data Hiding"
        },
        {
            "location": "/lec01/index.html#example-the-circle-class",
            "text": "Let's put together the concepts of encapsulation and data hiding to define a  Circle  class in Java:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 /**   * A Circle object encapsulates a circle on a 2D plane.     */  class   Circle   { \n   private   double   x ;    // x-coordinate of the center \n   private   double   y ;    // y-coordinate of the center \n   private   double   r ;    // the length of the radius \n\n   /**     * Return the area of the circle.     */ \n   public   double   getArea ()   { \n     return   3.1415926   *   r   *   r ; \n   } \n\n   /**     * Move the center of the circle to the new position (newX, newY)     */ \n   public   void   moveTo ( double   newX ,   double   newY )   { \n     x   =   newX ; \n     y   =   newY ; \n   }  }    Here, we define  x ,  y , and  r  as three private fields inside the class  Circle .  Note that these fields are not accessible and modifiable outside of the class  Circle , but they can be accessed and modified within  Circle  (inside the abstraction barrier), such as in the methods  getArea  and  moveTo .",
            "title": "Example: The Circle class"
        },
        {
            "location": "/lec01/index.html#constructors-accessors-and-mutators",
            "text": "With data hiding, we completely isolate the internal representation of a class using an abstraction barrier.  With no way for the user of the class to modify the fields directly, it is common for a class to provide methods to initialize and modify these internal fields (such as the  moveTo()  method above).  A method that initializes an object is called a  constructor , and a method that retrieves or modifies the properties of the object is called the  accessor  (or  getter ) or  mutator  (or  setter ).  A constructor method is a special method within the class.  It cannot be called directly, but is invoked automatically when an object is instantiated.   In Java, a constructor method  has the same name as the class  and  has no return type .  A constructor can take in arguments just like other functions.  The class  Circle  can have a constructor such as the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 class   Circle   { \n     : \n   /**     * Create a circle centered on (centerX, centerY) with given radius    */ \n   public   Circle ( double   centerX ,   double   centerY ,   double   radius )   { \n     x   =   centerX ; \n     y   =   centerY ; \n     r   =   radius ; \n   } \n     :  }    The use of accessor and mutator methods is a bit controversial.   Suppose that we provide an accessor method and a mutator method for every private field, then we are actually exposing the internal representation, therefore breaking the encapsulation.  For instance:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28 class   Circle   { \n     : \n\n   public   double   getX ()   { \n     return   x ; \n   } \n\n   public   void   setX ( double   newX )   { \n     x   =   newX ; \n   } \n\n   public   double   getY ()   { \n     return   y ; \n   } \n\n   public   void   setY ( double   newY )   { \n     y   =   newY : \n   } \n\n   public   double   getR ()   { \n     return   r ; \n   } \n\n   public   void   setR ( double   newR )   { \n     r   =   newR ; \n   } \n     :  }    The examples above are pretty pointless.  If we need to know the internal and do something with it, we are doing it wrong.  The right approach is to implement a method within the class that do whatever we want the class to do.   For instance, suppose that we want to know the circumference of the circle  c , one approach would be:  1     double   circumference   =   2 * c . getR ()* 3.1415926 ;    where  c  is a  Circle  object.  A better approach would be to add a new method  getCircumference()  in the  Circle  class, and call it instead: 1     double   circumference   =   c . getCircumference ();    The better approach involves writing a few more lines of code to implement the method, but it keeps the encapsulation intact.  If one fine day, the implementer of  Circle  decided to store the diameter of the circle instead of the radius, then only the implementer needs to change the implementation of  getCircumference .  The client does not have to change anything.     Constructor in Python and JavaScript  In Python, the constructor is the  __init__  method.   In JavaScript, the constructor is simply called  constructor .",
            "title": "Constructors, Accessors, and Mutators"
        },
        {
            "location": "/lec01/index.html#class-fields-and-methods",
            "text": "Let's look at the implementation of  getArea()  above.  We use the constant  \\(\\pi\\)  but hardcoded it as 3.1415926.  Hardcoding such a magic number is a  no no  in terms of coding style.  This constant can appear in more than one places. If we hardcode such a number and want to change its precision later, we would need to trace down and change every occurrence.  Every time we need to use  \\(\\pi\\) , we have to remember or lookup what is the precision that we use.  Not only does this practice introduce more work, it is also likely to introduce bugs.    In C, we define  \\(\\pi\\)  as a macro constant  M_PI .  But how should we do this in Java?  This is where the ideal that a program consists of only objects with internal states that communicate with each other feel a bit constraining.  The constant  \\(\\pi\\)  is universal, and does not really belong to any object (the value of  \\(\\pi\\)  is the same for every circle!).  Another example: if we define a method  sqrt()  that computes the square root of a given number, this is a general function that is not associated with any object as well.  A solution to this is to associate these  global  values and functions with a  class  instead of with an  object .  For instance. Java predefines a  Math  class 6  that is populated with constants  PI  and  E  (for Euler's number  \\(e\\) ), along with a long list of mathematical functions.  To associate a method or a field with a class in Java, we declare them with the  static  keyword.  We can additionally add a keyword  final  to indicate that the value of the field will not change 7 .  1\n2\n3\n4\n5\n6 class   Math   { \n   : \n   public   static   final   double   PI   =   3.141592653589793 ; \n   : \n   :  }    We call these fields and methods that are associated with a class as  class fields  and  class methods , and fields and methods that are associated with an object as  instance fields  and  instance methods .   Class Fields and Methods in Python  Note that, in Python, any variable declared within a  class  block is a class field: 1\n2\n3 class   Circle : \n   x   =   0 \n   y   =   0   \nIn the above example,  x  and  y  are class fields, not instance fields.",
            "title": "Class Fields and Methods"
        },
        {
            "location": "/lec01/index.html#example-the-circle-class_1",
            "text": "Now, let revise our  Circle  class to improve the code and make it a little more complete:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49 import   java.lang.Math ;  /**   * A Circle object encapsulates a circle on a 2D plane.     */  class   Circle   { \n   private   double   x ;    // x-coordinate of the center \n   private   double   y ;    // y-coordinate of the center \n   private   double   r ;    // the length of the radius \n\n   /**     * Create a circle centered on (centerX, centerY) with given radius    */ \n   public   Circle ( double   centerX ,   double   centerY ,   double   radius )   { \n     x   =   centerX ; \n     y   =   centerY ; \n     r   =   radius ; \n   } \n\n   /**     * Return the area of the circle.     */ \n   public   double   getArea ()   { \n     return   Math . PI * r * r ; \n   } \n\n   /**     * Return the circumference of the circle.     */ \n   public   double   getCircumference ()   { \n     return   Math . PI * 2 * r ; \n   } \n\n   /**     * Move the center of the circle to the new position (newX, newY)     */ \n   public   void   moveTo ( double   newX ,   double   newY )   { \n     x   =   newX ; \n     y   =   newY ; \n   } \n\n   /**     * Return true if the given point (testX, testY) is within the circle.     */ \n   public   boolean   contains ( double   testX ,   double   testY )   { \n     return   false ; \n     // TODO: left as an exercise   \n   }  }",
            "title": "Example: The Circle class"
        },
        {
            "location": "/lec01/index.html#creating-and-interacting-with-circle-objects",
            "text": "To use the  Circle  class, we can either:   create a  main()  function, compile and link with the  Circle  class, and create an executable program, just like we usually do with a C program, OR  use  jshell , which is part of Java 9 (but not earlier versions).  jshell  provides a  read-evaluate-print loop  (REPL) to help us quickly try out various features of Java.   We will write a complete Java program with  main()  later in this class, but for now, we will use  jshell  to demonstrate the various language features of Java 7 .  The demonstration below loads the  Circle  class written above (with the  contains  method completed) from a file named  Circle.java 8 , and creates two  Circle  objects,  c1  and  c2 .  We use the  new  keyword to tell Java to create an object of type  Circle  here, passing in the center and the radius.  1 Circle   c1   =   new   Circle ( 0 ,   0 ,   100 );",
            "title": "Creating and Interacting with Circle objects"
        },
        {
            "location": "/lec01/index.html#reference-type-vs-primitive-type",
            "text": "The variable  c1  actually stores an abstraction over a  reference  to the Circle object, instead of the object itself. All objects are stored as references in Java .  The other variable type supported in Java is  primitive  type.  A variable of primitive type stores the  value  instead of a reference to the value.\nJava supports eight  primitive  data types:  byte ,  short ,  int ,  long ,  float ,  double ,  boolean  and  char .  If you are familiar with C, these data types should not be foreign to you.  One important difference is that a  char  variable stores a 16-bit Unicode character, not an 8-bit character like in C.  Java uses  byte  for that.  The other notable difference is that Java defines  true  and  false  as possible value to a  boolean , unlike C which uses  0  for false and non- 0  for true.    You can read all about Java  variables  and  primitive data types  in Oracle's Java Tutorial.",
            "title": "Reference Type vs. Primitive Type"
        },
        {
            "location": "/lec01/index.html#type-safety",
            "text": "Some languages are stricter in terms of type \"compatibility\" than others.  C compilers, however, are not very strict.  If it detects something strange with the type you used, it will issue a warning, but still let your code compiles and run.  Take:  1\n2\n3\n4\n5 #include   <stdio.h>  int   main ()  { \n     printf ( \"%d \\n \" ,   \"cs2030\" );  }    In Line 4, we treat the address to a string as integer.  This generates a compiler's warning.  In C, you can  type cast  a variable from one type into another, i.e., force the compiler to treat a variable of one type as another type.  The compiler would listen and do that for you.  The following code would print out gibberish and would compile perfectly without error.  1\n2\n3\n4\n5 #include   <stdio.h>  int   main ()  { \n     printf ( \"%d \\n \" ,   ( int ) \"cs2030\" );  }    Such flexibility and loose rules for type compatibility could be useful, if you know what you are doing, but for most programmers, it could be a major source of unintentional bugs, especially if one does not pay attention to compiler's warning or one forces the warning to go away without fully understanding what is going on.  Java is very strict when it comes to type checking, and is one of the  type-safe  languages. Java ensures that basic operations (such as  + ,  - , etc) and method calls apply to values in a way that makes sense.  If you try to pull the same trick as above, you will receive an error:",
            "title": "Type Safety"
        },
        {
            "location": "/lec01/index.html#exercise",
            "text": "In the example above, we implemented a class  Circle .  There, we store and pass around two  double  variables that corresponds to the x-coordinate and y-coordinate of a point.  The code would be neater if we create a second class  Point  that encapsulates the concept of a point on 2D plane and the operations on points.  Implement a new class  Point  and modify the class  Circle  to use the class  Point .  Pay attention to what methods and fields (if any) you expose as  public  outside of the abstraction barrier of a  Point  object.  You will need to use  jshell  from Java 1.9 (or JDK 9) to interact with your new classes.    Use  jshell  to try out the following.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 class   A   { \n     public   static   int   x   =   1 ; \n     public   int   y   =   5 ; \n\n     void   incrX ()   { \n         x   =   x   +   1 ; \n     } \n\n     void   incrY ()   { \n         y   =   y   +   1 ; \n     }  }  A   a1   =   new   A ();  A   a2   =   new   A ();    After executing  a1.x = 10 , what is the value of  a2.x ?  After executing  a1.y = 10 , what is the value of  a2.y ?  Is  A.x = 3  a valid statement?  Is  A.y = 3  a valid statement?    Note: Even though  a1.x  is valid, it is considered a bad programming practice to access a class field through an instance variable (e.g.,  a1.x ).  The proper way to do it is to use the class name  A.x ).    Consider the following two classes:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 class   A   { \n     private   int   x ; \n   public   void   changeSelf ()   { \n     x   =   1 ; \n   } \n   public   void   changeAnother ( A   a )   { \n     a . x   =   1 ; \n   }  }  class   B   { \n     public   void   changeAnother ( A   a )   { \n         a . x   =   1 ; \n     }  }    Which line(s) above violate the  private  access modifier of  x ?        Often, the instructions and data are stored in different regions of the memory.\u00a0 \u21a9    Javascript would happily convert  4  into a string for you, and return  45 .\u00a0 \u21a9    assuming the parameters are passed in correctly.\u00a0 \u21a9    Computer scientists just can't decide on what to call this!\u00a0 \u21a9 \u21a9    Others include  protected  and the  default  modifier.  For beginners, it is better that we explicitly specify something as  private  or  public .\u00a0 \u21a9 \u21a9    The class  Math  is provided by the package  java.lang  in Java.  A package is simply a set of related classes (and interfaces, but I have not told you what is an interface yet).  To use this class, we need to add the line  import   java.lang.Math  in the beginning of our program.\u00a0 \u21a9    You can download and install  jshell  yourself, as part of  Java Development Kit version 9 (JDK 9) \u00a0 \u21a9 \u21a9    We use the convention of one public class per file, name the file with the exact name of the class (including capitalization), and include the extension  .java  to the filename.\u00a0 \u21a9",
            "title": "Exercise"
        },
        {
            "location": "/style/index.html",
            "text": "CS2030 Java Style Guide\n\n\nWhy Coding Style is Important\n\n\nOne of the goals of CS2030 is to move you away from the mindset that you are writing code that you will discard after it is done (e.g., in CS1010 labs) and you are writing code that noone else will read except you.  CS2030 prepares you to work in a software engineering teams in many ways, and one of the ways is to enforce a consistent coding style.\n\n\nIf everyone on the team follows the same style, the intend of the programmer can become clear (e.g., is this a class or a field?), the code is more readable and less bug prone (e.g., the \nApple \ngoto fail\n bug\n).  Empirical studies support this:\n\n\n\n\nQuote\n\n\n\"It is not merely a matter of aesthetics that programs should be written in a particular style. Rather there is a psychological basis for writing programs in a conventional manner: programmers have strong expectations that other programmers will follow these discourse rules. If the rules are violated, then the utility afforded by the expectations that programmers have built up over time is effectively nullified. The results from the experiments with novice and advanced student programmers and with professional programmers described in this paper provide clear support for these claims.\"\n\n\nElliot Soloway and Kate Ehrlich. \"Empirical studies of programming knowledge.\" IEEE Transactions on Software Engineering 5 (1984): 595-609.\n\n\n\n\nMany major companies enforce coding styles, and some have published them.  For CS2030, we base our (simplified) coding style on \nGoogle's Java Coding Style\n.  You should bookmark the link because you need to come back to it again and again.\n\n\nCS2030 Coding Style\n\n\n\n\n\n\nNo tab\n    Use only whitespace.  \n\n\nFor \nvim\n users, you can add the following line in your \n~/.vimrc\n file:\n\n1\nset expandtab\n\n\n\n\nSo that when you press \n it is expanded to whitespace.\n\n\nMost other source code editors have similar configuration.  \n\n\n\n\n\n\nExactly one blank line after import statements and exactly one top-level (i.e., non-nested) class.\n\n\n\n\n\n\nEach top-level class resides in a source file of its own.\n\n\n\n\n\n\nWhen a class has overladed methods (e.g., multiple constructors or methods of the same name), they appear sequentially with no other code in between.\n\n\n\n\n\n\nBraces are always used (even if the body is empty or contains a single statement}\n\n\n\n\n\n\nUse \"Egyptian brackets\": \n\n\n\n\nOpening brace have no line break before; but has line break after\n\n\nClosing brace has a line break before; and has a line break after (except when there is \nelse\n or comma following a closing brace.\n\n\n\n\nExample:\n\n1\n2\n3\n   \nif\n \n(\nx\n \n==\n \n0\n)\n \n{\n\n     \nx\n++;\n\n   \n}\n \n\n\n\n\n\nis good.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n   \nif\n \n(\nx\n \n==\n \n0\n)\n \n{\n \nx\n++;\n \n}\n\n   \nif\n \n(\nx\n \n==\n \n0\n)\n \n   \n{\n\n     \nx\n++;\n\n   \n}\n\n   \nif\n \n(\nx\n \n==\n \n0\n)\n \n   \n{\n\n     \nx\n++;\n \n}\n\n\n\n\n\n\n\nare not good.\n\n\n\n\n\n\nBlock indentation is exactly two spaces.\n\n\n1\n2\n3\n4\n5\n6\nif\n \n(\nx\n \n==\n \n0\n)\n \n{\n \n  \nx\n++;\n\n  \nfor\n \n(\ni\n \n=\n \n0\n;\n \ni\n \n<\n \nx\n;\n \ni\n++)\n \n{\n\n    \nx\n \n+=\n \ni\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nFor \nvim\n users, in \n~/.vimrc\n, add the following:\n\n1\n2\n3\n4\nset tabstop=2\nset shiftwidth=2\nset autoindent\nset smartindent\n\n\n\n\n\nTo help you with indentation.\n\n\nMost other source code editors have similar configuration.  \n\n\n\n\n\n\nEach statement is followed by a line break, no matter how short the statement is.\n\n\n1\n  \nx\n++;\n \ni\n++;\n\n\n\n\n\nis bad.\n\n1\n2\n  \nx\n++;\n \n  \ni\n++;\n\n\n\n\n\nis good.\n\n\n\n\n\n\nEach line is limited to 80 characters in length.  You can break a long\nline into multiple lines to enhance readability, this is called \nline wrapping\n.  When you do so, each continuation line is indented at least 4 spaces from the original line.\n\n\n1\nSystem\n.\nout\n.\nprintln\n(\n\"Daenerys of the House Targaryen, the First of Her Name, The Unburnt, Queen of the Andals, the Rhoynar and the First Men, Queen of Meereen, Khaleesi of the Great Grass Sea, Protector of the Realm, Lady Regnant of the Seven Kingdoms, Breaker of Chains and Mother of Dragon\"\n);\n\n\n\n\n\n\n\nis bad.\n\n\n1\n2\n3\n4\n5\nSystem\n.\nout\n.\nprintln\n(\n\"Daenerys of the House Targaryen, the First of\"\n \n+\n\n\n\" Her Name, The Unburnt, Queen of the Andals, the Rhoynar and the\"\n \n+\n\n\n\" First Men, Queen of Meereen, Khaleesi of the Great Grass Sea, P\"\n \n+\n\n\n\"rotector of the Realm, Lady Regnant of the Seven Kingdoms, Break\"\n \n+\n\n\n\"er of Chains and Mother of Dragon\"\n);\n\n\n\n\n\n\n\nis also bad.\n\n\n1\n2\n3\n4\n5\n6\nSystem\n.\nout\n.\nprintln\n(\n\"Daenerys of the House Targaryen,\"\n \n+\n \n    \n\"the First of Her Name, The Unburnt, Queen of the Andals,\"\n \n+\n\n    \n\"the Rhoynar and the First Men, Queen of Meereen,\"\n \n+\n\n    \n\"Khaleesi of the Great Grass Sea, Protector of the Realm,\"\n \n+\n\n    \n\"Lady Regnant of the Seven Kingdoms, Breaker of Chains and\"\n \n+\n\n    \n\"Mother of Dragon\"\n);\n\n\n\n\n\nis ok.\n\n\n\n\n\n\nThere should be a blank line between constructors, methods, nested classes and static initializers.  Blank lines can be used between fields to create logical groupings.\n\n\n\n\n\n\nWhite space should separate Java keywords from parenthesis and braces, and be added on both sides of binary operators (\n+\n, \n-\n, \n/\n, etc) as well as \n:\n in enhanced for.  Space should also appears before and after \n//\n comments\n\n\n1\n2\n3\n4\n5\n6\nif\n(\nx\n==\n0\n){\n \n  \nx\n++;\n//to make sure x is at least one.\n\n  \nfor\n(\ni\n=\n0\n;\ni\n<\nx\n;\ni\n++){\n\n    \nx\n+=\ni\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nis bad.\n\n\n1\n2\n3\n4\n5\n6\nif\n \n(\nx\n \n==\n \n0\n)\n \n{\n \n  \nx\n++;\n \n// to make sure x is at least one.\n\n  \nfor\n \n(\ni\n \n=\n \n0\n;\n \ni\n \n<\n \nx\n;\n \ni\n++)\n \n{\n\n    \nx\n \n+=\n \ni\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nis good.\n\n\n\n\n\n\nOne variable per declaration.  \n\n\n1\nint\n \nx\n,\n \ny\n;\n\n\n\n\n\n\n\nbad.\n\n\n1\n2\nint\n \nx\n;\n\n\nint\n \ny\n;\n\n\n\n\n\n\n\ngood!\n\n\n\n\n\n\nNo C-style array declaration\n\n\n1\nString\n \nargs\n[];\n\n\n\n\n\n\n\nnot good.\n\n\n1\nString\n[]\n \nargs\n;\n\n\n\n\n\n\n\ngood!\n\n\n\n\n\n\nSwitch statement always include a \ndefault\n case.\n\n\n\n\n\n\nOne annotation per line.  Always use \n@Override\n.\n\n\n1\n2\n3\n4\n@Override\n\n\npublic\n \nboolean\n \nequals\n(\nObject\n \no\n)\n \n{\n\n  \n:\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nIndent comments at the same level as the surrounding code.  For multiple comments, align \n*\n with the previous line.\n\n\n1\n2\n3\n4\n5\n6\n/*\n\n\n* Not a good style\n\n\n*/\n\n\n/*\n\n\n * Good style\n\n\n */\n\n\n\n\n\n\n\n\n\n\n\nClass modifier appears in the following order:\n\n\n1\npublic\n \nprotected\n \nprivate\n \nabstract\n \ndefault\n \nstatic\n \nfinal\n \ntransient\n \nvolatile\n \nsynchronized\n \nnative\n \nstrictfp\n\n\n\n\n\n\n\nExample:\n\n1\nstatic\n \npublic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n\n\n\n\n\nis bad.\n\n1\npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n\n\n\n\n\nis good!\n\n\n\n\n\n\nClass names are writte in UpperCamelCase, method names and field names in lowerCamelCase, constant names in ALL_CAPS_SNAKE_CASE.  Type parameters in single capital letter.\n\n\n\n\n\n\nCaught exceptions should not be ignored.\n\n\n\n\n\n\nStatic fields and methods must be accessed with class name.",
            "title": "Coding Style"
        },
        {
            "location": "/style/index.html#cs2030-java-style-guide",
            "text": "",
            "title": "CS2030 Java Style Guide"
        },
        {
            "location": "/style/index.html#why-coding-style-is-important",
            "text": "One of the goals of CS2030 is to move you away from the mindset that you are writing code that you will discard after it is done (e.g., in CS1010 labs) and you are writing code that noone else will read except you.  CS2030 prepares you to work in a software engineering teams in many ways, and one of the ways is to enforce a consistent coding style.  If everyone on the team follows the same style, the intend of the programmer can become clear (e.g., is this a class or a field?), the code is more readable and less bug prone (e.g., the  Apple  goto fail  bug ).  Empirical studies support this:   Quote  \"It is not merely a matter of aesthetics that programs should be written in a particular style. Rather there is a psychological basis for writing programs in a conventional manner: programmers have strong expectations that other programmers will follow these discourse rules. If the rules are violated, then the utility afforded by the expectations that programmers have built up over time is effectively nullified. The results from the experiments with novice and advanced student programmers and with professional programmers described in this paper provide clear support for these claims.\"  Elliot Soloway and Kate Ehrlich. \"Empirical studies of programming knowledge.\" IEEE Transactions on Software Engineering 5 (1984): 595-609.   Many major companies enforce coding styles, and some have published them.  For CS2030, we base our (simplified) coding style on  Google's Java Coding Style .  You should bookmark the link because you need to come back to it again and again.",
            "title": "Why Coding Style is Important"
        },
        {
            "location": "/style/index.html#cs2030-coding-style",
            "text": "No tab\n    Use only whitespace.    For  vim  users, you can add the following line in your  ~/.vimrc  file: 1 set expandtab  \nSo that when you press   it is expanded to whitespace.  Most other source code editors have similar configuration.      Exactly one blank line after import statements and exactly one top-level (i.e., non-nested) class.    Each top-level class resides in a source file of its own.    When a class has overladed methods (e.g., multiple constructors or methods of the same name), they appear sequentially with no other code in between.    Braces are always used (even if the body is empty or contains a single statement}    Use \"Egyptian brackets\":    Opening brace have no line break before; but has line break after  Closing brace has a line break before; and has a line break after (except when there is  else  or comma following a closing brace.   Example: 1\n2\n3     if   ( x   ==   0 )   { \n      x ++; \n    }     is good.  1\n2\n3\n4\n5\n6\n7\n8     if   ( x   ==   0 )   {   x ++;   } \n    if   ( x   ==   0 )  \n    { \n      x ++; \n    } \n    if   ( x   ==   0 )  \n    { \n      x ++;   }    are not good.    Block indentation is exactly two spaces.  1\n2\n3\n4\n5\n6 if   ( x   ==   0 )   {  \n   x ++; \n   for   ( i   =   0 ;   i   <   x ;   i ++)   { \n     x   +=   i ; \n   }  }    For  vim  users, in  ~/.vimrc , add the following: 1\n2\n3\n4 set tabstop=2\nset shiftwidth=2\nset autoindent\nset smartindent   To help you with indentation.  Most other source code editors have similar configuration.      Each statement is followed by a line break, no matter how short the statement is.  1    x ++;   i ++;   \nis bad. 1\n2    x ++;  \n   i ++;   \nis good.    Each line is limited to 80 characters in length.  You can break a long\nline into multiple lines to enhance readability, this is called  line wrapping .  When you do so, each continuation line is indented at least 4 spaces from the original line.  1 System . out . println ( \"Daenerys of the House Targaryen, the First of Her Name, The Unburnt, Queen of the Andals, the Rhoynar and the First Men, Queen of Meereen, Khaleesi of the Great Grass Sea, Protector of the Realm, Lady Regnant of the Seven Kingdoms, Breaker of Chains and Mother of Dragon\" );    is bad.  1\n2\n3\n4\n5 System . out . println ( \"Daenerys of the House Targaryen, the First of\"   +  \" Her Name, The Unburnt, Queen of the Andals, the Rhoynar and the\"   +  \" First Men, Queen of Meereen, Khaleesi of the Great Grass Sea, P\"   +  \"rotector of the Realm, Lady Regnant of the Seven Kingdoms, Break\"   +  \"er of Chains and Mother of Dragon\" );    is also bad.  1\n2\n3\n4\n5\n6 System . out . println ( \"Daenerys of the House Targaryen,\"   +  \n     \"the First of Her Name, The Unburnt, Queen of the Andals,\"   + \n     \"the Rhoynar and the First Men, Queen of Meereen,\"   + \n     \"Khaleesi of the Great Grass Sea, Protector of the Realm,\"   + \n     \"Lady Regnant of the Seven Kingdoms, Breaker of Chains and\"   + \n     \"Mother of Dragon\" );   \nis ok.    There should be a blank line between constructors, methods, nested classes and static initializers.  Blank lines can be used between fields to create logical groupings.    White space should separate Java keywords from parenthesis and braces, and be added on both sides of binary operators ( + ,  - ,  / , etc) as well as  :  in enhanced for.  Space should also appears before and after  //  comments  1\n2\n3\n4\n5\n6 if ( x == 0 ){  \n   x ++; //to make sure x is at least one. \n   for ( i = 0 ; i < x ; i ++){ \n     x += i ; \n   }  }    is bad.  1\n2\n3\n4\n5\n6 if   ( x   ==   0 )   {  \n   x ++;   // to make sure x is at least one. \n   for   ( i   =   0 ;   i   <   x ;   i ++)   { \n     x   +=   i ; \n   }  }    is good.    One variable per declaration.    1 int   x ,   y ;    bad.  1\n2 int   x ;  int   y ;    good!    No C-style array declaration  1 String   args [];    not good.  1 String []   args ;    good!    Switch statement always include a  default  case.    One annotation per line.  Always use  @Override .  1\n2\n3\n4 @Override  public   boolean   equals ( Object   o )   { \n   :  }      Indent comments at the same level as the surrounding code.  For multiple comments, align  *  with the previous line.  1\n2\n3\n4\n5\n6 /*  * Not a good style  */  /*   * Good style   */      Class modifier appears in the following order:  1 public   protected   private   abstract   default   static   final   transient   volatile   synchronized   native   strictfp    Example: 1 static   public   void   main ( String []   args )   \nis bad. 1 public   static   void   main ( String []   args )   \nis good!    Class names are writte in UpperCamelCase, method names and field names in lowerCamelCase, constant names in ALL_CAPS_SNAKE_CASE.  Type parameters in single capital letter.    Caught exceptions should not be ignored.    Static fields and methods must be accessed with class name.",
            "title": "CS2030 Coding Style"
        },
        {
            "location": "/jdk/index.html",
            "text": "Java: Install/Compile/Run\n\n\nJava Development Kit (JDK)\n\n\nThe Java Development Kit, or JDK, is a development environment for building Java applications.  The environment provides a virtual machine to execute compiled Java code (JVM), a collection of classes and libraries, and a set of tools to support development (including a compiler (\njavac\n), a debugger (\njdb\n), an interactive shell (\njshell\n)) etc.\n\n\nThere are several variations of JDK available.  For instance, \nOpenJDK\n is a free and open source version of JDK.  \nGNU\n offers a compiler in Java (\ngcj\n) and Java core libraries in Gnu classpath.\nEclipse offers its own version of Java compiler\n1\n.  These variations are mostly the same, but for the purpose of this module, we will use the \nofficial Oracle version\n.\n\n\nThere are different editions of Java.  The main ones are Java SE (standard edition), Java EE (enterprise edition), and Java ME (micro edition).  We will be using \nJava SE\n.\n\n\nThe latest version of Java SE is Java 9.0.1.\nJava 8 is the earliest version of Java that will work with this module, as many concepts we will cover are only introduced in Java 8.\n\nTo use \njshell\n, however, you need Java 9.\n\n\nInstalling JDK or Java SE 9\n\n\nYou can \ndownload the latest version of Java SE 9\n from Oracle and follow its \ninstallation instructions\n.\n\n\nCompiling\n\n\nNow that you've installed Java on your machine, here's an example of how you can compile and run some Java code.\n\n\nJava source files\n\n\nCreate a new Java source file and put it in a new folder (e.g. \nCS2030\n).\n\n\n1\n2\n3\n4\n5\nclass\n \nHelloWorld\n \n{\n\n  \npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"Hello, world!\"\n);\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nBy convention, the file should be named \nHelloWorld.java\n, following the \nUpperCamelCase\n name of the class. At this point, our \nCS2030\n folder only contains that one file.\n\n\n1\n2\nCS2030 $ ls\nHelloWorld.java\n\n\n\n\n\n\nJava class files\n\n\nWe can go ahead and compile our Java program by running the \njavac HelloWorld.java\n command. This creates the corresponding Java class file, \nHelloWorld.class\n.\n\n\n1\n2\n3\nCS2030 $ javac HelloWorld.java\nCS2030 $ ls\nHelloWorld.class HelloWorld.java\n\n\n\n\n\n\nWe can now execute it with \njava HelloWorld\n. Remember to omit the \n.class\n extension when doing this!\n\n\n1\n2\n3\nCS2030 $ javac HelloWorld.java\nCS2030 $ java HelloWorld\nHello, world!\n\n\n\n\n\n\nSuccess! \ud83c\udf89\n\n\n\n\nWhat actually happens under the hood? Is Java an interpreted or compiled language?\n\n\nThis can get a little mind-boggling at first, but this \ndiagram\n summarizes it quite well.\n\n\n\n\n\n\n\n\n\n\n\n\nSee: \nWhat is the difference between javac and the Eclipse compiler?\n\u00a0\n\u21a9",
            "title": "Java"
        },
        {
            "location": "/jdk/index.html#java-installcompilerun",
            "text": "",
            "title": "Java: Install/Compile/Run"
        },
        {
            "location": "/jdk/index.html#java-development-kit-jdk",
            "text": "The Java Development Kit, or JDK, is a development environment for building Java applications.  The environment provides a virtual machine to execute compiled Java code (JVM), a collection of classes and libraries, and a set of tools to support development (including a compiler ( javac ), a debugger ( jdb ), an interactive shell ( jshell )) etc.  There are several variations of JDK available.  For instance,  OpenJDK  is a free and open source version of JDK.   GNU  offers a compiler in Java ( gcj ) and Java core libraries in Gnu classpath.\nEclipse offers its own version of Java compiler 1 .  These variations are mostly the same, but for the purpose of this module, we will use the  official Oracle version .  There are different editions of Java.  The main ones are Java SE (standard edition), Java EE (enterprise edition), and Java ME (micro edition).  We will be using  Java SE .  The latest version of Java SE is Java 9.0.1.\nJava 8 is the earliest version of Java that will work with this module, as many concepts we will cover are only introduced in Java 8. \nTo use  jshell , however, you need Java 9.",
            "title": "Java Development Kit (JDK)"
        },
        {
            "location": "/jdk/index.html#installing-jdk-or-java-se-9",
            "text": "You can  download the latest version of Java SE 9  from Oracle and follow its  installation instructions .",
            "title": "Installing JDK or Java SE 9"
        },
        {
            "location": "/jdk/index.html#compiling",
            "text": "Now that you've installed Java on your machine, here's an example of how you can compile and run some Java code.",
            "title": "Compiling"
        },
        {
            "location": "/jdk/index.html#java-source-files",
            "text": "Create a new Java source file and put it in a new folder (e.g.  CS2030 ).  1\n2\n3\n4\n5 class   HelloWorld   { \n   public   static   void   main ( String []   args )   { \n     System . out . println ( \"Hello, world!\" ); \n   }  }    By convention, the file should be named  HelloWorld.java , following the  UpperCamelCase  name of the class. At this point, our  CS2030  folder only contains that one file.  1\n2 CS2030 $ ls\nHelloWorld.java",
            "title": "Java source files"
        },
        {
            "location": "/jdk/index.html#java-class-files",
            "text": "We can go ahead and compile our Java program by running the  javac HelloWorld.java  command. This creates the corresponding Java class file,  HelloWorld.class .  1\n2\n3 CS2030 $ javac HelloWorld.java\nCS2030 $ ls\nHelloWorld.class HelloWorld.java   We can now execute it with  java HelloWorld . Remember to omit the  .class  extension when doing this!  1\n2\n3 CS2030 $ javac HelloWorld.java\nCS2030 $ java HelloWorld\nHello, world!   Success! \ud83c\udf89   What actually happens under the hood? Is Java an interpreted or compiled language?  This can get a little mind-boggling at first, but this  diagram  summarizes it quite well.       See:  What is the difference between javac and the Eclipse compiler? \u00a0 \u21a9",
            "title": "Java class files"
        },
        {
            "location": "/javadoc/index.html",
            "text": "Javadoc\n\n\nWhy is documentation important\n\n\nOne of the goals of CS2030 is to move you away from the mindset that you are writing code that you will discard after it is done (e.g., in CS1010 labs) and you are writing code that noone else will read except you.  CS2030 prepares you to work in a software engineering teams in many ways, and one of the ways is to get you to document your code.\n\n\njavadoc\n is a tool used to document Java code.  It automatically generates HTML documentation from the comments in your code.  The \nJava SE 8 API\n that you have seen are generated from \njavadoc\n.\n\n\nHow to comment for javadoc\n\n\njavadoc\n distinguishes between normal comments and comments meant for \njavadoc\n by how we \"fence\" the comments.  A \njavadoc\n comments always starts with \n/**\n (not the double asterisks) and ends with \n*/\n and are always placed \nimmediately\n before a class, an interface, a constructor, a method, or field declaration.\n\n\nExample:\n\n1\n2\n3\n4\n5\n/** \n\n\n * Encapsulates a circle on a 2D plane.  The `Circle` class supports operators \n\n\n * supported includes (i) checking if a point is contained in the circle,\n\n\n * and (ii) moving the circle around to a new position.\n\n\n */\n\n\n\n\n\n\nThe first sentence is the summary sentence.  We should follow some style guideline when writing the summary sentence (see below).\n\n\njavadoc\n comments supports HTML tags.  If you are not familiar with HTML, \nthat is fine.  We will tell you what you need to know below.\n\n\nTags\n\n\njavadoc\n supports tags.  Here are some tags that we would like you to use:\n\n\n\n\n@param <name> <description>\n: describe the parameter \n\n\n@return <description>\n describe the return value\n\n\n@throws <class name> <description>\n describe what the exception \n being thrown and what are the possible reasons\n\n\n\n\nSee Lab 1 and Lab 2 skeleton code for samples.\n\n\nStyle\n\n\n\n\n\n\nIf you want to break you comments into paragraphs, insert one blank line between paragraphs.  Start a new paragraph with HTML tag \n<p>\n with no space after, and ends your paragraph with HTML tag \n</p>\n.\n\n\n\n\n\n\nYou should use the tags \n@param\n \n@return\n and \n@throws\n in that order, and they should never appear without a description.\n\n\n\n\n\n\nThe summary should be short and succint.  It is not a complete sentence, however, but should still be capitalized and ends with a period.  E.g., \n/** Encapsulates a circle on 2D plane. .. */\n\n\n\n\n\n\nYou don't get to write \njavadoc\n for self-explanatory, simple, obvious, methods.  e.g., \ngetX()\n, unless you want to explain what \nx\n means.  \n\n\n\n\n\n\nHow to generate javadoc\n\n\nIn its simplest form, you can generate \njavadoc\n like this:\n\n\n1\njavadoc *.java\n\n\n\n\n\n\nThis will generate the HTML files in your current directory.  \n\n\nTo avoid clutters, I recommend that you specify the output directory, e.g.,\n\n\n1\njavadoc *.java -d docs\n\n\n\n\n\n\nThis will generate the documentations and put it under the \ndocs\n subdirectory.\n\n\njavadoc\n by default generates documents only for public classes, fields, and methods.  To generate documentation for everything, run\n\n1\njavadoc *.java -d docs -private\n\n\n\n\n\nHow to view generate javadoc\n\n\nIf you generate the documentation on your computer, you can view it by opening up the file \nindex.html\n in your browser.\n\n\nIf you generate the documentation on \ncs2030-i.comp.nus.edu.sg\n, then, you can create under your \npublic_html\n directory (your home page, so to say).\n\n\n1\njavadoc -private -d ~/public_html/lab03 *.java\n\n\n\n\n\n\nYou can then view the documents on your computer through the URL\n\n\n1\nhttps://cs2030-i.comp.nus.edu.sg/~<username>/lab03\n\n\n\n\n\n\n(replace \n<username>\n with your username on \ncs2030-i\n.  The content is password protected and is only visible to you.  (If the website said that the certificate is invalid and website is not secure, please ignore the warning for now).\n\n\nSee Also\n\n\n\n\nOracle's \njavadoc\n Manual\n for a detailed \njavadoc\n guide",
            "title": "Javadoc"
        },
        {
            "location": "/javadoc/index.html#javadoc",
            "text": "",
            "title": "Javadoc"
        },
        {
            "location": "/javadoc/index.html#why-is-documentation-important",
            "text": "One of the goals of CS2030 is to move you away from the mindset that you are writing code that you will discard after it is done (e.g., in CS1010 labs) and you are writing code that noone else will read except you.  CS2030 prepares you to work in a software engineering teams in many ways, and one of the ways is to get you to document your code.  javadoc  is a tool used to document Java code.  It automatically generates HTML documentation from the comments in your code.  The  Java SE 8 API  that you have seen are generated from  javadoc .",
            "title": "Why is documentation important"
        },
        {
            "location": "/javadoc/index.html#how-to-comment-for-javadoc",
            "text": "javadoc  distinguishes between normal comments and comments meant for  javadoc  by how we \"fence\" the comments.  A  javadoc  comments always starts with  /**  (not the double asterisks) and ends with  */  and are always placed  immediately  before a class, an interface, a constructor, a method, or field declaration.  Example: 1\n2\n3\n4\n5 /**    * Encapsulates a circle on a 2D plane.  The `Circle` class supports operators    * supported includes (i) checking if a point is contained in the circle,   * and (ii) moving the circle around to a new position.   */    The first sentence is the summary sentence.  We should follow some style guideline when writing the summary sentence (see below).  javadoc  comments supports HTML tags.  If you are not familiar with HTML, \nthat is fine.  We will tell you what you need to know below.",
            "title": "How to comment for javadoc"
        },
        {
            "location": "/javadoc/index.html#tags",
            "text": "javadoc  supports tags.  Here are some tags that we would like you to use:   @param <name> <description> : describe the parameter   @return <description>  describe the return value  @throws <class name> <description>  describe what the exception   being thrown and what are the possible reasons   See Lab 1 and Lab 2 skeleton code for samples.",
            "title": "Tags"
        },
        {
            "location": "/javadoc/index.html#style",
            "text": "If you want to break you comments into paragraphs, insert one blank line between paragraphs.  Start a new paragraph with HTML tag  <p>  with no space after, and ends your paragraph with HTML tag  </p> .    You should use the tags  @param   @return  and  @throws  in that order, and they should never appear without a description.    The summary should be short and succint.  It is not a complete sentence, however, but should still be capitalized and ends with a period.  E.g.,  /** Encapsulates a circle on 2D plane. .. */    You don't get to write  javadoc  for self-explanatory, simple, obvious, methods.  e.g.,  getX() , unless you want to explain what  x  means.",
            "title": "Style"
        },
        {
            "location": "/javadoc/index.html#how-to-generate-javadoc",
            "text": "In its simplest form, you can generate  javadoc  like this:  1 javadoc *.java   This will generate the HTML files in your current directory.    To avoid clutters, I recommend that you specify the output directory, e.g.,  1 javadoc *.java -d docs   This will generate the documentations and put it under the  docs  subdirectory.  javadoc  by default generates documents only for public classes, fields, and methods.  To generate documentation for everything, run 1 javadoc *.java -d docs -private",
            "title": "How to generate javadoc"
        },
        {
            "location": "/javadoc/index.html#how-to-view-generate-javadoc",
            "text": "If you generate the documentation on your computer, you can view it by opening up the file  index.html  in your browser.  If you generate the documentation on  cs2030-i.comp.nus.edu.sg , then, you can create under your  public_html  directory (your home page, so to say).  1 javadoc -private -d ~/public_html/lab03 *.java   You can then view the documents on your computer through the URL  1 https://cs2030-i.comp.nus.edu.sg/~<username>/lab03   (replace  <username>  with your username on  cs2030-i .  The content is password protected and is only visible to you.  (If the website said that the certificate is invalid and website is not secure, please ignore the warning for now).",
            "title": "How to view generate javadoc"
        },
        {
            "location": "/javadoc/index.html#see-also",
            "text": "Oracle's  javadoc  Manual  for a detailed  javadoc  guide",
            "title": "See Also"
        },
        {
            "location": "/unix/index.html",
            "text": "Accessing CS2030 Lab Programming Environment\n\n\nThe Environment\n\n\nThe school has created a VM (virtual machine) for CS2030, with hostname \ncs2030-i.comp.nus.edu.sg\n.  The VM is running CentOS, one of the Linux distributions.\nThis will be the official programming environment for CS2030 for all your lab assignments.\n\n\nI have created your accounts on the VM based on your SoC UNIX account.  You can login with your SoC UNIX username (not your NUSNET username, unless you intentionally set the two to be the same) and password.\n\n\nSoC VPN\n\n\nTHe VM can only be accessed from within the School of Computing networks.  If you want to access it from outside, you need to setup a Virtual Private Network (VPN) (See \ninstruction here\n).  The staff at \nhelpdesk@comp.nus.edu.sg\n or the IT helpdesk in COM1, Level 1, will be able to help with you setting up if needed.\n\n\nSSH\n\n\nFor UNIX-based OS\n\n\nIf you use either macOS, Windows 10 (with bash on Ubuntu), or Linux, you should have the command line \nssh\n installed.  \n\n\nRun:\n\n1\nssh <username>@cs2030-i.comp.nus.edu.sg\n\n\n\n\n\nReplace \n<username>\n with your SoC UNIX username, for instance, I would do:\n\n1\nssh ooiwt@cs2030-i.comp.nus.edu.sg\n\n\n\n\n\nAfter the command above, following the instructions on screen.  The first time you ever connect to \ncs2030-i.comp.nus.edu.sg\n, you will be warned that you are connecting to a previously unknown host.  Said \nyes\n, and you will be prompted with your SoC UNIX password.\n\n\nFor Windows 7 or 8\n\n\nThe desktop computers in Programming Lab 6 (PL6) runs Windows 7.  If you are using these computers, or your own computers with older versions of Windows, you need to use \nXShell 5\n to access the VM.\n\n\nBasic UNIX Commands\n\n\nOnce you logged into the VM, you will be prompted to enter a command with a prompt that looks like this:\n\n1\nhappytan@cs2030-i:~[xxx]$\n\n\n\n\nThis interface is provided by a UNIX shell -- not unlike \njshell\n, this shell sits in a loop and wait for users to enter a command, then it interprets and executes the command.  There are many versions of shells, the default shell for our VM is \nbash\n1\n.\n\n\nThe following are adapted for CS2030 from \nthe instructions created by Aaron Tan\n. Bugs are mine.\n  \n\n\nThe power of UNIX stems from the many commands it offers. The following are a few commonly used commands. This list is by no means exhaustive and you are urged to explore on your own. Note that UNIX commands are case-sensitive.\n\n\nIn the examples below, bold words are commands which you are expected to enter. All commands are to be entered after the UNIX (local or \nsunfire\n or \ncs2030-i\n) prompt of the form\n\n\n1\nhappytan@cs2030-i:~[xxx]$\n\n\n\n\n\n\n~\n indicates that you are currently in your home directory, \nxxx\n is a number indicating the number of commands that have been entered.  The following examples assumes that user \nhappytan\n is logged into cs2030-i; however you can do it on your local UNIX platform too.\n\n\nIt might be good to understand the directory structure in UNIX, a multi-user system. The directory tree is shown below:\n\n\n\n\nEach user has his/her own home directory, which is where he/she will be automatically placed when he/she logs into the system. The above figure shows where the home directory of user \nhappytan\n resides in the directory tree. The user \nhappytan\n may create files or directories in his/her home directory, but not elsewhere unless permission is given.\n\n\nDirectory commands\n\n\n\n\n\n\npwd\n: Print current Working Directory to show you which directory you are currently in\n\n1\n2\nhappytan@cs2030-i:~[xxx]$ pwd\n/home/h/happytan\n\n\n\n\n\n\n\n\n\nls\n: LiSt files in your current directory\n\n1\n2\nhappytan@cs2030-i:~[xxx]$ ls\nhappytan@cs2030-i:~[xxx]$\n\n\n\n\n   If you do not have any regular files in your home directory, as you should when you first login, you should immediately return to the shell prompt.  \n\n\n\n\n\n\n\n\nRule of Silence\nUNIX follows the \nrule of silence\n: programs should not print unnecessary output, to allow other programs and users to easily parse the output from one program.  So, if \nls\n has nothing to list, it will list nothing (as oppose to, say, printing \"This is an empty directory.\")\n\n\n\n\n\n\n\n\n\n\nmkdir\n: MaKe a subDIRectory in current directory\n\n1\n2\n3\n4\n5\nhappytan@cs2030-i:~[xxx]$ mkdir lab01\nhappytan@cs2030-i:~[xxx]$ ls\nlab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nlab01/\n\n\n\n\nHere, you create a directory called \nlab01\n.  Now, when you \nls\n, you can see the directory listed.\nYou may also use \nls -F\n for more information (\n-F\n is one of the many \noptions\n/\nflags\n available for the \nls\n command. To see a complete list of the options, refer to the man pages, i.e., \nman ls\n.)\n\n\nThe slash \n/\n beside the filename tells you that the file is a directory (aka folder in Windows lingo). A normal file does not have a slash beside its name when \"ls -F\" is used.\n\n\nYou may also use the \nls -l\n command (hyphen el, not hyphen one) to display almost all the file information, include the size of the file and the date of modification.\n\n\n\n\n\n\n\n\nCommand history\n\n\nUNIX maintains a history of your previously executed UNIX commands, and you may use the up and down arrows to go through it. Press the up arrow until you find a previously executed UNIX command. You may then press Enter to execute it, or edit the command before executing it. This is handy when you need to repeatedly executed a long UNIX command.\n\n\n\n\n\n\n\n\ncd\n: Change Directory from current directory to another\n\n1\n2\nhappytan@cs2030-i:~[xxx]$ cd lab01\nhappytan@cs2030-i:~/lab01[xxx]$\n\n\n\n\nNote that the prompt changes to \n~/lab01\n to indicate that you are now in the \nlab01\n directory below your \nHOME\n directory.\n\n\nEntering \ncd\n alone brings you back to your \nHOME\n directory, i.e.,. the directory in which you started with when you first logged into the system.\n\n1\n2\nhappytan@cs2030-i:~/lab01[xxx]$ cd\nhappytan@cs2030-i:~[xxx]$\n\n\n\n\n\n\n\n\n\nrmdir\n:  to ReMove a subDIRectory in current directory -- note that a directory must be empty before it can be removed.\n\n1\n2\n3\n4\n5\nhappytan@cs2030-i:~[xxx]$ rmdir lab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nhappytan@cs2030-i:~[xxx]$ mkdir lab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nlab01/\n\n\n\n\n\n\n\n\n\nFile commands\n\n\n\n\ncp\n:  CoPy files\n\n1\n2\n3\nhappytan@cs2030-i:~/lab01[xxx]$ cp ~cs2030/lab01/Circle.java .\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nCircle.java\n\n\n\n\nThe command above copy the files Circle.java from the HOME of user \ncs2030\n, under directory \nlab01\n, to the current directory.\n\n\n\n\nIf you want to copy the whole directory, use \n-r\n flag, where \nr\n stands for recursive copy.\n\n\n1\nhappytan@cs2030-i:~/lab01[xxx]$ cp -r ~cs2030/lab01 .\n\n\n\n\n\n\nThe directory \nlab01\n and everything under it will be copied.\n\n\n\n\nmv\n: MoVe files from one directory to another; can also be used to rename files.\n\n1\n2\n3\nhappytan@cs2030-i:~/lab01[xxx]$ mv Circle.java Test.java\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nTest.java\n\n\n\n\n\n\n\n\n\nFilename completion\n\n\nIf you have a very long file name, you may use UNIX's filename completion feature to reduce typing. For instance, you may type:\n\n1\nhappytan@cs2030-i:~/lab01[xxx]$ mv C\n\n\n\n\nand press the tab key, and UNIX will complete the filename for you if there is only one filename with the prefix \"C\". Otherwise, it will fill up the filename up to point where you need to type in more characters for disambiguation.\n\n\n\n\n\n\nrm\n: ReMove files. Be careful with this command -- files deleted cannot be restored (unless they have been backed up during the normal backup cycle).\n\n1\n2\n3\n4\nhappytan@cs2030-i:~/lab01[xxx]$ rm Test.java\nrm: remove 'Test.java'? y\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nhappytan@cs2030-i:~/lab01[xxx]$\n\n\n\n\n\n\n\nCommand to display text files\n\n\n\n\ncat\n: to string together or display (CATenate) the contents of files onto the screen\n\n1\nhappytan@cs2030-i:~/lab01[xxx]$ cat Circle.java\n\n\n\n\n\nless\n - variant of \ncat\n (includes features to read each page leisurely)\n\n1\nhappytan@cs2030-i:~/lab01[xxx]$ less Circle.java\n\n\n\n\nIn \nless\n, use \n<space>\n to move down one page, \nb\n to move Back up one page, and \nq\n to Quit from \"less\".\n\n\n\n\nAn online help facility is available in UNIX via the \nman\n command (\nman\n stands for MANual). To look for more information about any UNIX command, for example, \nls\n, type \nman ls\n. Type \nman man\n and refer to Man Pages to find out more about the facility. To exit \nman\n, press \nq\n.\n\n\nNow that you are familiar with how the UNIX shell works, I won't show the command prompt any more in the rest of this article.\n\n\nUNIX File Permission\n\n\nIt is important to guide our files properly on a multi-user system where users share the same file system.  UNIX has a simple mechanism to for ensuring that: every file and directory has nine bits of access permission, corresponds to three access operations, read (\nr\n), write (\nw\n), and execute (\nx\n), for four classes of users, the user who owns of the file (\nu\n), users in the same group as the owner (\ng\n), all other users (\no\n), and all users (\na\n) (union of all three classes before)\n\n\nWhen you run \nls -l\n, you will see the permission encoded as strings that look like \n-rw-------\n or \ndrwx--x--x\n besides other file information.   \n\n\n\n\nThe first character indicates if the file is a directory (\nd\n) or not (\n-\n).  \n\n\nThe next three characters are the permission for the owner.  \nrwx\n means that the owner can do all three: reading, writing, and executing, \nrw-\n means that the owner can read and write, but cannot execute.\n\n\nThe next three characters are the permission for the users in the same group.\n\n\nThe last three characters are the permission for the users in the other groups.\n\n\n\n\nTo change permission, we use the \nchmod\n command.  Let's say that we want to remove the read and write permission from all other users in the group.  You can run:\n\n1\nchmod g-rw <file>\n\n\n\n\n\nwhere \n<file>\n is the name of the file whose permission you want to change.  This would change the permission from \n-rw-rw-rw-\n to \n-rw----rw-\n, or from \n-rwxr--r--\n to \n-rwx---r--\n.\n\n\nTo add executable permission to everyone, you can run:\n\n1\nchmod a+x <file>\n\n\n\n\n\nThis would change the permission from \n-rw-rw-rw-\n to \n-rwx--xrwx\n, or from \n-rwxr--r--\n to \n-rwx--xr-x\n, and so on.  You get the idea.\n\n\nAnother way to change the permission is set the permission directly, instead of adding with \n+\n and removing with \n-\n.  To do this, one convenient way is to treat the permission for each class of user as a 3-bit binary number between 0 to 7.  So, \nrwx\n is 7, \nrw-\n is 6, \n-w-\n is 2, \n---\n is 0, etc.  \n\n\nTo set the permission of a file to \n-r--r--r--\n (readable by everyone), run:\n\n1\nchmod 444 <file>\n\n\n\n\n\nTo set the permission to \n-rw-------\n, run:\n\n1\nchmod 600 <file>\n\n\n\n\n\nand so on.\n\n\nIt is important to ensure that your code is not readable and writable by other students, especially for graded lab exercises.\n\n\nSecure Copy (\nscp\n)\n\n\nSecure copy, or \nscp\n, is one way to transfer files from your local computer to \ncs2030-i\n.  If you choose not to use \nemacs\n or \nvim\n2\n and write your code on \ncs2030-i\n, you can write your code on your local computer, and transfer them.  Let's say that you are in the directory with a bunch of java files you want to transfer, and you want them transferred into directory \ntest\n that you have created, do the following:\n\n\n1\nscp *.java happytan@cs2030-i:~/test\n\n\n\n\n\n\n\n\nWarning\n\n\nIf you have files with the same name in the remote directory, the files will be overwritten without warning.  I have lost my code a few times due to \nscp\n.  \n\n\n\n\nThe expression \n*.java\n is a regular expression that means all files with filename ending with \n.java\n.  You can copy specific files as well.  For instance,\n\n\n1\nscp Circle.java Point.java happytan@cs2030-i:~/test\n\n\n\n\n\n\nscp\n supports \n-r\n (recursive copy) as well.\n\n\nSetting up SSH Keys\n\n\nOnce you are comfortable with UNIX, you can set up a pair of public/private keys for authentication.  \n\n\nYou can use\n\n1\nssh-keygen -t rsa\n\n\n\n\n\nto generate a pair of keys on your local computer.  Keep the private key \nid_rsa\n on your local machine in the hidden \n~/.ssh\n directory, and copy the public key \nid_rsa.pub\n to your home directory on VM \ncs2030-i\n.  On \ncs2030-i\n, run\n\n1\ncat id_rsa.pub >> ~/.ssh/authorized_keys\n\n\n\n\n\nMake sure that the permission for \n.ssh\n both on local machine and on VM is set to \n700\n and the files \nid_rsa\n on local machine and \nauthorized_keys\n on remote machine is set to \n600\n.  Once setup, you need not enter your password every time you run \nssh\n or \nscp\n.  \n\n\n\n\n\n\n\n\n\n\nI run \nfish\n on my macOS, as you might have noticed during the in-class demos.  You can use any shell you like, if you know what you are doing.  Otherwise, \nbash\n is a popular one.\u00a0\n\u21a9\n\n\n\n\n\n\nMy personal opinion is that, you should really master one of these two time-tested source code editor if you want a career in software development.\u00a0\n\u21a9",
            "title": "UNIX"
        },
        {
            "location": "/unix/index.html#accessing-cs2030-lab-programming-environment",
            "text": "",
            "title": "Accessing CS2030 Lab Programming Environment"
        },
        {
            "location": "/unix/index.html#the-environment",
            "text": "The school has created a VM (virtual machine) for CS2030, with hostname  cs2030-i.comp.nus.edu.sg .  The VM is running CentOS, one of the Linux distributions.\nThis will be the official programming environment for CS2030 for all your lab assignments.  I have created your accounts on the VM based on your SoC UNIX account.  You can login with your SoC UNIX username (not your NUSNET username, unless you intentionally set the two to be the same) and password.",
            "title": "The Environment"
        },
        {
            "location": "/unix/index.html#soc-vpn",
            "text": "THe VM can only be accessed from within the School of Computing networks.  If you want to access it from outside, you need to setup a Virtual Private Network (VPN) (See  instruction here ).  The staff at  helpdesk@comp.nus.edu.sg  or the IT helpdesk in COM1, Level 1, will be able to help with you setting up if needed.",
            "title": "SoC VPN"
        },
        {
            "location": "/unix/index.html#ssh",
            "text": "",
            "title": "SSH"
        },
        {
            "location": "/unix/index.html#for-unix-based-os",
            "text": "If you use either macOS, Windows 10 (with bash on Ubuntu), or Linux, you should have the command line  ssh  installed.    Run: 1 ssh <username>@cs2030-i.comp.nus.edu.sg   Replace  <username>  with your SoC UNIX username, for instance, I would do: 1 ssh ooiwt@cs2030-i.comp.nus.edu.sg   After the command above, following the instructions on screen.  The first time you ever connect to  cs2030-i.comp.nus.edu.sg , you will be warned that you are connecting to a previously unknown host.  Said  yes , and you will be prompted with your SoC UNIX password.",
            "title": "For UNIX-based OS"
        },
        {
            "location": "/unix/index.html#for-windows-7-or-8",
            "text": "The desktop computers in Programming Lab 6 (PL6) runs Windows 7.  If you are using these computers, or your own computers with older versions of Windows, you need to use  XShell 5  to access the VM.",
            "title": "For Windows 7 or 8"
        },
        {
            "location": "/unix/index.html#basic-unix-commands",
            "text": "Once you logged into the VM, you will be prompted to enter a command with a prompt that looks like this: 1 happytan@cs2030-i:~[xxx]$  \nThis interface is provided by a UNIX shell -- not unlike  jshell , this shell sits in a loop and wait for users to enter a command, then it interprets and executes the command.  There are many versions of shells, the default shell for our VM is  bash 1 .  The following are adapted for CS2030 from  the instructions created by Aaron Tan . Bugs are mine.     The power of UNIX stems from the many commands it offers. The following are a few commonly used commands. This list is by no means exhaustive and you are urged to explore on your own. Note that UNIX commands are case-sensitive.  In the examples below, bold words are commands which you are expected to enter. All commands are to be entered after the UNIX (local or  sunfire  or  cs2030-i ) prompt of the form  1 happytan@cs2030-i:~[xxx]$   ~  indicates that you are currently in your home directory,  xxx  is a number indicating the number of commands that have been entered.  The following examples assumes that user  happytan  is logged into cs2030-i; however you can do it on your local UNIX platform too.  It might be good to understand the directory structure in UNIX, a multi-user system. The directory tree is shown below:   Each user has his/her own home directory, which is where he/she will be automatically placed when he/she logs into the system. The above figure shows where the home directory of user  happytan  resides in the directory tree. The user  happytan  may create files or directories in his/her home directory, but not elsewhere unless permission is given.",
            "title": "Basic UNIX Commands"
        },
        {
            "location": "/unix/index.html#directory-commands",
            "text": "pwd : Print current Working Directory to show you which directory you are currently in 1\n2 happytan@cs2030-i:~[xxx]$ pwd\n/home/h/happytan     ls : LiSt files in your current directory 1\n2 happytan@cs2030-i:~[xxx]$ ls\nhappytan@cs2030-i:~[xxx]$  \n   If you do not have any regular files in your home directory, as you should when you first login, you should immediately return to the shell prompt.       Rule of Silence UNIX follows the  rule of silence : programs should not print unnecessary output, to allow other programs and users to easily parse the output from one program.  So, if  ls  has nothing to list, it will list nothing (as oppose to, say, printing \"This is an empty directory.\")      mkdir : MaKe a subDIRectory in current directory 1\n2\n3\n4\n5 happytan@cs2030-i:~[xxx]$ mkdir lab01\nhappytan@cs2030-i:~[xxx]$ ls\nlab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nlab01/  \nHere, you create a directory called  lab01 .  Now, when you  ls , you can see the directory listed.\nYou may also use  ls -F  for more information ( -F  is one of the many  options / flags  available for the  ls  command. To see a complete list of the options, refer to the man pages, i.e.,  man ls .)  The slash  /  beside the filename tells you that the file is a directory (aka folder in Windows lingo). A normal file does not have a slash beside its name when \"ls -F\" is used.  You may also use the  ls -l  command (hyphen el, not hyphen one) to display almost all the file information, include the size of the file and the date of modification.     Command history  UNIX maintains a history of your previously executed UNIX commands, and you may use the up and down arrows to go through it. Press the up arrow until you find a previously executed UNIX command. You may then press Enter to execute it, or edit the command before executing it. This is handy when you need to repeatedly executed a long UNIX command.     cd : Change Directory from current directory to another 1\n2 happytan@cs2030-i:~[xxx]$ cd lab01\nhappytan@cs2030-i:~/lab01[xxx]$  \nNote that the prompt changes to  ~/lab01  to indicate that you are now in the  lab01  directory below your  HOME  directory.  Entering  cd  alone brings you back to your  HOME  directory, i.e.,. the directory in which you started with when you first logged into the system. 1\n2 happytan@cs2030-i:~/lab01[xxx]$ cd\nhappytan@cs2030-i:~[xxx]$     rmdir :  to ReMove a subDIRectory in current directory -- note that a directory must be empty before it can be removed. 1\n2\n3\n4\n5 happytan@cs2030-i:~[xxx]$ rmdir lab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nhappytan@cs2030-i:~[xxx]$ mkdir lab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nlab01/",
            "title": "Directory commands"
        },
        {
            "location": "/unix/index.html#file-commands",
            "text": "cp :  CoPy files 1\n2\n3 happytan@cs2030-i:~/lab01[xxx]$ cp ~cs2030/lab01/Circle.java .\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nCircle.java  \nThe command above copy the files Circle.java from the HOME of user  cs2030 , under directory  lab01 , to the current directory.   If you want to copy the whole directory, use  -r  flag, where  r  stands for recursive copy.  1 happytan@cs2030-i:~/lab01[xxx]$ cp -r ~cs2030/lab01 .   The directory  lab01  and everything under it will be copied.   mv : MoVe files from one directory to another; can also be used to rename files. 1\n2\n3 happytan@cs2030-i:~/lab01[xxx]$ mv Circle.java Test.java\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nTest.java     Filename completion  If you have a very long file name, you may use UNIX's filename completion feature to reduce typing. For instance, you may type: 1 happytan@cs2030-i:~/lab01[xxx]$ mv C  \nand press the tab key, and UNIX will complete the filename for you if there is only one filename with the prefix \"C\". Otherwise, it will fill up the filename up to point where you need to type in more characters for disambiguation.    rm : ReMove files. Be careful with this command -- files deleted cannot be restored (unless they have been backed up during the normal backup cycle). 1\n2\n3\n4 happytan@cs2030-i:~/lab01[xxx]$ rm Test.java\nrm: remove 'Test.java'? y\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nhappytan@cs2030-i:~/lab01[xxx]$",
            "title": "File commands"
        },
        {
            "location": "/unix/index.html#command-to-display-text-files",
            "text": "cat : to string together or display (CATenate) the contents of files onto the screen 1 happytan@cs2030-i:~/lab01[xxx]$ cat Circle.java   less  - variant of  cat  (includes features to read each page leisurely) 1 happytan@cs2030-i:~/lab01[xxx]$ less Circle.java  \nIn  less , use  <space>  to move down one page,  b  to move Back up one page, and  q  to Quit from \"less\".   An online help facility is available in UNIX via the  man  command ( man  stands for MANual). To look for more information about any UNIX command, for example,  ls , type  man ls . Type  man man  and refer to Man Pages to find out more about the facility. To exit  man , press  q .  Now that you are familiar with how the UNIX shell works, I won't show the command prompt any more in the rest of this article.",
            "title": "Command to display text files"
        },
        {
            "location": "/unix/index.html#unix-file-permission",
            "text": "It is important to guide our files properly on a multi-user system where users share the same file system.  UNIX has a simple mechanism to for ensuring that: every file and directory has nine bits of access permission, corresponds to three access operations, read ( r ), write ( w ), and execute ( x ), for four classes of users, the user who owns of the file ( u ), users in the same group as the owner ( g ), all other users ( o ), and all users ( a ) (union of all three classes before)  When you run  ls -l , you will see the permission encoded as strings that look like  -rw-------  or  drwx--x--x  besides other file information.      The first character indicates if the file is a directory ( d ) or not ( - ).    The next three characters are the permission for the owner.   rwx  means that the owner can do all three: reading, writing, and executing,  rw-  means that the owner can read and write, but cannot execute.  The next three characters are the permission for the users in the same group.  The last three characters are the permission for the users in the other groups.   To change permission, we use the  chmod  command.  Let's say that we want to remove the read and write permission from all other users in the group.  You can run: 1 chmod g-rw <file>   where  <file>  is the name of the file whose permission you want to change.  This would change the permission from  -rw-rw-rw-  to  -rw----rw- , or from  -rwxr--r--  to  -rwx---r-- .  To add executable permission to everyone, you can run: 1 chmod a+x <file>   This would change the permission from  -rw-rw-rw-  to  -rwx--xrwx , or from  -rwxr--r--  to  -rwx--xr-x , and so on.  You get the idea.  Another way to change the permission is set the permission directly, instead of adding with  +  and removing with  - .  To do this, one convenient way is to treat the permission for each class of user as a 3-bit binary number between 0 to 7.  So,  rwx  is 7,  rw-  is 6,  -w-  is 2,  ---  is 0, etc.    To set the permission of a file to  -r--r--r--  (readable by everyone), run: 1 chmod 444 <file>   To set the permission to  -rw------- , run: 1 chmod 600 <file>   and so on.  It is important to ensure that your code is not readable and writable by other students, especially for graded lab exercises.",
            "title": "UNIX File Permission"
        },
        {
            "location": "/unix/index.html#secure-copy-scp",
            "text": "Secure copy, or  scp , is one way to transfer files from your local computer to  cs2030-i .  If you choose not to use  emacs  or  vim 2  and write your code on  cs2030-i , you can write your code on your local computer, and transfer them.  Let's say that you are in the directory with a bunch of java files you want to transfer, and you want them transferred into directory  test  that you have created, do the following:  1 scp *.java happytan@cs2030-i:~/test    Warning  If you have files with the same name in the remote directory, the files will be overwritten without warning.  I have lost my code a few times due to  scp .     The expression  *.java  is a regular expression that means all files with filename ending with  .java .  You can copy specific files as well.  For instance,  1 scp Circle.java Point.java happytan@cs2030-i:~/test   scp  supports  -r  (recursive copy) as well.",
            "title": "Secure Copy (scp)"
        },
        {
            "location": "/unix/index.html#setting-up-ssh-keys",
            "text": "Once you are comfortable with UNIX, you can set up a pair of public/private keys for authentication.    You can use 1 ssh-keygen -t rsa   to generate a pair of keys on your local computer.  Keep the private key  id_rsa  on your local machine in the hidden  ~/.ssh  directory, and copy the public key  id_rsa.pub  to your home directory on VM  cs2030-i .  On  cs2030-i , run 1 cat id_rsa.pub >> ~/.ssh/authorized_keys   Make sure that the permission for  .ssh  both on local machine and on VM is set to  700  and the files  id_rsa  on local machine and  authorized_keys  on remote machine is set to  600 .  Once setup, you need not enter your password every time you run  ssh  or  scp .        I run  fish  on my macOS, as you might have noticed during the in-class demos.  You can use any shell you like, if you know what you are doing.  Otherwise,  bash  is a popular one.\u00a0 \u21a9    My personal opinion is that, you should really master one of these two time-tested source code editor if you want a career in software development.\u00a0 \u21a9",
            "title": "Setting up SSH Keys"
        },
        {
            "location": "/vim/index.html",
            "text": "Vim Tips\n\n\nI collected below some tips on \nvim\n that I find helpful.\n\n\nConfiguration\n\n\nYou can configure your \nvim\n by putting your configuration options and scripts in the \n~/.vimrc\n file (a hidden file named \n.vimrc\n in your home directory).  This file will be loaded whenever you starts \nvim\n.\n\n\nHelp\n\n\nIn \nvim,\n the command \n:help <topic>\n shows help about a particular topic in \nvim\n.  Example, \n:help backup\n.\n\n\nBackup Files\n\n\nYou can ask \nvim\n to automatically backup files that you edit.  This has been a life saver for me in multiple  occasions.\n\n\nIn your \n~/.vimrc\n file, \n\n\n1\nset backup=on\n\n\n\n\n\n\nwill cause a copy of your file to be save with suffix \n~\n appended to its name everytime you save.\n\n\nI prefer not to clutter my working directory, so I set\n\n\n1\nset backupdir=~/.backup\n\n\n\n\n\n\nand create a directory named \n~/.backup\n to store my backup files.\n\n\nThe settings above are the default in your \ncs2030-i\n account.  So if you made changes to a file that you regreted on \ncs2030-i\n, or if accidentally deleted a file, you can check under \n~/.backup\n to see if the backup can save you.\n\n\nUndo\n\n\nSince we are on the topic of correcting mistakes, \nu\n in command mode undo your changes.  Prefix it with a number \n\\(n\\)\n to undo \n\\(n\\)\n times.  If you regreted your undo, \n<CTRL-R>\n will redo.\n\n\nSyntax Highlighting\n\n\nIf for some reasons, syntax highlighting is not on by default, add this to your \n~/.vimrc\n:\n\n\n1\nsyntax on\n\n\n\n\n\n\nRuler and Numbers\n\n\nIf you prefer to show the line number you are on and the column number you are on, adding the commands to \n~/.vimrc\n\n\n1\nset ruler\n\n\n\n\n\n\nwill display the line number and the column number on the lower right corner.  \n\n\nYou can also add\n\n1\nset number\n\n\n\n\n\nto label each line with a line number.\n\n\nJumping to a Line\n\n\nIf the compiler tells you there is an error on Line \n\\(x\\)\n, you can issue \n:<x>\n to jump to Line \n\\(x\\)\n.  For instance, \n:40\n will go to Line 40.\n\n\nShell Command\n\n\nIf you need to issue a shell command quickly, you don't have to exit \nvim\n, run the command, and launch \nvim\n again.  You can use \n!\n, \n\n\n1\n:!<command>\n\n\n\n\n\n\nwill issue the command to shell.  E.g.,\n\n\n1\n:!ls\n\n\n\n\n\n\nYou can use this to compile your current file, without exiting \nvim\n.\n\n\n1\n:!javac %\n\n\n\n\n\n\nAbbreviation\n\n\nYou can use the command \nab\n to abbreviate frequently typed commands.  E.g., in your \n~/.vimrc\n, \n\n\n1\nab Sop System.out.println(\"\n\n\n\n\n\n\nNow, when you type \nSop\n, it will be expanded into \nSystem.out.println(\"\n\n\nAuto-Completion\n\n\nYou can \n<CTRL-P>\n to auto-complete.  By default, the auto-complete dictionary is based on text in your current editing buffers.  This is a very useful keystroke saver for long function and variable names.\n\n\nAuto-Indent the Whole File\n\n\nYou can \ngg=G\n in command mode to auto-indent the whole file.  \ngg\n is the command to go to the beginning of the file.  \n=\n is the command to indent.  \nG\n is the command to go to the end of the file.\n\n\nSwapping Lines\n\n\nSometimes you want to swap the order of two lines of code, in command mode, \nddp\n will do the trick.  \ndd\n deletes the current line, \np\n paste it after the current line, in effect swapping the order of the two lines.\n\n\nGoto File\n\n\nPlace your cursor on the name of a class (e.g., \nEvent\n), then in command mode, issue the \ngf\n command (goto file).  \nvim\n will open \nEvent.java\n.  You can set the \npath\n to load files from directories other than the current directory.   \"Ctrl-^\" will get out and back to the previous file.\n\n\nSyntax and Style Checker\n\n\nI use \nsyntastic\n to check for style and syntax whenever I save a file.  \nsyntastic\n is a \nvim\n plugin. \n\n\nMy \n.vimrc\n configuration file contains the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n\"For syntastic\nset laststatus=2\nset statusline+=%#warningmsg#\nset statusline+=%{SyntasticStatuslineFlag()}\nset statusline+=%*\n\nlet g:syntastic_always_populate_loc_list = 1\nlet g:syntastic_auto_loc_list = 1\nlet g:syntastic_check_on_open = 1\nlet g:syntastic_check_on_wq = 0\nlet g:syntastic_java_checkers = [ \"checkstyle\", \"javac\" ]\nlet g:syntastic_java_checkstyle_classpath = \"~cs2030/bin/checkstyle-8.2-all.jar\"\nlet g:syntastic_java_checkstyle_conf_file = \"~cs2030/bin/cs2030_checks.xml\"\n\n\n\n\n\n\nThe last two lines refer to \ncheckstyle\n tool and its configuration file available from \n~cs2030/bin\n on the host \ncs2030-i.comp.nus.edu.sg\n.",
            "title": "Vim"
        },
        {
            "location": "/vim/index.html#vim-tips",
            "text": "I collected below some tips on  vim  that I find helpful.",
            "title": "Vim Tips"
        },
        {
            "location": "/vim/index.html#configuration",
            "text": "You can configure your  vim  by putting your configuration options and scripts in the  ~/.vimrc  file (a hidden file named  .vimrc  in your home directory).  This file will be loaded whenever you starts  vim .",
            "title": "Configuration"
        },
        {
            "location": "/vim/index.html#help",
            "text": "In  vim,  the command  :help <topic>  shows help about a particular topic in  vim .  Example,  :help backup .",
            "title": "Help"
        },
        {
            "location": "/vim/index.html#backup-files",
            "text": "You can ask  vim  to automatically backup files that you edit.  This has been a life saver for me in multiple  occasions.  In your  ~/.vimrc  file,   1 set backup=on   will cause a copy of your file to be save with suffix  ~  appended to its name everytime you save.  I prefer not to clutter my working directory, so I set  1 set backupdir=~/.backup   and create a directory named  ~/.backup  to store my backup files.  The settings above are the default in your  cs2030-i  account.  So if you made changes to a file that you regreted on  cs2030-i , or if accidentally deleted a file, you can check under  ~/.backup  to see if the backup can save you.",
            "title": "Backup Files"
        },
        {
            "location": "/vim/index.html#undo",
            "text": "Since we are on the topic of correcting mistakes,  u  in command mode undo your changes.  Prefix it with a number  \\(n\\)  to undo  \\(n\\)  times.  If you regreted your undo,  <CTRL-R>  will redo.",
            "title": "Undo"
        },
        {
            "location": "/vim/index.html#syntax-highlighting",
            "text": "If for some reasons, syntax highlighting is not on by default, add this to your  ~/.vimrc :  1 syntax on",
            "title": "Syntax Highlighting"
        },
        {
            "location": "/vim/index.html#ruler-and-numbers",
            "text": "If you prefer to show the line number you are on and the column number you are on, adding the commands to  ~/.vimrc  1 set ruler   will display the line number and the column number on the lower right corner.    You can also add 1 set number   to label each line with a line number.",
            "title": "Ruler and Numbers"
        },
        {
            "location": "/vim/index.html#jumping-to-a-line",
            "text": "If the compiler tells you there is an error on Line  \\(x\\) , you can issue  :<x>  to jump to Line  \\(x\\) .  For instance,  :40  will go to Line 40.",
            "title": "Jumping to a Line"
        },
        {
            "location": "/vim/index.html#shell-command",
            "text": "If you need to issue a shell command quickly, you don't have to exit  vim , run the command, and launch  vim  again.  You can use  ! ,   1 :!<command>   will issue the command to shell.  E.g.,  1 :!ls   You can use this to compile your current file, without exiting  vim .  1 :!javac %",
            "title": "Shell Command"
        },
        {
            "location": "/vim/index.html#abbreviation",
            "text": "You can use the command  ab  to abbreviate frequently typed commands.  E.g., in your  ~/.vimrc ,   1 ab Sop System.out.println(\"   Now, when you type  Sop , it will be expanded into  System.out.println(\"",
            "title": "Abbreviation"
        },
        {
            "location": "/vim/index.html#auto-completion",
            "text": "You can  <CTRL-P>  to auto-complete.  By default, the auto-complete dictionary is based on text in your current editing buffers.  This is a very useful keystroke saver for long function and variable names.",
            "title": "Auto-Completion"
        },
        {
            "location": "/vim/index.html#auto-indent-the-whole-file",
            "text": "You can  gg=G  in command mode to auto-indent the whole file.   gg  is the command to go to the beginning of the file.   =  is the command to indent.   G  is the command to go to the end of the file.",
            "title": "Auto-Indent the Whole File"
        },
        {
            "location": "/vim/index.html#swapping-lines",
            "text": "Sometimes you want to swap the order of two lines of code, in command mode,  ddp  will do the trick.   dd  deletes the current line,  p  paste it after the current line, in effect swapping the order of the two lines.",
            "title": "Swapping Lines"
        },
        {
            "location": "/vim/index.html#goto-file",
            "text": "Place your cursor on the name of a class (e.g.,  Event ), then in command mode, issue the  gf  command (goto file).   vim  will open  Event.java .  You can set the  path  to load files from directories other than the current directory.   \"Ctrl-^\" will get out and back to the previous file.",
            "title": "Goto File"
        },
        {
            "location": "/vim/index.html#syntax-and-style-checker",
            "text": "I use  syntastic  to check for style and syntax whenever I save a file.   syntastic  is a  vim  plugin.   My  .vimrc  configuration file contains the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 \"For syntastic\nset laststatus=2\nset statusline+=%#warningmsg#\nset statusline+=%{SyntasticStatuslineFlag()}\nset statusline+=%*\n\nlet g:syntastic_always_populate_loc_list = 1\nlet g:syntastic_auto_loc_list = 1\nlet g:syntastic_check_on_open = 1\nlet g:syntastic_check_on_wq = 0\nlet g:syntastic_java_checkers = [ \"checkstyle\", \"javac\" ]\nlet g:syntastic_java_checkstyle_classpath = \"~cs2030/bin/checkstyle-8.2-all.jar\"\nlet g:syntastic_java_checkstyle_conf_file = \"~cs2030/bin/cs2030_checks.xml\"   The last two lines refer to  checkstyle  tool and its configuration file available from  ~cs2030/bin  on the host  cs2030-i.comp.nus.edu.sg .",
            "title": "Syntax and Style Checker"
        }
    ]
}