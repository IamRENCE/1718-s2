{
    "docs": [
        {
            "location": "/index.html",
            "text": "Piazza Q&A\n\n\nLabs\n\n\n0. \nWarm Up\n\n\nLectures\n\n\n3. \nMore on Inheritance\n\n\nFor list of topics coming up, see \nthe class schedule\n.\n\n\n2. \nInheritance and Polymorphism\n\n\nSlides\n | \nVideo\n\n\n1. \nAbstraction and Encapsulation\n\n\nSlides\n | \nVideo",
            "title": "Home"
        },
        {
            "location": "/index.html#piazza-qa",
            "text": "",
            "title": "Piazza Q&amp;A"
        },
        {
            "location": "/index.html#labs",
            "text": "",
            "title": "Labs"
        },
        {
            "location": "/index.html#0-warm-up",
            "text": "",
            "title": "0. Warm Up"
        },
        {
            "location": "/index.html#lectures",
            "text": "",
            "title": "Lectures"
        },
        {
            "location": "/index.html#3-more-on-inheritance",
            "text": "For list of topics coming up, see  the class schedule .",
            "title": "3. More on Inheritance"
        },
        {
            "location": "/index.html#2-inheritance-and-polymorphism",
            "text": "Slides  |  Video",
            "title": "2. Inheritance and Polymorphism"
        },
        {
            "location": "/index.html#1-abstraction-and-encapsulation",
            "text": "Slides  |  Video",
            "title": "1. Abstraction and Encapsulation"
        },
        {
            "location": "/about/index.html",
            "text": "CS2030 Programming Methodology II\n\n\nAY17/18 Semester 2\n\n\nAbout\n\n\nThis module is a follow up to CS1010.  It explores two modern programming paradigms, object-oriented programming and functional programming.  Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using object-oriented design principles and advanced programming constructs available in the two paradigms.  Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.  \n\n\nWho/When/Where\n\n\n\n\nLecture:\n 10am - 12noon, every Monday\n\n\nVenue:\n LT19\n\n\nInstructor:\n \nOoi Wei Tsang\n (\nooiwt@comp.nus.edu.sg\n)\n\n\nTeaching Assistant:\n \n\n\nLan Ziquan (\nziquan@comp.nus.edu.sg\n)\n\n\n\n\n\n\nUG Tutors:\n\n\nBernard Teo Zhi Yi\n\n\nChang Ho Huan\n\n\nChung Zhi Li, Denzel\n\n\nEvan Tay\n\n\nHo Boon Wee Addison\n\n\nJeremy Lim Yu Xuan\n\n\nJoshi Atharv Abhay\n\n\nLim Heng Guang\n\n\nLin Si Jie\n\n\nOng Yan Zhi\n\n\nQiu Siyu\n\n\nTan Thong Cai, Nelvin\n\n\nTay Hui Chun\n\n\nTeh Zi Cong Nicholas\n\n\nThangavel Sharan\n\n\nTriston Pang Erh Syen\n\n\nWinson Heng Yong Seng\n\n\nYuen Jun Rong\n\n\n\n\n\n\nLab:\n Every Tuesday (Week 3 - Week 13)\n\n\nMidterm Test:\n March 5, 2018, Monday, 10am\n\n\nFinal Assessment:\n May 3, 2018, Thursday\n\n\n\n\nWorkload\n\n\nBesides the 4-hour contact time for lecture and lab, students are expected to spend about 6 hours on average weekly on homework and on preparing the class.\n\n\nHistory\n\n\nCS2030 is a new module, required for all students in Bachelor of Computing (Computer Science) and Second Major in Computer Science students, cohort 17/18 onwards.  In 2017, the Department of Computer Science reorganized the two module series on data structures and algorithms (CS1020, CS2010) into (CS2030, CS2040).  CS2040 focuses on data structures and algorithms, while the advanced programming methodologies from CS1020 are moved into CS2030.  CS2030 will also covers some basics OO design that previously were covered in CS2103, and introduces students to functional programming, concurrent programming, event-based programming, and other paradigms that are increasingly important.\n\n\nLearning Outcomes\n\n\nAfter completing the module, students should:\n\n\n\n\nbe confident in reading and developing medium-scale programs (up to 10K lines of code)\n\n\nbe familiarize enough with common OO concepts to understand software code written in common OO language and understand documentation of software libraries in OO\n\n\nbe able to apply OO concepts to design and implement medium to large scale  programs, including\n\n\ndesign and implement a class\n\n\ndecompose a problem solution into classes and define members and methods for each class\n\n\nuse polymorphism effectively\n\n\nuse inheritance to design simple class hierarchies that allow code reuse\n\n\ntrace the control flow of a programs that use dynamic dispatch\n\n\nuse encapsulation mechanisms such as interfaces, private methods/members\n\n\n\n\n\n\nbe familiarize enough with common functional programming concepts and constructs, including lambda expression, effect-free programming, first class functions, infinite streams.\n\n\nbe able to apply functional programming concepts to design and implement , including:\n\n\nImplement basic algorithms in functions that are effect free.\n\n\nImplement useful functions that take/return another function\n\n\nWrite correct and effective code using lambda expressions and/or infinite streams\n\n\n\n\n\n\nbe able to compare and contrast imperative programming, OO programming, and function programming paradigms, and select the most natural paradigms for each situation\n\n\nbe aware of how the OOP and FP concepts are implemented in different ways in different programming languages\n\n\nbe confident enough to learn new programming languages that uses OOP and FP paradigm\n\n\nattain proficiency in Java 8 (and above)\n\n\nbe equipped with solid programming foundations for further studies in computer science\n\n\n\n\nTextbook\n\n\nThere is no textbook for this class.\n\n\nThere are many good books and online articles written about the topics covered in the module.  These will be listed under the \nReadings\n section.",
            "title": "About"
        },
        {
            "location": "/about/index.html#cs2030-programming-methodology-ii",
            "text": "",
            "title": "CS2030 Programming Methodology II"
        },
        {
            "location": "/about/index.html#ay1718-semester-2",
            "text": "",
            "title": "AY17/18 Semester 2"
        },
        {
            "location": "/about/index.html#about",
            "text": "This module is a follow up to CS1010.  It explores two modern programming paradigms, object-oriented programming and functional programming.  Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using object-oriented design principles and advanced programming constructs available in the two paradigms.  Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.",
            "title": "About"
        },
        {
            "location": "/about/index.html#whowhenwhere",
            "text": "Lecture:  10am - 12noon, every Monday  Venue:  LT19  Instructor:   Ooi Wei Tsang  ( ooiwt@comp.nus.edu.sg )  Teaching Assistant:    Lan Ziquan ( ziquan@comp.nus.edu.sg )    UG Tutors:  Bernard Teo Zhi Yi  Chang Ho Huan  Chung Zhi Li, Denzel  Evan Tay  Ho Boon Wee Addison  Jeremy Lim Yu Xuan  Joshi Atharv Abhay  Lim Heng Guang  Lin Si Jie  Ong Yan Zhi  Qiu Siyu  Tan Thong Cai, Nelvin  Tay Hui Chun  Teh Zi Cong Nicholas  Thangavel Sharan  Triston Pang Erh Syen  Winson Heng Yong Seng  Yuen Jun Rong    Lab:  Every Tuesday (Week 3 - Week 13)  Midterm Test:  March 5, 2018, Monday, 10am  Final Assessment:  May 3, 2018, Thursday",
            "title": "Who/When/Where"
        },
        {
            "location": "/about/index.html#workload",
            "text": "Besides the 4-hour contact time for lecture and lab, students are expected to spend about 6 hours on average weekly on homework and on preparing the class.",
            "title": "Workload"
        },
        {
            "location": "/about/index.html#history",
            "text": "CS2030 is a new module, required for all students in Bachelor of Computing (Computer Science) and Second Major in Computer Science students, cohort 17/18 onwards.  In 2017, the Department of Computer Science reorganized the two module series on data structures and algorithms (CS1020, CS2010) into (CS2030, CS2040).  CS2040 focuses on data structures and algorithms, while the advanced programming methodologies from CS1020 are moved into CS2030.  CS2030 will also covers some basics OO design that previously were covered in CS2103, and introduces students to functional programming, concurrent programming, event-based programming, and other paradigms that are increasingly important.",
            "title": "History"
        },
        {
            "location": "/about/index.html#learning-outcomes",
            "text": "After completing the module, students should:   be confident in reading and developing medium-scale programs (up to 10K lines of code)  be familiarize enough with common OO concepts to understand software code written in common OO language and understand documentation of software libraries in OO  be able to apply OO concepts to design and implement medium to large scale  programs, including  design and implement a class  decompose a problem solution into classes and define members and methods for each class  use polymorphism effectively  use inheritance to design simple class hierarchies that allow code reuse  trace the control flow of a programs that use dynamic dispatch  use encapsulation mechanisms such as interfaces, private methods/members    be familiarize enough with common functional programming concepts and constructs, including lambda expression, effect-free programming, first class functions, infinite streams.  be able to apply functional programming concepts to design and implement , including:  Implement basic algorithms in functions that are effect free.  Implement useful functions that take/return another function  Write correct and effective code using lambda expressions and/or infinite streams    be able to compare and contrast imperative programming, OO programming, and function programming paradigms, and select the most natural paradigms for each situation  be aware of how the OOP and FP concepts are implemented in different ways in different programming languages  be confident enough to learn new programming languages that uses OOP and FP paradigm  attain proficiency in Java 8 (and above)  be equipped with solid programming foundations for further studies in computer science",
            "title": "Learning Outcomes"
        },
        {
            "location": "/about/index.html#textbook",
            "text": "There is no textbook for this class.  There are many good books and online articles written about the topics covered in the module.  These will be listed under the  Readings  section.",
            "title": "Textbook"
        },
        {
            "location": "/prereqs/index.html",
            "text": "Assumed Prior Knowledge\n\n\nCS2030 has the prerequisite of CS1010 or its equivalent.  There are, however, several versions of CS1010, and some students are waived from doing CS1010 due to prior programming knowledge.  This document here outlines the prior knowledge that the instructors assume the students have before entering CS2030.\n\n\nBasic computational problem solving and programming skills\n\n\nHere are some learning outcomes that students should attained after taking CS1010.  Students should be familiar with:\n\n\n\n\nthe computational thinking process of formulating a problem and coming up with a solution,\n\n\nfundamental programming concepts, including variables, assignments, conditions, branches, loops, expressions, functions, recursions, and structures\n\n\nhow to program a given solution in a programming language\n\n\ndifferent classes of programming errors (logical errors, syntax errors, run-time errors)\n\n\ncommon debugging techniques and strategies\n\n\ngood programming practices (comments, naming convention, indentation, modular code)\n\n\nsimple data structures (e.g., arrays)\n\n\nwriting test cases to check correctness of own program\n\n\nhow a program is executed and represented in a computing device (at a high level)\n\n\nthe compilation process (at a high level)\n\n\nthe concept of reusability and the use of standard/3\nrd\n party software\n\n\nbubble sort, insertion sort, linear search, and binary search\n\n\n\n\nStudents who take CS2030 are assumed to have sufficient knowledge of the above.  If there are specific components that you are not familiar with, please pick up the notes from CS1010 and self-learn.\n\n\nUNIX command line\n\n\nWe will use the \nsunfire\n computing server for this module.  As such, you are expected to be comfortable with using CLI (command line interface) and the basic UNIX commands, in a text window without fancy windows and mouse, and the concept of \nssh\n-ing into a remote host and work remotely.\n\n\nIf you are not familiar with this concept, take a look at the \nslides from the CS1010/CS1020 workshop\n.\n\n\nSource code editors\n\n\nYou are expected to be familiar with one or more source code editors.  Note that source code editor is not the same as text editor (e.g., Notepad).  A source code editor automatically highlights syntax, indents the code, matches parenthesis, supports autocompletion and code folding, and integrates with the software development process (such as revision control).\n\n\nCS1010 started (or would have started) you off with \nvim\n.  Many good source code editors exists, such as \nAtom\n, \nVS Code\n, and of course \nemacs\n1\n!\n\n\nFor your career, you should pick one and master it.  If you want to learn \nvim\n, the command \nvimtutor\n is a good place to start.  There are also many tutorials, webcasts, games, etc, online to help you learn \nvim\n.  Just google.\n\n\nDeveloper's Friendly OS\n\n\nYour life through the computing modules would be much much better if you are using a developer's friendly operating system on your personal computer.  \n\n\n\n\n\n\nIf you uses Linux or macOS, you are all set.  For macOS users, \nbrew\n is highly recommended.\n\n\n\n\n\n\nIf you use Windows 10, you should definitely install the Ubuntu Bash Shell.  There are many excellent tutorials online (such as \nthis one\n).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI can't mention \nvim\n without mentioning \nemacs\n\u00a0\n\u21a9",
            "title": "Prerequisites"
        },
        {
            "location": "/prereqs/index.html#assumed-prior-knowledge",
            "text": "CS2030 has the prerequisite of CS1010 or its equivalent.  There are, however, several versions of CS1010, and some students are waived from doing CS1010 due to prior programming knowledge.  This document here outlines the prior knowledge that the instructors assume the students have before entering CS2030.",
            "title": "Assumed Prior Knowledge"
        },
        {
            "location": "/prereqs/index.html#basic-computational-problem-solving-and-programming-skills",
            "text": "Here are some learning outcomes that students should attained after taking CS1010.  Students should be familiar with:   the computational thinking process of formulating a problem and coming up with a solution,  fundamental programming concepts, including variables, assignments, conditions, branches, loops, expressions, functions, recursions, and structures  how to program a given solution in a programming language  different classes of programming errors (logical errors, syntax errors, run-time errors)  common debugging techniques and strategies  good programming practices (comments, naming convention, indentation, modular code)  simple data structures (e.g., arrays)  writing test cases to check correctness of own program  how a program is executed and represented in a computing device (at a high level)  the compilation process (at a high level)  the concept of reusability and the use of standard/3 rd  party software  bubble sort, insertion sort, linear search, and binary search   Students who take CS2030 are assumed to have sufficient knowledge of the above.  If there are specific components that you are not familiar with, please pick up the notes from CS1010 and self-learn.",
            "title": "Basic computational problem solving and programming skills"
        },
        {
            "location": "/prereqs/index.html#unix-command-line",
            "text": "We will use the  sunfire  computing server for this module.  As such, you are expected to be comfortable with using CLI (command line interface) and the basic UNIX commands, in a text window without fancy windows and mouse, and the concept of  ssh -ing into a remote host and work remotely.  If you are not familiar with this concept, take a look at the  slides from the CS1010/CS1020 workshop .",
            "title": "UNIX command line"
        },
        {
            "location": "/prereqs/index.html#source-code-editors",
            "text": "You are expected to be familiar with one or more source code editors.  Note that source code editor is not the same as text editor (e.g., Notepad).  A source code editor automatically highlights syntax, indents the code, matches parenthesis, supports autocompletion and code folding, and integrates with the software development process (such as revision control).  CS1010 started (or would have started) you off with  vim .  Many good source code editors exists, such as  Atom ,  VS Code , and of course  emacs 1 !  For your career, you should pick one and master it.  If you want to learn  vim , the command  vimtutor  is a good place to start.  There are also many tutorials, webcasts, games, etc, online to help you learn  vim .  Just google.",
            "title": "Source code editors"
        },
        {
            "location": "/prereqs/index.html#developers-friendly-os",
            "text": "Your life through the computing modules would be much much better if you are using a developer's friendly operating system on your personal computer.      If you uses Linux or macOS, you are all set.  For macOS users,  brew  is highly recommended.    If you use Windows 10, you should definitely install the Ubuntu Bash Shell.  There are many excellent tutorials online (such as  this one ).        I can't mention  vim  without mentioning  emacs \u00a0 \u21a9",
            "title": "Developer's Friendly OS"
        },
        {
            "location": "/policies/index.html",
            "text": "Policies\n\n\nEmail Communication\n\n\n\n\n\n\nPlease use only your official NUS email for communication with the teaching staffs -- either the one with \n@u.nus.edu\n or \n@comp.nus.edu.sg\n.  \n\n\n\n\n\n\nPlease use email only for private matters.  Prefix your email subject with \n[CS2030]\n.\n\n\n\n\n\n\nPlease use \nPiazza\n for other matters related to the module.  If you email us privately and we feel that your questions/answers are useful to the rest of the class, we will publish it on Piazza, with anonymization when appropriate.\n\n\n\n\n\n\nLab Sessions\n\n\n\n\n\n\nWe do take attendance during the lab sessions, but it does not affect your grades if you do not attend the lab sessions as long as you still need to submit the graded lab exercises.  \n\n\n\n\n\n\nYou should stick to your allocated time slot for labs.  If there is a strong reason for your to attend another lab session, please inform your lab instructors.\n\n\n\n\n\n\nLate Submissions\n\n\n\n\n\n\nAll graded exercise must be submitted on time.  If you need an extension, please ask for one and provide a justification for approval.  Only academic reasons can be considered (e.g., representing NUS for a sports event is OK, going for vacation is not)\n\n\n\n\n\n\nFor late submission, there is a 1% penalty (of the assessment grade) for every 5-minute after the deadline, capped at 80%.  For example, if a homework is deserved 40 marks, and it is submitted 100 minutes after the deadline, the student will get 32 marks instead (20% penalty).  If it is submitted 10 hours after the deadline, the student will get 8 marks (as it has hit the cap of 80% penalty).\n\n\n\n\n\n\nDiscussions and Plagiarism\n\n\n\n\n\n\nWe encourage discussions among students for lab assignments, but each student should be responsible for writing his/her own code and should give credits to others when appropriate.  \n\n\n\n\n\n\nNUS and School of Computing have a high standard on academic honesty and take any violation seriously.  In the context of computing modules, source code plagiarism -- copying code from another source and attributing it as one's own code -- is a series violation.   Please read the page \nPreventing Plagiarism\n from the school's website to familiarize yourself with the policy.\n\n\n\n\n\n\nI adopt a \"no mercy\" policy when it comes to disciplinary action on plagiarism.  Both parties, the student who copied, and the student who allowed others to copy, will be penalized equally.\n\n\n\n\n\n\nLecture Video\n\n\n\n\n\n\nScreencast will be recorded and posted online 2-3 days after the lecture. \nThis will be done on a 'best effort' basis and screencast will not be guaranteed to be available.  \n\n\n\n\n\n\nPosting of screencast is meant to help students who attended the lecture to recap the content, or to help those who are not able to attend the lecture due to unexpected circumstances.  It does not mean that you should skip lecture.\n\n\n\n\n\n\nModel Solutions and Slides\n\n\n\n\n\n\nSlides will be posted \nafter\n the class.  Note that slides are used as a \nvisual aid\n to assist me during lecture.  It is not meant as summary of lectures nor a replacement of lecture notes.\n\n\n\n\n\n\nIn a module like CS2030, there is often not a single correct answer.  Hence, there is no model solution for this module.  Sample solutions may be posted (both good and bad ones) for discussion.  I strongly encourage students to discuss your solution with me, instead of just comparing your solution with the sample solution.\n\n\n\n\n\n\nGrading\n\n\n\n\nStudents will received the grades they deserved irrespective of how the other students in the class performed (i.e., no bell curve)\n\n\n\n\nOpen Book Assessment\n\n\n\n\n\n\nAll assessment, including graded labs, midterm test, and final assessment, are open book assessment -- you can bring in your notes or other \nanalog\n reference materials.  Java documentation will be made available during labs.  Relevant Java APIs will be provided during midterm tests and final assessments.\n\n\n\n\n\n\nThere is \nnothing to memorize\n for this class.",
            "title": "Policies"
        },
        {
            "location": "/policies/index.html#policies",
            "text": "",
            "title": "Policies"
        },
        {
            "location": "/policies/index.html#email-communication",
            "text": "Please use only your official NUS email for communication with the teaching staffs -- either the one with  @u.nus.edu  or  @comp.nus.edu.sg .      Please use email only for private matters.  Prefix your email subject with  [CS2030] .    Please use  Piazza  for other matters related to the module.  If you email us privately and we feel that your questions/answers are useful to the rest of the class, we will publish it on Piazza, with anonymization when appropriate.",
            "title": "Email Communication"
        },
        {
            "location": "/policies/index.html#lab-sessions",
            "text": "We do take attendance during the lab sessions, but it does not affect your grades if you do not attend the lab sessions as long as you still need to submit the graded lab exercises.      You should stick to your allocated time slot for labs.  If there is a strong reason for your to attend another lab session, please inform your lab instructors.",
            "title": "Lab Sessions"
        },
        {
            "location": "/policies/index.html#late-submissions",
            "text": "All graded exercise must be submitted on time.  If you need an extension, please ask for one and provide a justification for approval.  Only academic reasons can be considered (e.g., representing NUS for a sports event is OK, going for vacation is not)    For late submission, there is a 1% penalty (of the assessment grade) for every 5-minute after the deadline, capped at 80%.  For example, if a homework is deserved 40 marks, and it is submitted 100 minutes after the deadline, the student will get 32 marks instead (20% penalty).  If it is submitted 10 hours after the deadline, the student will get 8 marks (as it has hit the cap of 80% penalty).",
            "title": "Late Submissions"
        },
        {
            "location": "/policies/index.html#discussions-and-plagiarism",
            "text": "We encourage discussions among students for lab assignments, but each student should be responsible for writing his/her own code and should give credits to others when appropriate.      NUS and School of Computing have a high standard on academic honesty and take any violation seriously.  In the context of computing modules, source code plagiarism -- copying code from another source and attributing it as one's own code -- is a series violation.   Please read the page  Preventing Plagiarism  from the school's website to familiarize yourself with the policy.    I adopt a \"no mercy\" policy when it comes to disciplinary action on plagiarism.  Both parties, the student who copied, and the student who allowed others to copy, will be penalized equally.",
            "title": "Discussions and Plagiarism"
        },
        {
            "location": "/policies/index.html#lecture-video",
            "text": "Screencast will be recorded and posted online 2-3 days after the lecture. \nThis will be done on a 'best effort' basis and screencast will not be guaranteed to be available.      Posting of screencast is meant to help students who attended the lecture to recap the content, or to help those who are not able to attend the lecture due to unexpected circumstances.  It does not mean that you should skip lecture.",
            "title": "Lecture Video"
        },
        {
            "location": "/policies/index.html#model-solutions-and-slides",
            "text": "Slides will be posted  after  the class.  Note that slides are used as a  visual aid  to assist me during lecture.  It is not meant as summary of lectures nor a replacement of lecture notes.    In a module like CS2030, there is often not a single correct answer.  Hence, there is no model solution for this module.  Sample solutions may be posted (both good and bad ones) for discussion.  I strongly encourage students to discuss your solution with me, instead of just comparing your solution with the sample solution.",
            "title": "Model Solutions and Slides"
        },
        {
            "location": "/policies/index.html#grading",
            "text": "Students will received the grades they deserved irrespective of how the other students in the class performed (i.e., no bell curve)",
            "title": "Grading"
        },
        {
            "location": "/policies/index.html#open-book-assessment",
            "text": "All assessment, including graded labs, midterm test, and final assessment, are open book assessment -- you can bring in your notes or other  analog  reference materials.  Java documentation will be made available during labs.  Relevant Java APIs will be provided during midterm tests and final assessments.    There is  nothing to memorize  for this class.",
            "title": "Open Book Assessment"
        },
        {
            "location": "/schedule/index.html",
            "text": "Lab Timetable\n\n\nAll labs are on Tuesday.\n\n\n\n\n\n\n\n\nTime\n\n\nCOM1-B109\n\n\nCOM1-B111\n\n\nCOM1-B112\n\n\n\n\n\n\n\n\n\n\n\n\n1000 - 1200\n\n\n(1) Wei Tsang, Sharan, Yan Zhi\n\n\n-\n\n\n(5) Ziquan, Yi Chong, Jeremy\n\n\n\n\n\n\n\n\n1200 - 1400\n\n\n-\n\n\n(6) Ziquan, Jun Rong\n\n\n-\n\n\n\n\n\n\n\n\n1400 - 1600\n\n\n(3) Wei Tsang, Nelvin, Nicholas\n\n\n(7) Siyu, Hui Chun\n\n\n-\n\n\n\n\n\n\n\n\n1600 - 1800\n\n\n(4) Heng Guang, Bernard, Si Jie\n\n\n-\n\n\n(2) Winson, Triston\n\n\n\n\n\n\n\n\n\n\nLecture Schedule (Tentative)\n\n\n\n\n\n\n\n\nWeek\n\n\nDate\n\n\nTopics\n\n\nLabs\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n2018-01-15\n\n\n1. Abstraction and Encapsulation\n\n\n\n\n\n\n\n\n\n\n2\n\n\n2018-01-22\n\n\n2. Inheritance and Polymorphism\n\n\n\n\n\n\n\n\n\n\n3\n\n\n2018-01-29\n\n\n3. On Object-Oriented Design\n\n\nLab 0: Warm Up\n\n\n\n\n\n\n\n\n4\n\n\n2018-02-03\n\n\n4. Java Execution and Memory Models (incl Exceptions)\n\n\nLab 1a: Procedural to OO\n\n\n\n\n\n\n\n\n5\n\n\n2018-02-12\n\n\n5. Generics and Collections\n\n\nLab 1b: Simulator with Multiple Waiting Customers\n\n\n\n\n\n\n\n\n6\n\n\n2018-02-19\n\n\n6. Types and Nested Classes\n\n\nLab 2a: Simulator with Multiple Servers\n\n\n\n\n\n\n\n\n\n\n2018-02-26\n\n\nBreak\n\n\n\n\n\n\n\n\n\n\n7\n\n\n2018-03-05\n\n\n[Midterm]\n\n\nLab 2b: Simulator with Different Customer Types, Complex Events\n\n\n\n\n\n\n\n\n8\n\n\n2018-03-12\n\n\n7. Functions and Lambdas\n\n\nLab 3a: Lambda List\n\n\n\n\n\n\n\n\n9\n\n\n2018-03-19\n\n\n8. Stream and Collections\n\n\nLab 3b: Infinite Lazy List\n\n\n\n\n\n\n\n\n10\n\n\n2018-03-26\n\n\n9. Optional, Functor, and Monad\n\n\nLab 4a: A Functional Simulator\n\n\n\n\n\n\n\n\n11\n\n\n2018-04-02\n\n\n10. Parallel Programming\n\n\nLab 4b: A Functional Simulator, Continued\n\n\n\n\n\n\n\n\n12\n\n\n2018-04-09\n\n\n11. Asynchronous Programming\n\n\nLab 5: Parallel\n\n\n\n\n\n\n\n\n13\n\n\n2018-04-16\n\n\n12. Recap\n\n\nLab 6: Async",
            "title": "Schedule"
        },
        {
            "location": "/schedule/index.html#lab-timetable",
            "text": "All labs are on Tuesday.     Time  COM1-B109  COM1-B111  COM1-B112       1000 - 1200  (1) Wei Tsang, Sharan, Yan Zhi  -  (5) Ziquan, Yi Chong, Jeremy     1200 - 1400  -  (6) Ziquan, Jun Rong  -     1400 - 1600  (3) Wei Tsang, Nelvin, Nicholas  (7) Siyu, Hui Chun  -     1600 - 1800  (4) Heng Guang, Bernard, Si Jie  -  (2) Winson, Triston",
            "title": "Lab Timetable"
        },
        {
            "location": "/schedule/index.html#lecture-schedule-tentative",
            "text": "Week  Date  Topics  Labs       1  2018-01-15  1. Abstraction and Encapsulation      2  2018-01-22  2. Inheritance and Polymorphism      3  2018-01-29  3. On Object-Oriented Design  Lab 0: Warm Up     4  2018-02-03  4. Java Execution and Memory Models (incl Exceptions)  Lab 1a: Procedural to OO     5  2018-02-12  5. Generics and Collections  Lab 1b: Simulator with Multiple Waiting Customers     6  2018-02-19  6. Types and Nested Classes  Lab 2a: Simulator with Multiple Servers      2018-02-26  Break      7  2018-03-05  [Midterm]  Lab 2b: Simulator with Different Customer Types, Complex Events     8  2018-03-12  7. Functions and Lambdas  Lab 3a: Lambda List     9  2018-03-19  8. Stream and Collections  Lab 3b: Infinite Lazy List     10  2018-03-26  9. Optional, Functor, and Monad  Lab 4a: A Functional Simulator     11  2018-04-02  10. Parallel Programming  Lab 4b: A Functional Simulator, Continued     12  2018-04-09  11. Asynchronous Programming  Lab 5: Parallel     13  2018-04-16  12. Recap  Lab 6: Async",
            "title": "Lecture Schedule (Tentative)"
        },
        {
            "location": "/readings/index.html",
            "text": "Readings\n\n\nHere is a collection of readings related to CS2030 or otherwise.\n\n\nOn UNIX, Vim, and Emacs\n\n\n\n\n\n\nStackExchange: \nTime to Drop Emacs and Vim?\n\n\n\n\n\n\nBook: \nThe Art of UNIX Programming\n, online version, by Eric Steven Raymond, 2003. \n\n\n\n\n\n\nOn Programming Practices\n\n\n\n\nGoogle Java Style Guide\n\n\n\n\nOn OOP\n\n\n\n\n\n\nWhy extends is evil\n by Allen Holub. \n\"Good designers write most of their code in terms of interfaces, not concrete base classes.\"\n\n\n\n\n\n\nGoodbye, Object Oriented Programming\n by Charles Scalfani. \n\"One day, my code works and the next day it stops working. Here\u2019s the kicker. I didn\u2019t change my code.\n\"\n\n\n\n\n\n\nWhy getters and setters methods are evil\n, by Allen Holub. \"\nThough getter/setter methods are commonplace in Java, they are not particularly object oriented (OO). In fact, they can damage your code's maintainability. Moreover, the presence of numerous getter and setter methods is a red flag that the program isn't necessarily well designed from an OO perspective.\n\"\n\n\n\n\n\n\nGetters/Setters.  Evil.  Period\n, by Yegor Bygayenko.  \"\nThe gist of the following text is this: getters and setters is a terrible practice and those who use it can't be excused.\n\"\n\n\n\n\n\n\nTell, Don't Ask\n by Thoughtbot Inc. \n\"Good OOP is about telling objects what you want done, not querying an object and acting on its behalf. Data and operations that depend on that data belong in the same object.\"\n\n\n\n\n\n\nTell, Don't Ask\n by The Pragmatic Bookshelf. \n\"Procedural code gets information then makes decisions. Object-oriented code tells objects to do things.\"\n\n\n\n\n\n\nFor 1\nst\n Year Students\n\n\n\n\n\n\nNotes to Computer Science Freshmen, From the Future\n: \nEarly into the AY12/13 academic year, Prof Tay Yong Chiang organized a supper for Computer Science freshmen at Tembusu College. The bunch of seniors who were gathered there put together a document for NUS computing freshmen. This is that document.\n\n\n\n\n\n\nHow Not to Go About a Programming Assignment, by Agustin Cernuda del Rio\n: \nComputer programming students invariably fall into more than one bad habit. It can be extremely difficult to eradicate them (and many lecturers and professional programmers keep succumbing to them time and again)..\n\n\n\n\n\n\nBest Teacher I Ever Had, by David Owen\n: \nMr. Whitson taught sixth-grade science. On the first day of class, he gave us a lecture about a creature called the cattywampus, ..\n\n\n\n\n\n\nAcademic Honesty\n: \nAll students share the responsibility for upholding the academic standards and reputation of the University. Academic honesty is a prerequisite condition in the pursuit and acquisition of knowledge..",
            "title": "Readings"
        },
        {
            "location": "/readings/index.html#readings",
            "text": "Here is a collection of readings related to CS2030 or otherwise.",
            "title": "Readings"
        },
        {
            "location": "/readings/index.html#on-unix-vim-and-emacs",
            "text": "StackExchange:  Time to Drop Emacs and Vim?    Book:  The Art of UNIX Programming , online version, by Eric Steven Raymond, 2003.",
            "title": "On UNIX, Vim, and Emacs"
        },
        {
            "location": "/readings/index.html#on-programming-practices",
            "text": "Google Java Style Guide",
            "title": "On Programming Practices"
        },
        {
            "location": "/readings/index.html#on-oop",
            "text": "Why extends is evil  by Allen Holub.  \"Good designers write most of their code in terms of interfaces, not concrete base classes.\"    Goodbye, Object Oriented Programming  by Charles Scalfani.  \"One day, my code works and the next day it stops working. Here\u2019s the kicker. I didn\u2019t change my code.\n\"    Why getters and setters methods are evil , by Allen Holub. \" Though getter/setter methods are commonplace in Java, they are not particularly object oriented (OO). In fact, they can damage your code's maintainability. Moreover, the presence of numerous getter and setter methods is a red flag that the program isn't necessarily well designed from an OO perspective. \"    Getters/Setters.  Evil.  Period , by Yegor Bygayenko.  \" The gist of the following text is this: getters and setters is a terrible practice and those who use it can't be excused. \"    Tell, Don't Ask  by Thoughtbot Inc.  \"Good OOP is about telling objects what you want done, not querying an object and acting on its behalf. Data and operations that depend on that data belong in the same object.\"    Tell, Don't Ask  by The Pragmatic Bookshelf.  \"Procedural code gets information then makes decisions. Object-oriented code tells objects to do things.\"",
            "title": "On OOP"
        },
        {
            "location": "/readings/index.html#for-1st-year-students",
            "text": "Notes to Computer Science Freshmen, From the Future :  Early into the AY12/13 academic year, Prof Tay Yong Chiang organized a supper for Computer Science freshmen at Tembusu College. The bunch of seniors who were gathered there put together a document for NUS computing freshmen. This is that document.    How Not to Go About a Programming Assignment, by Agustin Cernuda del Rio :  Computer programming students invariably fall into more than one bad habit. It can be extremely difficult to eradicate them (and many lecturers and professional programmers keep succumbing to them time and again)..    Best Teacher I Ever Had, by David Owen :  Mr. Whitson taught sixth-grade science. On the first day of class, he gave us a lecture about a creature called the cattywampus, ..    Academic Honesty :  All students share the responsibility for upholding the academic standards and reputation of the University. Academic honesty is a prerequisite condition in the pursuit and acquisition of knowledge..",
            "title": "For 1st Year Students"
        },
        {
            "location": "/lec01/index.html",
            "text": "Lecture 1: Abstraction and Encapsulation\n\n\nLearning Objectives\n\n\nAfter this lecture, students should:\n\n\n\n\nrecap some fundamental programming concepts, including the execution model of a program, abstractions over code and data, primitive and composite data types.\n\n\nappreciate the importance of maintaining abstraction barrier in software development\n\n\nunderstand the differences between statically and dynamically typed languages\n\n\nunderstand the concepts of object-oriented programming, including encapsulation, data hiding, fields and methods, constructors, mutators/accessors, classes and objects, and their purposes of introducing them as a method of programming.\n\n\nknow the purpose and usage of Java keywords \nclass\n, \npublic\n, \nprivate\n, \nfinal\n, \nstatic\n, \nimport\n, \nnew\n\n\nunderstand that Java is a type-safe language, in contrast to C\n\n\nbe familiar with Java variable and primitive types\n\n\n\n\nWhat Exactly is a \nProgram\n?\n\n\nA program is a set of instructions we issue to computers to manipulate data.  A programming language is a formal language that helps programmers specify precisely what are the instructions we issue to computers, using code that are often made up of keywords, symbols, and names.  Computers execute the instructions in their \nprocessing units\n, and store the instructions and data in their \nmemory\n1\n.  The processing units recognize the instructions based on the specific patterns of bits and manipulate data as a sequence of bits.  A programming language, however, is written at a higher level of \nabstraction\n (i.e., at a higher conceptual level), so that as a programmer, we only need to write a few lines of code to give complex instructions to the computer.  A \ncompiler\n or \ninterpreter\n is responsible for translating these programs written in high level language to \nassembly code\n or \nmachine code\n, i.e., bit patterns that the processing units can understand.\n\n\nThere are thousands of programming languages in existence.  \nC\n is one of the languages that is a \nlow-level language\n -- i.e., it provides a very thin layer of abstractions on top of machine code.  On the other hand, languages such as \nPython\n and \nJavaScript\n are high-level languages.  As an example, in C, you can directly manage memory allocation.  In JavaScript and Python, you cannot.\n\n\nAbstraction: Variable and Type\n\n\nOne of the important abstractions that is provided by a programming language is \nvariable\n.  Data are stored in some location in the computer memory.  But we should not be referring to the memory location all the time.  First, referring to something like \n0xFA49130E\n is not user-friendly; Second, the location may change.  A \nvariable\n is an abstraction that allows us to give a user-friendly name to a piece of data in memory.  We use the \nvariable name\n whenever we want to access the \nvalue\n in that location, and \npointer to the variable\n or \nreference to the variable\n whenever we want to refer to the address of the location.\n\n\nLet's think a bit more about how a sequence of bits is abstracted as data in a programming language.  At the machine level, these bits are just, well, bits.  We give the bits a \nsemantic\n at the program level, e.g., we want to interpret the sequence of bits as numbers, letters, etc.  E.g., the number (integer, to be exact) \n65\n and the letter \nA\n all share the same sequence of bits \n0100 0001\n but are interpreted differently and possibly manipulated differently.  \n\n\nThe \ntype\n of a variable tells the compiler or the interpreter how to interpret the variable and how to manipulate the variable.  \n\n\nFor instance, supposed that in Python, if you have two variables \nx\n and \ny\n storing the values \n4\n and \n5\n respectively, if you \nprint x + y\n, you would get \n45\n if \nx\n and \ny\n are strings; you would get \n9\n if \nx\n and \ny\n are integers; you would get an error if \n4\n is an integer and \n5\n is a string.  \n\n\nIn the last instance above, you see that assigning a type to each variable helps to keep the program meaningful, as the operation \n+\n is not defined over an integer and a string in Python\n2\n.\n\n\nPython is a \ndynamically typed\n language.  The same variable can hold values of different types, and checking if the right type is used is done during the execution of the program.  Note that, the type is associated with the \nvalues\n, and the type of the variable changes depending on the value it holds.\n\n\nC, on the other hand, is a \nstatically typed\n language.  We need to \ndeclare\n every variable we use in the program and specify its type.  A variable can only hold values of the same type as the type of the variable, so we can't assign, for instance, a string to a variable of type \nint\n.  We check if the right type is used during the compilation of the program.\n\n\n1\n2\nint\n \nx\n \n=\n \n4\n;\n \n// ok\n\n\nint\n \ny\n \n=\n \n\"5\"\n;\n \n// error\n\n\n\n\n\n\n\nBy annotating each variable with its type, the C compiler also knows how much memory space is needed to store a variable.  \n\n\nAbstraction: Functions\n\n\nAnother important abstraction provided by a programming language is \nfunction\n (or \nprocedure\n).  This abstraction allows programmers to group a set of instructions and give it a name.  The named set of instructions may take one or more variables as input parameters, and return one or more values.   \n\n\nLike all other abstractions, defining functions allow us to think at a higher conceptual level.  By composing functions at increasingly higher level of abstractions, we can build programs with increasing level of complexity.\n\n\nDefining functions allow us to abstract away the implementation details from the caller.  Once a function is defined, we can change the way the function is implemented without affecting the code that calls the function, as long as the semantic and the \ninterface\n of the function remains the same.\n\n\nFunction, therefore, is a critical mechanism for achieving \nseparation of concerns\n in a program.  We separate the concerns about how a particular function is implemented, from the concerns about how the function is used to perform a higher-level task.\n\n\nDefining functions also allow us to \nreuse\n code.  We do not have to repeatedly write the same chunk of code if we group the sequence of code into a function -- then we just need to call the function to invoke this sequence of code every time we need it.  If this chunk of code is properly written and debugged, then we can be pretty sure that everywhere the function is invoked, the code is correct\n3\n.\n\n\nC is a \nprocedural language\n.  A C program consists of functions, with the \nmain()\n function serves as the entry point to the program.  Since C is a statically typed language, a C function has a return type, and each  function parameter (or \nargument\n) has a type as well.  (Note that this statement does not mean that a C function must return a \nvalue\n.  If the function does not return a value, we define its return type as \nvoid\n.)\n\n\nRecall that the bits representing the instructions are also stored in the computer memory in an area separated from the data.  The instructions that belong to the same function are stored in adjacent memory locations.  Just like we can refer to a variable using its memory address through its \nreference\n (or \npointer\n), we can refer to a function using the memory address of the entry point to the function.\n\n\nAbstraction: Composite Data Type\n\n\nJust like functions allow programmers to group instructions, give it a name, and refer to it later, a \ncomposite data type\n allows programmers to group \nprimitive types\n together, give it a name (a new type), and refer to it later.  This is another powerful abstraction in programming languages that help us to think at a higher conceptual level without worrying about the details.   Commonly used examples are mathematical objects such as complex numbers, 2D data points, multi-dimensional vectors, circles, etc, or every day objects such as a person, a product, etc.\n\n\nDefining composite data type allows programmers to abstract away (and be separated from the concern of) how a complex data type is represented.\n\n\nFor instance, a circle on a 2D plane can be represented by the center (\nx\n, \ny\n) and its radius \nr\n, or it can be represented by the top left corner (\nx\n,\ny\n) and the width \nw\n of the bounding square.\n\n\nIn C, we build composite data type with \nstruct\n.  For example,\n\n\n1\n2\n3\n4\nstruct\n \ncircle\n \n{\n\n  \nfloat\n \nx\n,\n \ny\n;\n \n// (x,y) coordinate of the center.\n\n  \nfloat\n \nr\n;\n \n// radius\n\n\n}\n\n\n\n\n\n\n\nOnce we have the \nstruct\n defined, we are not completely shielded from its representation, until we write a set of functions that operates on the \ncircle\n composite type.  For instance,\n\n\n1\n2\n3\nfloat\n \ncircle_area\n(\ncircle\n \nc\n)\n \n{\n \n...\n \n};\n\n\nbool\n  \ncircle_contains_point\n(\ncircle\n \nc\n,\n \npoint\n \np\n)\n \n{\n \n...\n \n};\n\n  \n:\n\n\n\n\n\n\n\nImplementing these functions obviously requires the knowledge of how a circle is represented.  Once the set of functions that operates on and manipulates circles is available, we can use \ncircle\n type without worrying about the internal representation.  \n\n\nIf we decide to change the representation of a circle, then only the set of functions that operates on a circle type need to be changed, but not the code that uses circles to do other things.\n\n\nWe can imagine an \nabstraction barrier\n between the code that uses a composite data type along with its associated set of functions, and the code that define the data type along with the implementation of the functions.  Above the barrier, the concern is about using the composite data type to do useful things, while below the barrier, the concern is about how to represent and manipulate the composite data type.\n\n\nWhile many of you are used to writing a program solo, in practice, you rarely write a program with contributions from a single person.  The abstraction barrier separates the role of the programmer into two: (i) an \nimplementer\n, which define that data type and provide the implementation, and (ii) a \nclient\n, which uses the composite data type to perform a higher level task\n4\n.  Part of my aim in CS2030 is to switch your mindset into thinking in terms of these two roles.  Note that the implementer and the client may very well be the same programmer.\n\n\nAbstraction: Class and Object (or, Encapsulation)\n\n\nWe can further bundle the composite data type and its associated functions together in another abstraction, called a \nclass\n.  A class is a data type with a group of functions associated with it.  We call the functions as \nmethods\n and the data in the class as \nfields\n (or \nmembers\n, or \nstates\n, or \nattributes\n4\n).   A well-designed class maintains the abstraction barrier, properly wraps the barrier around the internal representation and implementation, and exposes just the right \ninterface\n for others to use.\n\n\nJust like we can create variables of a given type, we can create \nobjects\n of a given class.  Objects are \ninstances\n of a class, each allowing the same methods to be called, and each containing the same set of variables of the same types, but (possibly) storing different values.\n\n\nRecall that programs written in a procedural language such as a C consists of functions, with a \nmain()\n function as the entry point.  A program written in an \nobject-oriented language\n such as Java consists of classes, with one main class as the entry point.  One can view a running object-oriented (or OO) program as something that instantiates objects of different classes and orchestrates their interactions with each other by calling each others' methods.\n\n\nOne could argue that an object-oriented way of writing programs is much more natural, as it mirrors our world more closely.  If we look around us, we see objects all around us, and each object has certain properties, exhibit certain behavior, and they allow certain actions.  We interact with the objects through their interfaces, and we rarely need to know the internals of the objects we used everyday (unless we try to repair it)\n5\n.  \n\n\nThe concept of keeping all the data and functions operating on the data related to a composite data type together within an abstraction barrier is called \nencapsulation\n.\n\n\nBreaking the Abstraction Barrier\n\n\nIn the ideal case, the code above the abstraction barrier would just call the provided interface to use the composite data type.  There, however, may be cases where a programmer may intentionally or accidentally break the abstraction barrier.  \n\n\nConsider the case of implementing \ncircle\n as a C \nstruct\n.  Suppose someone wants to move the center of the circle \nc\n to a new position (\nx\n, \ny\n), instead of implementing a function \ncircle_move_to(c, x, y)\n (which would still keep the representation used under the barrier), the person wrote:\n\n\n1\n2\nc\n.\nx\n \n=\n \nx\n;\n\n\nc\n.\ny\n \n=\n \ny\n;\n\n\n\n\n\n\n\nThis code would still be correct, but the abstraction barrier is broken since we now make explicit assumption that there are two variables \nx\n and \ny\n inside the \ncircle\n data type that corresponds to the center of the circle.  If one day, we want to represent a circle differently, then we have to carefully change all the code that read and write these variables \nx\n and \ny\n and update them.\n\n\n\n\nBreaking Python's Abstraction Barrier\n\n\nPython tries to prevent \naccidental\n access to internal representation by having a convention of prefixing the internal variables with \n_\n (one underscore) or \n__\n (two underscores).   This method, however, does not prevent a lazy programmer from directly accessing the variables and possibly planting a bug/error that will surface later.\n\n\n\n\nData Hiding\n\n\nMany OO languages allow programmers to explicitly specify if a field or a method can be accessed from outside the abstraction barrier.  Java, for instance, supports \nprivate\n and \npublic\n access modifiers\n5\n.  A field or a method that is declared as \nprivate\n cannot be accessed from outside the class, and can only be accessed within the class.  On the other hand, as you can guess, a \npublic\n field or method can be accessed, modified, or invoked from outside the class.\n\n\nSuch mechanism to protect the abstraction barrier from being broken is called \ndata hiding\n or \ninformation hiding\n.  This protection is enforced by the \ncompiler\n at compile time.\n\n\nExample: The Circle class\n\n\nLet's put together the concepts of encapsulation and data hiding to define a \nCircle\n class in Java:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n/**\n\n\n * A Circle object encapsulates a circle on a 2D plane.  \n\n\n */\n\n\nclass\n \nCircle\n \n{\n\n  \nprivate\n \ndouble\n \nx\n;\n  \n// x-coordinate of the center\n\n  \nprivate\n \ndouble\n \ny\n;\n  \n// y-coordinate of the center\n\n  \nprivate\n \ndouble\n \nr\n;\n  \n// the length of the radius\n\n\n  \n/**\n\n\n   * Return the area of the circle.\n\n\n   */\n\n  \npublic\n \ndouble\n \ngetArea\n()\n \n{\n\n    \nreturn\n \n3.1415926\n \n*\n \nr\n \n*\n \nr\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Move the center of the circle to the new position (newX, newY)\n\n\n   */\n\n  \npublic\n \nvoid\n \nmoveTo\n(\ndouble\n \nnewX\n,\n \ndouble\n \nnewY\n)\n \n{\n\n    \nx\n \n=\n \nnewX\n;\n\n    \ny\n \n=\n \nnewY\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nHere, we define \nx\n, \ny\n, and \nr\n as three private fields inside the class \nCircle\n.  Note that these fields are not accessible and modifiable outside of the class \nCircle\n, but they can be accessed and modified within \nCircle\n (inside the abstraction barrier), such as in the methods \ngetArea\n and \nmoveTo\n.\n\n\nConstructors, Accessors, and Mutators\n\n\nWith data hiding, we completely isolate the internal representation of a class using an abstraction barrier.  With no way for the user of the class to modify the fields directly, it is common for a class to provide methods to initialize and modify these internal fields (such as the \nmoveTo()\n method above).  A method that initializes an object is called a \nconstructor\n, and a method that retrieves or modifies the properties of the object is called the \naccessor\n (or \ngetter\n) or \nmutator\n (or \nsetter\n).\n\n\nA constructor method is a special method within the class.  It cannot be called directly but is invoked automatically when an object is instantiated.   In Java, a constructor method \nhas the same name as the class\n and \nhas no return type\n.  A constructor can take in arguments just like other functions.  The class \nCircle\n can have a constructor such as the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nclass\n \nCircle\n \n{\n\n    \n:\n\n  \n/**\n\n\n   * Create a circle centered on (centerX, centerY) with given radius\n\n\n  */\n\n  \npublic\n \nCircle\n(\ndouble\n \ncenterX\n,\n \ndouble\n \ncenterY\n,\n \ndouble\n \nradius\n)\n \n{\n\n    \nx\n \n=\n \ncenterX\n;\n\n    \ny\n \n=\n \ncenterY\n;\n\n    \nr\n \n=\n \nradius\n;\n\n  \n}\n\n    \n:\n\n\n}\n\n\n\n\n\n\n\nThe use of accessor and mutator methods is a bit controversial.   Suppose that we provide an accessor method and a mutator method for every private field, then we are actually exposing the internal representation, therefore breaking the encapsulation.  For instance:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\nclass\n \nCircle\n \n{\n\n    \n:\n\n\n  \npublic\n \ndouble\n \ngetX\n()\n \n{\n\n    \nreturn\n \nx\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nsetX\n(\ndouble\n \nnewX\n)\n \n{\n\n    \nx\n \n=\n \nnewX\n;\n\n  \n}\n\n\n  \npublic\n \ndouble\n \ngetY\n()\n \n{\n\n    \nreturn\n \ny\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nsetY\n(\ndouble\n \nnewY\n)\n \n{\n\n    \ny\n \n=\n \nnewY\n:\n\n  \n}\n\n\n  \npublic\n \ndouble\n \ngetR\n()\n \n{\n\n    \nreturn\n \nr\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nsetR\n(\ndouble\n \nnewR\n)\n \n{\n\n    \nr\n \n=\n \nnewR\n;\n\n  \n}\n\n    \n:\n\n\n}\n\n\n\n\n\n\n\nThe examples above are pretty pointless.  If we need to know the internal and do something with it, we are doing it wrong.  The right approach is to implement a method within the class that do whatever we want the class to do.   For instance, suppose that we want to know the circumference of the circle \nc\n, one approach would be:\n\n\n1\n   \ndouble\n \ncircumference\n \n=\n \n2\n*\nc\n.\ngetR\n()*\n3.1415926\n;\n\n\n\n\n\n\n\nwhere \nc\n is a \nCircle\n object.\n\n\nA better approach would be to add a new method \ngetCircumference()\n in the \nCircle\n class, and call it instead:\n\n1\n   \ndouble\n \ncircumference\n \n=\n \nc\n.\ngetCircumference\n();\n\n\n\n\n\n\nThe better approach involves writing a few more lines of code to implement the method, but it keeps the encapsulation intact.  If one fine day, the implementer of \nCircle\n decided to store the diameter of the circle instead of the radius, then only the implementer needs to change the implementation of \ngetCircumference\n.  The client does not have to change anything.  \n\n\n\n\nConstructor in Python and JavaScript\n\n\nIn Python, the constructor is the \n__init__\n method.   In JavaScript, the constructor is simply called \nconstructor\n.\n\n\n\n\nClass Fields and Methods\n\n\nLet's look at the implementation of \ngetArea()\n above.  We use the constant \n\\(\\pi\\)\n but hardcoded it as 3.1415926.  Hardcoding such a magic number is a \nno-no\n in terms of coding style.  This constant can appear in more than one places. If we hardcode such a number and want to change its precision later, we would need to trace down and change every occurrence.  Every time we need to use \n\\(\\pi\\)\n, we have to remember or look up what is the precision that we use.  Not only does this practice introduce more work, it is also likely to introduce bugs.  \n\n\nIn C, we define \n\\(\\pi\\)\n as a macro constant \nM_PI\n.  But how should we do this in Java?  This is where the ideal that a program consists of only objects with internal states that communicate with each other feel a bit constraining.  The constant \n\\(\\pi\\)\n is universal, and does not really belong to any object (the value of \n\\(\\pi\\)\n is the same for every circle!).  Another example: if we define a method \nsqrt()\n that computes the square root of a given number, this is a general function that is not associated with any object as well.\n\n\nA solution to this is to associate these \nglobal\n values and functions with a \nclass\n instead of with an \nobject\n.  For instance. Java predefines a \nMath\n class\n6\n that is populated with constants \nPI\n and \nE\n (for Euler's number \n\\(e\\)\n), along with a long list of mathematical functions.  To associate a method or a field with a class in Java, we declare them with the \nstatic\n keyword.  We can additionally add a keyword \nfinal\n to indicate that the value of the field will not change\n7\n.\n\n\n1\n2\n3\n4\n5\n6\nclass\n \nMath\n \n{\n\n  \n:\n\n  \npublic\n \nstatic\n \nfinal\n \ndouble\n \nPI\n \n=\n \n3.141592653589793\n;\n\n  \n:\n\n  \n:\n\n\n}\n\n\n\n\n\n\n\nWe call these fields and methods that are associated with a class as \nclass fields\n and \nclass methods\n, and fields and methods that are associated with an object as \ninstance fields\n and \ninstance methods\n.\n\n\n\n\nClass Fields and Methods in Python\n\n\nNote that, in Python, any variable declared within a \nclass\n block is a class field:\n\n1\n2\n3\nclass\n \nCircle\n:\n\n  \nx\n \n=\n \n0\n\n  \ny\n \n=\n \n0\n\n\n\n\n\nIn the above example, \nx\n and \ny\n are class fields, not instance fields.\n\n\n\n\nExample: The Circle class\n\n\nNow, let revise our \nCircle\n class to improve the code and make it a little more complete:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\nimport\n \njava.lang.Math\n;\n\n\n\n/**\n\n\n * A Circle object encapsulates a circle on a 2D plane.  \n\n\n */\n\n\nclass\n \nCircle\n \n{\n\n  \nprivate\n \ndouble\n \nx\n;\n  \n// x-coordinate of the center\n\n  \nprivate\n \ndouble\n \ny\n;\n  \n// y-coordinate of the center\n\n  \nprivate\n \ndouble\n \nr\n;\n  \n// the length of the radius\n\n\n  \n/**\n\n\n   * Create a circle centered on (centerX, centerY) with given radius\n\n\n  */\n\n  \npublic\n \nCircle\n(\ndouble\n \ncenterX\n,\n \ndouble\n \ncenterY\n,\n \ndouble\n \nradius\n)\n \n{\n\n    \nx\n \n=\n \ncenterX\n;\n\n    \ny\n \n=\n \ncenterY\n;\n\n    \nr\n \n=\n \nradius\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Return the area of the circle.\n\n\n   */\n\n  \npublic\n \ndouble\n \ngetArea\n()\n \n{\n\n    \nreturn\n \nMath\n.\nPI\n*\nr\n*\nr\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Return the circumference of the circle.\n\n\n   */\n\n  \npublic\n \ndouble\n \ngetCircumference\n()\n \n{\n\n    \nreturn\n \nMath\n.\nPI\n*\n2\n*\nr\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Move the center of the circle to the new position (newX, newY)\n\n\n   */\n\n  \npublic\n \nvoid\n \nmoveTo\n(\ndouble\n \nnewX\n,\n \ndouble\n \nnewY\n)\n \n{\n\n    \nx\n \n=\n \nnewX\n;\n\n    \ny\n \n=\n \nnewY\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Return true if the given point (testX, testY) is within the circle.\n\n\n   */\n\n  \npublic\n \nboolean\n \ncontains\n(\ndouble\n \ntestX\n,\n \ndouble\n \ntestY\n)\n \n{\n\n    \nreturn\n \nfalse\n;\n\n    \n// TODO: left as an exercise  \n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nCreating and Interacting with \nCircle\n objects\n\n\nTo use the \nCircle\n class, we can either:\n\n\n\n\ncreate a \nmain()\n function, compile and link with the \nCircle\n class, and create an executable program, just like we usually do with a C program, OR\n\n\nuse \njshell\n, which is part of Java 9 (but not earlier versions). \njshell\n provides a \nread-evaluate-print loop\n (REPL) to help us quickly try out various features of Java.\n\n\n\n\nWe will write a complete Java program with \nmain()\n later in this class, but for now, we will use \njshell\n to demonstrate the various language features of Java\n7\n.\n\n\nThe demonstration below loads the \nCircle\n class written above (with the \ncontains\n method completed) from a file named \nCircle.java\n8\n, and creates two \nCircle\n objects, \nc1\n and \nc2\n.  We use the \nnew\n keyword to tell Java to create an object of type \nCircle\n here, passing in the center and the radius.\n\n\n1\nCircle\n \nc1\n \n=\n \nnew\n \nCircle\n(\n0\n,\n \n0\n,\n \n100\n);\n\n\n\n\n\n\n\n\n\n\nReference Type vs. Primitive Type\n\n\nThe variable \nc1\n actually stores an abstraction over a \nreference\n to the Circle object, instead of the object itself.\n\nAll objects are stored as references in Java\n.\n\n\nThe other variable type supported in Java is \nprimitive\n type.  A variable of primitive type stores the \nvalue\n instead of a reference to the value.\nJava supports eight \nprimitive\n data types: \nbyte\n, \nshort\n, \nint\n, \nlong\n, \nfloat\n, \ndouble\n, \nboolean\n and \nchar\n.  If you are familiar with C, these data types should not be foreign to you.  One important difference is that a \nchar\n variable stores a 16-bit Unicode character, not an 8-bit character like in C.  Java uses the type \nbyte\n for that.  The other notable difference is that Java defines \ntrue\n and \nfalse\n as possible value to a \nboolean\n, unlike C which uses \n0\n for false and non-\n0\n for true.  \n\n\nYou can read all about Java \nvariables\n and \nprimitive data types\n in Oracle's Java Tutorial.\n\n\nType Safety\n\n\nSome languages are stricter in terms of type \"compatibility\" than others.  C compilers, however, are not very strict.  If it detects something strange with the type you used, it will issue a warning, but still let your code compiles and runs.\n\n\nTake:\n\n\n1\n2\n3\n4\n5\n#include\n \n<stdio.h>\n\n\nint\n \nmain\n()\n\n\n{\n\n    \nprintf\n(\n\"%d\n\\n\n\"\n,\n \n\"cs2030\"\n);\n\n\n}\n\n\n\n\n\n\n\nIn Line 4, we treat the address to a string as integer.  This generates a compiler's warning.\n\n\nIn C, you can \ntype cast\n a variable from one type into another, i.e., force the compiler to treat a variable of one type as another type.  The compiler would listen and do that for you.  The following code would print out gibberish and would compile perfectly without error.\n\n\n1\n2\n3\n4\n5\n#include\n \n<stdio.h>\n\n\nint\n \nmain\n()\n\n\n{\n\n    \nprintf\n(\n\"%d\n\\n\n\"\n,\n \n(\nint\n)\n\"cs2030\"\n);\n\n\n}\n\n\n\n\n\n\n\nSuch flexibility and loose rules for type compatibility could be useful, if you know what you are doing, but for most programmers, it could be a major source of unintentional bugs, especially if one does not pay attention to compiler's warning or one forces the warning to go away without fully understanding what is going on.\n\n\nJava is very strict when it comes to type checking, and is one of the \ntype-safe\n languages. Java ensures that basic operations (such as \n+\n, \n-\n, etc) and method calls apply to values in a way that makes sense.  If you try to pull the same trick as above, you will receive an error:\n\n\n\n\n\nExercise\n\n\n\n\n\n\nIn the example above, we implemented a class \nCircle\n.  There, we store and pass around two \ndouble\n variables that correspond to the x-coordinate and y-coordinate of a point.  The code would be neater if we create a second class \nPoint\n that encapsulates the concept of a point on a 2D plane and the operations on points.\n\n\nImplement a new class \nPoint\n and modify the class \nCircle\n to use the class \nPoint\n.  Pay attention to what methods and fields (if any) you expose as \npublic\n outside of the abstraction barrier of a \nPoint\n object.\n\n\nYou will need to use \njshell\n from Java 1.9 (or JDK 9) to interact with your new classes.\n\n\n\n\n\n\nUse \njshell\n to try out the following.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nclass\n \nA\n \n{\n\n    \npublic\n \nstatic\n \nint\n \nx\n \n=\n \n1\n;\n\n    \npublic\n \nint\n \ny\n \n=\n \n5\n;\n\n\n    \nvoid\n \nincrX\n()\n \n{\n\n        \nx\n \n=\n \nx\n \n+\n \n1\n;\n\n    \n}\n\n\n    \nvoid\n \nincrY\n()\n \n{\n\n        \ny\n \n=\n \ny\n \n+\n \n1\n;\n\n    \n}\n\n\n}\n\n\n\nA\n \na1\n \n=\n \nnew\n \nA\n();\n\n\nA\n \na2\n \n=\n \nnew\n \nA\n();\n\n\n\n\n\n\n\nAfter executing \na1.x = 10\n, what is the value of \na2.x\n?\n\n\nAfter executing \na1.y = 10\n, what is the value of \na2.y\n?\n\n\nIs \nA.x = 3\n a valid statement?  Is \nA.y = 3\n a valid statement?  \n\n\nNote: Even though \na1.x\n is valid, it is considered a bad programming practice to access a class field through an instance variable (e.g., \na1.x\n).  The proper way to do it is to use the class name \nA.x\n).\n\n\n\n\n\n\nConsider the following two classes:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nclass\n \nA\n \n{\n\n    \nprivate\n \nint\n \nx\n;\n\n  \npublic\n \nvoid\n \nchangeSelf\n()\n \n{\n\n    \nx\n \n=\n \n1\n;\n\n  \n}\n\n  \npublic\n \nvoid\n \nchangeAnother\n(\nA\n \na\n)\n \n{\n\n    \na\n.\nx\n \n=\n \n1\n;\n\n  \n}\n\n\n\n}\n\n\n\nclass\n \nB\n \n{\n\n    \npublic\n \nvoid\n \nchangeAnother\n(\nA\n \na\n)\n \n{\n\n        \na\n.\nx\n \n=\n \n1\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nWhich line(s) above violate the \nprivate\n access modifier of \nx\n?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOften, the instructions and data are stored in different regions of the memory.\u00a0\n\u21a9\n\n\n\n\n\n\nJavascript would happily convert \n4\n into a string for you, and return \n45\n.\u00a0\n\u21a9\n\n\n\n\n\n\nassuming the parameters are passed correctly.\u00a0\n\u21a9\n\n\n\n\n\n\nComputer scientists just can't decide on what to call this!\u00a0\n\u21a9\n\u21a9\n\n\n\n\n\n\nOthers include \nprotected\n and the \ndefault\n modifier.  For beginners, it is better that we explicitly specify something as \nprivate\n or \npublic\n.\u00a0\n\u21a9\n\u21a9\n\n\n\n\n\n\nThe class \nMath\n is provided by the package \njava.lang\n in Java.  A package is simply a set of related classes (and interfaces, but I have not told you what is an interface yet).  To use this class, we need to add the line \nimport\n \njava.lang.Math\n at the beginning of our program.\u00a0\n\u21a9\n\n\n\n\n\n\nYou can download and install \njshell\n yourself, as part of \nJava Development Kit version 9 (JDK 9)\n\u00a0\n\u21a9\n\u21a9\n\n\n\n\n\n\nWe use the convention of one public class per file, name the file with the exact name of the class (including capitalization), and include the extension \n.java\n to the filename.\u00a0\n\u21a9",
            "title": "1. Abstraction & Encapsulation"
        },
        {
            "location": "/lec01/index.html#lecture-1-abstraction-and-encapsulation",
            "text": "",
            "title": "Lecture 1: Abstraction and Encapsulation"
        },
        {
            "location": "/lec01/index.html#learning-objectives",
            "text": "After this lecture, students should:   recap some fundamental programming concepts, including the execution model of a program, abstractions over code and data, primitive and composite data types.  appreciate the importance of maintaining abstraction barrier in software development  understand the differences between statically and dynamically typed languages  understand the concepts of object-oriented programming, including encapsulation, data hiding, fields and methods, constructors, mutators/accessors, classes and objects, and their purposes of introducing them as a method of programming.  know the purpose and usage of Java keywords  class ,  public ,  private ,  final ,  static ,  import ,  new  understand that Java is a type-safe language, in contrast to C  be familiar with Java variable and primitive types",
            "title": "Learning Objectives"
        },
        {
            "location": "/lec01/index.html#what-exactly-is-a-program",
            "text": "A program is a set of instructions we issue to computers to manipulate data.  A programming language is a formal language that helps programmers specify precisely what are the instructions we issue to computers, using code that are often made up of keywords, symbols, and names.  Computers execute the instructions in their  processing units , and store the instructions and data in their  memory 1 .  The processing units recognize the instructions based on the specific patterns of bits and manipulate data as a sequence of bits.  A programming language, however, is written at a higher level of  abstraction  (i.e., at a higher conceptual level), so that as a programmer, we only need to write a few lines of code to give complex instructions to the computer.  A  compiler  or  interpreter  is responsible for translating these programs written in high level language to  assembly code  or  machine code , i.e., bit patterns that the processing units can understand.  There are thousands of programming languages in existence.   C  is one of the languages that is a  low-level language  -- i.e., it provides a very thin layer of abstractions on top of machine code.  On the other hand, languages such as  Python  and  JavaScript  are high-level languages.  As an example, in C, you can directly manage memory allocation.  In JavaScript and Python, you cannot.",
            "title": "What Exactly is a Program?"
        },
        {
            "location": "/lec01/index.html#abstraction-variable-and-type",
            "text": "One of the important abstractions that is provided by a programming language is  variable .  Data are stored in some location in the computer memory.  But we should not be referring to the memory location all the time.  First, referring to something like  0xFA49130E  is not user-friendly; Second, the location may change.  A  variable  is an abstraction that allows us to give a user-friendly name to a piece of data in memory.  We use the  variable name  whenever we want to access the  value  in that location, and  pointer to the variable  or  reference to the variable  whenever we want to refer to the address of the location.  Let's think a bit more about how a sequence of bits is abstracted as data in a programming language.  At the machine level, these bits are just, well, bits.  We give the bits a  semantic  at the program level, e.g., we want to interpret the sequence of bits as numbers, letters, etc.  E.g., the number (integer, to be exact)  65  and the letter  A  all share the same sequence of bits  0100 0001  but are interpreted differently and possibly manipulated differently.    The  type  of a variable tells the compiler or the interpreter how to interpret the variable and how to manipulate the variable.    For instance, supposed that in Python, if you have two variables  x  and  y  storing the values  4  and  5  respectively, if you  print x + y , you would get  45  if  x  and  y  are strings; you would get  9  if  x  and  y  are integers; you would get an error if  4  is an integer and  5  is a string.    In the last instance above, you see that assigning a type to each variable helps to keep the program meaningful, as the operation  +  is not defined over an integer and a string in Python 2 .  Python is a  dynamically typed  language.  The same variable can hold values of different types, and checking if the right type is used is done during the execution of the program.  Note that, the type is associated with the  values , and the type of the variable changes depending on the value it holds.  C, on the other hand, is a  statically typed  language.  We need to  declare  every variable we use in the program and specify its type.  A variable can only hold values of the same type as the type of the variable, so we can't assign, for instance, a string to a variable of type  int .  We check if the right type is used during the compilation of the program.  1\n2 int   x   =   4 ;   // ok  int   y   =   \"5\" ;   // error    By annotating each variable with its type, the C compiler also knows how much memory space is needed to store a variable.",
            "title": "Abstraction: Variable and Type"
        },
        {
            "location": "/lec01/index.html#abstraction-functions",
            "text": "Another important abstraction provided by a programming language is  function  (or  procedure ).  This abstraction allows programmers to group a set of instructions and give it a name.  The named set of instructions may take one or more variables as input parameters, and return one or more values.     Like all other abstractions, defining functions allow us to think at a higher conceptual level.  By composing functions at increasingly higher level of abstractions, we can build programs with increasing level of complexity.  Defining functions allow us to abstract away the implementation details from the caller.  Once a function is defined, we can change the way the function is implemented without affecting the code that calls the function, as long as the semantic and the  interface  of the function remains the same.  Function, therefore, is a critical mechanism for achieving  separation of concerns  in a program.  We separate the concerns about how a particular function is implemented, from the concerns about how the function is used to perform a higher-level task.  Defining functions also allow us to  reuse  code.  We do not have to repeatedly write the same chunk of code if we group the sequence of code into a function -- then we just need to call the function to invoke this sequence of code every time we need it.  If this chunk of code is properly written and debugged, then we can be pretty sure that everywhere the function is invoked, the code is correct 3 .  C is a  procedural language .  A C program consists of functions, with the  main()  function serves as the entry point to the program.  Since C is a statically typed language, a C function has a return type, and each  function parameter (or  argument ) has a type as well.  (Note that this statement does not mean that a C function must return a  value .  If the function does not return a value, we define its return type as  void .)  Recall that the bits representing the instructions are also stored in the computer memory in an area separated from the data.  The instructions that belong to the same function are stored in adjacent memory locations.  Just like we can refer to a variable using its memory address through its  reference  (or  pointer ), we can refer to a function using the memory address of the entry point to the function.",
            "title": "Abstraction: Functions"
        },
        {
            "location": "/lec01/index.html#abstraction-composite-data-type",
            "text": "Just like functions allow programmers to group instructions, give it a name, and refer to it later, a  composite data type  allows programmers to group  primitive types  together, give it a name (a new type), and refer to it later.  This is another powerful abstraction in programming languages that help us to think at a higher conceptual level without worrying about the details.   Commonly used examples are mathematical objects such as complex numbers, 2D data points, multi-dimensional vectors, circles, etc, or every day objects such as a person, a product, etc.  Defining composite data type allows programmers to abstract away (and be separated from the concern of) how a complex data type is represented.  For instance, a circle on a 2D plane can be represented by the center ( x ,  y ) and its radius  r , or it can be represented by the top left corner ( x , y ) and the width  w  of the bounding square.  In C, we build composite data type with  struct .  For example,  1\n2\n3\n4 struct   circle   { \n   float   x ,   y ;   // (x,y) coordinate of the center. \n   float   r ;   // radius  }    Once we have the  struct  defined, we are not completely shielded from its representation, until we write a set of functions that operates on the  circle  composite type.  For instance,  1\n2\n3 float   circle_area ( circle   c )   {   ...   };  bool    circle_contains_point ( circle   c ,   point   p )   {   ...   }; \n   :    Implementing these functions obviously requires the knowledge of how a circle is represented.  Once the set of functions that operates on and manipulates circles is available, we can use  circle  type without worrying about the internal representation.    If we decide to change the representation of a circle, then only the set of functions that operates on a circle type need to be changed, but not the code that uses circles to do other things.  We can imagine an  abstraction barrier  between the code that uses a composite data type along with its associated set of functions, and the code that define the data type along with the implementation of the functions.  Above the barrier, the concern is about using the composite data type to do useful things, while below the barrier, the concern is about how to represent and manipulate the composite data type.  While many of you are used to writing a program solo, in practice, you rarely write a program with contributions from a single person.  The abstraction barrier separates the role of the programmer into two: (i) an  implementer , which define that data type and provide the implementation, and (ii) a  client , which uses the composite data type to perform a higher level task 4 .  Part of my aim in CS2030 is to switch your mindset into thinking in terms of these two roles.  Note that the implementer and the client may very well be the same programmer.",
            "title": "Abstraction: Composite Data Type"
        },
        {
            "location": "/lec01/index.html#abstraction-class-and-object-or-encapsulation",
            "text": "We can further bundle the composite data type and its associated functions together in another abstraction, called a  class .  A class is a data type with a group of functions associated with it.  We call the functions as  methods  and the data in the class as  fields  (or  members , or  states , or  attributes 4 ).   A well-designed class maintains the abstraction barrier, properly wraps the barrier around the internal representation and implementation, and exposes just the right  interface  for others to use.  Just like we can create variables of a given type, we can create  objects  of a given class.  Objects are  instances  of a class, each allowing the same methods to be called, and each containing the same set of variables of the same types, but (possibly) storing different values.  Recall that programs written in a procedural language such as a C consists of functions, with a  main()  function as the entry point.  A program written in an  object-oriented language  such as Java consists of classes, with one main class as the entry point.  One can view a running object-oriented (or OO) program as something that instantiates objects of different classes and orchestrates their interactions with each other by calling each others' methods.  One could argue that an object-oriented way of writing programs is much more natural, as it mirrors our world more closely.  If we look around us, we see objects all around us, and each object has certain properties, exhibit certain behavior, and they allow certain actions.  We interact with the objects through their interfaces, and we rarely need to know the internals of the objects we used everyday (unless we try to repair it) 5 .    The concept of keeping all the data and functions operating on the data related to a composite data type together within an abstraction barrier is called  encapsulation .",
            "title": "Abstraction: Class and Object (or, Encapsulation)"
        },
        {
            "location": "/lec01/index.html#breaking-the-abstraction-barrier",
            "text": "In the ideal case, the code above the abstraction barrier would just call the provided interface to use the composite data type.  There, however, may be cases where a programmer may intentionally or accidentally break the abstraction barrier.    Consider the case of implementing  circle  as a C  struct .  Suppose someone wants to move the center of the circle  c  to a new position ( x ,  y ), instead of implementing a function  circle_move_to(c, x, y)  (which would still keep the representation used under the barrier), the person wrote:  1\n2 c . x   =   x ;  c . y   =   y ;    This code would still be correct, but the abstraction barrier is broken since we now make explicit assumption that there are two variables  x  and  y  inside the  circle  data type that corresponds to the center of the circle.  If one day, we want to represent a circle differently, then we have to carefully change all the code that read and write these variables  x  and  y  and update them.   Breaking Python's Abstraction Barrier  Python tries to prevent  accidental  access to internal representation by having a convention of prefixing the internal variables with  _  (one underscore) or  __  (two underscores).   This method, however, does not prevent a lazy programmer from directly accessing the variables and possibly planting a bug/error that will surface later.",
            "title": "Breaking the Abstraction Barrier"
        },
        {
            "location": "/lec01/index.html#data-hiding",
            "text": "Many OO languages allow programmers to explicitly specify if a field or a method can be accessed from outside the abstraction barrier.  Java, for instance, supports  private  and  public  access modifiers 5 .  A field or a method that is declared as  private  cannot be accessed from outside the class, and can only be accessed within the class.  On the other hand, as you can guess, a  public  field or method can be accessed, modified, or invoked from outside the class.  Such mechanism to protect the abstraction barrier from being broken is called  data hiding  or  information hiding .  This protection is enforced by the  compiler  at compile time.",
            "title": "Data Hiding"
        },
        {
            "location": "/lec01/index.html#example-the-circle-class",
            "text": "Let's put together the concepts of encapsulation and data hiding to define a  Circle  class in Java:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 /**   * A Circle object encapsulates a circle on a 2D plane.     */  class   Circle   { \n   private   double   x ;    // x-coordinate of the center \n   private   double   y ;    // y-coordinate of the center \n   private   double   r ;    // the length of the radius \n\n   /**     * Return the area of the circle.     */ \n   public   double   getArea ()   { \n     return   3.1415926   *   r   *   r ; \n   } \n\n   /**     * Move the center of the circle to the new position (newX, newY)     */ \n   public   void   moveTo ( double   newX ,   double   newY )   { \n     x   =   newX ; \n     y   =   newY ; \n   }  }    Here, we define  x ,  y , and  r  as three private fields inside the class  Circle .  Note that these fields are not accessible and modifiable outside of the class  Circle , but they can be accessed and modified within  Circle  (inside the abstraction barrier), such as in the methods  getArea  and  moveTo .",
            "title": "Example: The Circle class"
        },
        {
            "location": "/lec01/index.html#constructors-accessors-and-mutators",
            "text": "With data hiding, we completely isolate the internal representation of a class using an abstraction barrier.  With no way for the user of the class to modify the fields directly, it is common for a class to provide methods to initialize and modify these internal fields (such as the  moveTo()  method above).  A method that initializes an object is called a  constructor , and a method that retrieves or modifies the properties of the object is called the  accessor  (or  getter ) or  mutator  (or  setter ).  A constructor method is a special method within the class.  It cannot be called directly but is invoked automatically when an object is instantiated.   In Java, a constructor method  has the same name as the class  and  has no return type .  A constructor can take in arguments just like other functions.  The class  Circle  can have a constructor such as the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 class   Circle   { \n     : \n   /**     * Create a circle centered on (centerX, centerY) with given radius    */ \n   public   Circle ( double   centerX ,   double   centerY ,   double   radius )   { \n     x   =   centerX ; \n     y   =   centerY ; \n     r   =   radius ; \n   } \n     :  }    The use of accessor and mutator methods is a bit controversial.   Suppose that we provide an accessor method and a mutator method for every private field, then we are actually exposing the internal representation, therefore breaking the encapsulation.  For instance:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28 class   Circle   { \n     : \n\n   public   double   getX ()   { \n     return   x ; \n   } \n\n   public   void   setX ( double   newX )   { \n     x   =   newX ; \n   } \n\n   public   double   getY ()   { \n     return   y ; \n   } \n\n   public   void   setY ( double   newY )   { \n     y   =   newY : \n   } \n\n   public   double   getR ()   { \n     return   r ; \n   } \n\n   public   void   setR ( double   newR )   { \n     r   =   newR ; \n   } \n     :  }    The examples above are pretty pointless.  If we need to know the internal and do something with it, we are doing it wrong.  The right approach is to implement a method within the class that do whatever we want the class to do.   For instance, suppose that we want to know the circumference of the circle  c , one approach would be:  1     double   circumference   =   2 * c . getR ()* 3.1415926 ;    where  c  is a  Circle  object.  A better approach would be to add a new method  getCircumference()  in the  Circle  class, and call it instead: 1     double   circumference   =   c . getCircumference ();    The better approach involves writing a few more lines of code to implement the method, but it keeps the encapsulation intact.  If one fine day, the implementer of  Circle  decided to store the diameter of the circle instead of the radius, then only the implementer needs to change the implementation of  getCircumference .  The client does not have to change anything.     Constructor in Python and JavaScript  In Python, the constructor is the  __init__  method.   In JavaScript, the constructor is simply called  constructor .",
            "title": "Constructors, Accessors, and Mutators"
        },
        {
            "location": "/lec01/index.html#class-fields-and-methods",
            "text": "Let's look at the implementation of  getArea()  above.  We use the constant  \\(\\pi\\)  but hardcoded it as 3.1415926.  Hardcoding such a magic number is a  no-no  in terms of coding style.  This constant can appear in more than one places. If we hardcode such a number and want to change its precision later, we would need to trace down and change every occurrence.  Every time we need to use  \\(\\pi\\) , we have to remember or look up what is the precision that we use.  Not only does this practice introduce more work, it is also likely to introduce bugs.    In C, we define  \\(\\pi\\)  as a macro constant  M_PI .  But how should we do this in Java?  This is where the ideal that a program consists of only objects with internal states that communicate with each other feel a bit constraining.  The constant  \\(\\pi\\)  is universal, and does not really belong to any object (the value of  \\(\\pi\\)  is the same for every circle!).  Another example: if we define a method  sqrt()  that computes the square root of a given number, this is a general function that is not associated with any object as well.  A solution to this is to associate these  global  values and functions with a  class  instead of with an  object .  For instance. Java predefines a  Math  class 6  that is populated with constants  PI  and  E  (for Euler's number  \\(e\\) ), along with a long list of mathematical functions.  To associate a method or a field with a class in Java, we declare them with the  static  keyword.  We can additionally add a keyword  final  to indicate that the value of the field will not change 7 .  1\n2\n3\n4\n5\n6 class   Math   { \n   : \n   public   static   final   double   PI   =   3.141592653589793 ; \n   : \n   :  }    We call these fields and methods that are associated with a class as  class fields  and  class methods , and fields and methods that are associated with an object as  instance fields  and  instance methods .   Class Fields and Methods in Python  Note that, in Python, any variable declared within a  class  block is a class field: 1\n2\n3 class   Circle : \n   x   =   0 \n   y   =   0   \nIn the above example,  x  and  y  are class fields, not instance fields.",
            "title": "Class Fields and Methods"
        },
        {
            "location": "/lec01/index.html#example-the-circle-class_1",
            "text": "Now, let revise our  Circle  class to improve the code and make it a little more complete:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49 import   java.lang.Math ;  /**   * A Circle object encapsulates a circle on a 2D plane.     */  class   Circle   { \n   private   double   x ;    // x-coordinate of the center \n   private   double   y ;    // y-coordinate of the center \n   private   double   r ;    // the length of the radius \n\n   /**     * Create a circle centered on (centerX, centerY) with given radius    */ \n   public   Circle ( double   centerX ,   double   centerY ,   double   radius )   { \n     x   =   centerX ; \n     y   =   centerY ; \n     r   =   radius ; \n   } \n\n   /**     * Return the area of the circle.     */ \n   public   double   getArea ()   { \n     return   Math . PI * r * r ; \n   } \n\n   /**     * Return the circumference of the circle.     */ \n   public   double   getCircumference ()   { \n     return   Math . PI * 2 * r ; \n   } \n\n   /**     * Move the center of the circle to the new position (newX, newY)     */ \n   public   void   moveTo ( double   newX ,   double   newY )   { \n     x   =   newX ; \n     y   =   newY ; \n   } \n\n   /**     * Return true if the given point (testX, testY) is within the circle.     */ \n   public   boolean   contains ( double   testX ,   double   testY )   { \n     return   false ; \n     // TODO: left as an exercise   \n   }  }",
            "title": "Example: The Circle class"
        },
        {
            "location": "/lec01/index.html#creating-and-interacting-with-circle-objects",
            "text": "To use the  Circle  class, we can either:   create a  main()  function, compile and link with the  Circle  class, and create an executable program, just like we usually do with a C program, OR  use  jshell , which is part of Java 9 (but not earlier versions).  jshell  provides a  read-evaluate-print loop  (REPL) to help us quickly try out various features of Java.   We will write a complete Java program with  main()  later in this class, but for now, we will use  jshell  to demonstrate the various language features of Java 7 .  The demonstration below loads the  Circle  class written above (with the  contains  method completed) from a file named  Circle.java 8 , and creates two  Circle  objects,  c1  and  c2 .  We use the  new  keyword to tell Java to create an object of type  Circle  here, passing in the center and the radius.  1 Circle   c1   =   new   Circle ( 0 ,   0 ,   100 );",
            "title": "Creating and Interacting with Circle objects"
        },
        {
            "location": "/lec01/index.html#reference-type-vs-primitive-type",
            "text": "The variable  c1  actually stores an abstraction over a  reference  to the Circle object, instead of the object itself. All objects are stored as references in Java .  The other variable type supported in Java is  primitive  type.  A variable of primitive type stores the  value  instead of a reference to the value.\nJava supports eight  primitive  data types:  byte ,  short ,  int ,  long ,  float ,  double ,  boolean  and  char .  If you are familiar with C, these data types should not be foreign to you.  One important difference is that a  char  variable stores a 16-bit Unicode character, not an 8-bit character like in C.  Java uses the type  byte  for that.  The other notable difference is that Java defines  true  and  false  as possible value to a  boolean , unlike C which uses  0  for false and non- 0  for true.    You can read all about Java  variables  and  primitive data types  in Oracle's Java Tutorial.",
            "title": "Reference Type vs. Primitive Type"
        },
        {
            "location": "/lec01/index.html#type-safety",
            "text": "Some languages are stricter in terms of type \"compatibility\" than others.  C compilers, however, are not very strict.  If it detects something strange with the type you used, it will issue a warning, but still let your code compiles and runs.  Take:  1\n2\n3\n4\n5 #include   <stdio.h>  int   main ()  { \n     printf ( \"%d \\n \" ,   \"cs2030\" );  }    In Line 4, we treat the address to a string as integer.  This generates a compiler's warning.  In C, you can  type cast  a variable from one type into another, i.e., force the compiler to treat a variable of one type as another type.  The compiler would listen and do that for you.  The following code would print out gibberish and would compile perfectly without error.  1\n2\n3\n4\n5 #include   <stdio.h>  int   main ()  { \n     printf ( \"%d \\n \" ,   ( int ) \"cs2030\" );  }    Such flexibility and loose rules for type compatibility could be useful, if you know what you are doing, but for most programmers, it could be a major source of unintentional bugs, especially if one does not pay attention to compiler's warning or one forces the warning to go away without fully understanding what is going on.  Java is very strict when it comes to type checking, and is one of the  type-safe  languages. Java ensures that basic operations (such as  + ,  - , etc) and method calls apply to values in a way that makes sense.  If you try to pull the same trick as above, you will receive an error:",
            "title": "Type Safety"
        },
        {
            "location": "/lec01/index.html#exercise",
            "text": "In the example above, we implemented a class  Circle .  There, we store and pass around two  double  variables that correspond to the x-coordinate and y-coordinate of a point.  The code would be neater if we create a second class  Point  that encapsulates the concept of a point on a 2D plane and the operations on points.  Implement a new class  Point  and modify the class  Circle  to use the class  Point .  Pay attention to what methods and fields (if any) you expose as  public  outside of the abstraction barrier of a  Point  object.  You will need to use  jshell  from Java 1.9 (or JDK 9) to interact with your new classes.    Use  jshell  to try out the following.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 class   A   { \n     public   static   int   x   =   1 ; \n     public   int   y   =   5 ; \n\n     void   incrX ()   { \n         x   =   x   +   1 ; \n     } \n\n     void   incrY ()   { \n         y   =   y   +   1 ; \n     }  }  A   a1   =   new   A ();  A   a2   =   new   A ();    After executing  a1.x = 10 , what is the value of  a2.x ?  After executing  a1.y = 10 , what is the value of  a2.y ?  Is  A.x = 3  a valid statement?  Is  A.y = 3  a valid statement?    Note: Even though  a1.x  is valid, it is considered a bad programming practice to access a class field through an instance variable (e.g.,  a1.x ).  The proper way to do it is to use the class name  A.x ).    Consider the following two classes:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 class   A   { \n     private   int   x ; \n   public   void   changeSelf ()   { \n     x   =   1 ; \n   } \n   public   void   changeAnother ( A   a )   { \n     a . x   =   1 ; \n   }  }  class   B   { \n     public   void   changeAnother ( A   a )   { \n         a . x   =   1 ; \n     }  }    Which line(s) above violate the  private  access modifier of  x ?        Often, the instructions and data are stored in different regions of the memory.\u00a0 \u21a9    Javascript would happily convert  4  into a string for you, and return  45 .\u00a0 \u21a9    assuming the parameters are passed correctly.\u00a0 \u21a9    Computer scientists just can't decide on what to call this!\u00a0 \u21a9 \u21a9    Others include  protected  and the  default  modifier.  For beginners, it is better that we explicitly specify something as  private  or  public .\u00a0 \u21a9 \u21a9    The class  Math  is provided by the package  java.lang  in Java.  A package is simply a set of related classes (and interfaces, but I have not told you what is an interface yet).  To use this class, we need to add the line  import   java.lang.Math  at the beginning of our program.\u00a0 \u21a9    You can download and install  jshell  yourself, as part of  Java Development Kit version 9 (JDK 9) \u00a0 \u21a9 \u21a9    We use the convention of one public class per file, name the file with the exact name of the class (including capitalization), and include the extension  .java  to the filename.\u00a0 \u21a9",
            "title": "Exercise"
        },
        {
            "location": "/lec02/index.html",
            "text": "Lecture 2: Inheritance & Polymorphism\n\n\nLearning Objectives\n\n\nAfter this lecture, students should:\n\n\n\n\nbe able to build a mental model for how objects and classes are represented in Java\n\n\nunderstand the concepts of object-oriented programming, including interface, polymorphism, late binding, inheritance, method overloading, and the usage of these concepts in programming.\n\n\nknow the purpose and usage of Java keywords \nimplements\n, \nextends\n, \nsuper\n, \nthis\n, and \n@Override\n\n\nunderstand Java concepts of arrays, enhanced \nfor\n loop, and method signature.\n\n\n\n\nMemory Model for Objects\n\n\nTo help understand how classes and objects work, it is useful to visualize how they are stored in the memory.  We mentioned last week that data (e.g., fields) and code (e.g., methods) are stored in two different regions in the memory.  Since an object contains both fields and methods, where do we keep an object?\n\n\nIt turned out that different implementations of Java may store the objects differently, but here is one way that we will follow for CS2030:\n\n\n\n\nIn the figure above, there are two objects of the same class.  An object is referred to through its reference, which is a pointer to the memory location where the instance fields for the object is stored, along with a pointer to a \nmethod table\n.  A method table stores a table of pointers to the methods, along with a table to the class fields.    \n\n\nAs an example, consider the following class:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nclass\n \nA\n \n{\n\n  \nprivate\n \nint\n \nx\n;\n\n  \nstatic\n \npublic\n \nint\n \ny\n;\n\n\n  \npublic\n \nvoid\n \nfoo\n()\n \n{\n\n    \n:\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nbar\n()\n \n{\n\n    \n:\n\n  \n}\n\n\n    \n:\n\n\n}\n\n\n\n\n\n\n\nIf we have two instances of A, \na1\n and \na2\n, with \nA.y = 1\n, \na1.x = 9\n, \na2.x = 40\n, then the memory layout looks like:\n\n\n\n\nNote that, we have only one copy of the \nstatic\n class field \ny\n, regardless of how many instances of \nA\n we create.\n\n\nEnforcing Abstraction Barrier with Interface\n\n\nRecall the concept of encapsulation. When we develop a large piece of software, it is important to hide the details on data representation and implementation, and only expose certain \npublic\n methods for the users to use.  We can imagine that there is an abstraction barrier between the code that implements the internals of a class (called the \nimplementer\n) and the code that uses the class (called the \nclient\n) to achieve a higher level task.\n\n\nWe have seen that we use \nprivate\n to enforce data hiding -- to hide certain fields and methods from outside of the barrier.  Now, we are going to see how we can enforce that the right set of methods are defined, implemented, and used on both sides of the barrier.\n\n\nThe mechanism to do this is through defining an \ninterface\n (aka a \nprotocol\n as it is called in Objective-C or Swift).  An interface is like a contract between the implementer of a class and the client of a class.  If a class promises to implement an interface, then we are guaranteed that the methods defined in the interface are already implemented in the class.  Otherwise, the code would not compile.\n\n\nIn Java, we can define an interface using \ninterface\n keyword:\n\n\n1\n2\n3\n4\n5\ninterface\n \nShape\n \n{\n\n  \npublic\n \ndouble\n \ngetArea\n();\n\n  \npublic\n \ndouble\n \ngetPerimeter\n();\n\n  \npublic\n \nboolean\n \ncontains\n(\nPoint\n \np\n);\n\n\n}\n\n\n\n\n\n\n\nThe example interface \nShape\n above contains only the declaration of the methods, not the implementation.  \n\n\nNow, let's see how the implementer would implement a class using the interface.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\nimport\n \njava.lang.Math\n;\n\n\n\nclass\n \nCircle\n \nimplements\n \nShape\n \n{\n\n  \nprivate\n \nPoint\n \ncenter\n;\n\n  \nprivate\n \ndouble\n \nradius\n;\n\n\n  \npublic\n \nCircle\n(\nPoint\n \ncenter\n,\n \ndouble\n \nradius\n)\n \n{\n\n    \nthis\n.\ncenter\n \n=\n \ncenter\n;\n\n    \nthis\n.\nradius\n \n=\n \nradius\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nmoveTo\n(\nPoint\n \np\n)\n \n{\n\n    \ncenter\n \n=\n \np\n;\n\n  \n}\n\n\n  \n@Override\n\n  \npublic\n \ndouble\n \ngetArea\n()\n \n{\n\n    \nreturn\n \nMath\n.\nPI\n \n*\n \nradius\n \n*\n \nradius\n;\n\n  \n}\n\n\n  \n@Override\n\n  \npublic\n \nboolean\n \ncontains\n(\nPoint\n \np\n)\n \n{\n\n    \nreturn\n \n(\np\n.\ndistance\n(\ncenter\n)\n \n<\n \nradius\n);\n\n  \n}\n\n\n  \n@Override\n\n  \npublic\n \ndouble\n \ngetPerimeter\n()\n \n{\n\n    \nreturn\n \nMath\n.\nPI\n \n*\n \n2\n \n*\n \nradius\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nThis is very similar to the code you saw in Lecture 1, except that in Line 2, we say \nclass\n \nCircle\n \nimplements\n \nShape\n.  This line informs the compiler that the programmer intends to implement all the methods included in the interface \nShape\n exactly as declared (in terms of names, the number of arguments, the types of arguments, returned type, and access modifier).  The rest of the class is the same, except that we renamed \ngetCircumference\n with \ngetPerimeter\n, which is more general and applies to all shapes.  We also added \nannotations\n to our code by adding the line \n@Override\n before methods in \nCircle\n that implement the methods declared in \nShape\n.  This annotation is optional, but it informs the compiler of our intention and helps make the intention of the programmer clearer to others who read the code.\n\n\n\n\nJava Annotation\n\n\nAnnotations are metadata that is not part of the code.  They do not affect execution.  They are useful to compilers and other software tools, as well as humans who read the code.  While we can similarly make the code more human-friendly with comments, an annotation is structured and so can be easily parsed by software.  You will see 1-2 more useful annotations in this module.\n\n\n\n\n\n\nthis\n\n\nThe \nthis\n keyword in Java that refers to the current object.  In the example above, we use \nthis\n to disambiguate the argument \ncenter\n and the field \ncenter\n.  In general, it is a good practice to use \nthis\n when referring the instance variable of the current object to make your intention clear.\n\n\n\n\nNote that we can have other methods (such as \nmoveTo\n) in the class beyond what is promised in the interface the class implements.\n\n\nA class can implement more than one interface.\n  For instance, let's say that we have another interface called \nPrintable\n[^1] with a single method defined:\n\n\n1\n2\n3\ninterface\n \nPrintable\n \n{\n\n  \npublic\n \nvoid\n \nprint\n();\n\n\n}\n\n\n\n\n\n\n\nThe implementer of \nCircle\n wants to inform the clients that the method \nvoid print()\n is implemented, it can do the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nclass\n \nCircle\n \nimplements\n \nShape\n,\n \nPrintable\n \n{\n\n     \n:\n\n     \n:\n\n   \n@Override\n\n   \npublic\n \nvoid\n \nprint\n()\n \n{\n\n     \nSystem\n.\nout\n.\nprintf\n(\n\"radius: %f\\n\"\n,\n \nradius\n);\n\n     \nSystem\n.\nout\n.\nprintf\n(\n\"center:\"\n);\n\n     \ncenter\n.\nprint\n();\n\n   \n}\n\n\n}\n\n\n\n\n\n\n\nIn the above, we call \nprint()\n on the \nPoint\n object as well.  How do we know that \nPoint\n provides a \nprint()\n method?  Well, we can read the implementation code of \nPoint\n, or we can agree with the implementer of \nPoint\n that \nPoint\n provides a \nPrintable\n interface!  \n\n\nIt is important to note that, \ninterface\n provides a \nsyntactic\n contract on the abstraction barrier, but it does not provide a \nsemantic\n contract.  It does not, for instance, guarantee that \nprint()\n actually prints something to the screen.  One could still implement interface \nPrintable\n as follows:\n\n\n1\n2\n3\n4\n5\n6\n7\nclass\n \nCircle\n \nimplements\n \nShape\n,\n \nPrintable\n \n{\n\n     \n:\n\n     \n:\n\n   \n@Override\n\n   \npublic\n \nvoid\n \nprint\n()\n \n{\n\n   \n}\n\n\n}\n\n\n\n\n\n\n\nand the code still compiles!\n\n\nNot all programming languages that support classes support interface.  C++, Javascript, and Python, for instance, do not support similar concepts.\n\n\n\n\nDefault Access Modifier for Interface\n\n\nIn the examples above, I explicitly specify the methods in the \nPrintable\n and \nShape\n interfaces as \npublic\n.  In Java, all methods in an interface are public by default, so the keywords \npublic\n could be omitted.\n\n\n\n\nInterface as Type\n\n\nIn Java, an interface is a type.  What this means is that:\n\n\n\n\nWe can declare a variable with an interface type, such as:\n\n1\n  \nShape\n \ncircle\n;\n\n\n\n\n\nor\n\n1\n  \nPrintable\n \ncircle\n;\n\n\n\n\n\nWe cannot, however, instantiate an object from an interface\nsince an interface is a \"template\", an \"abstraction\", and does not have an implementation.  For instance:\n\n\n\n\n1\n2\n3\n4\n  \n// this is not OK\n\n  \nPrintable\n \np\n \n=\n \nnew\n \nPrintable\n();\n\n  \n// this is OK\n\n  \nPrintable\n \ncircle\n \n=\n \nnew\n \nCircle\n(\nnew\n \nPoint\n(\n0\n,\n \n0\n),\n \n10\n);\n\n\n\n\n\n\n\n\n\n\n\nSimilarly, we can pass arguments of an interface type into a method, and the return type of a method can be an interface.\n\n\n\n\n\n\nAn object can be an instance of multiple types.  Recall that Java is a statically typed language. We associate a type with a variable.  We can assign a variable to an object if the object is an instance of the type of the variable.  For example, Line 4 above creates a new circle, which is an instance of three types: \nCircle\n, \nShape\n, and \nPrintable\n.  It is ok to assign this new circle to a variable of type \nPrintable\n.\n\n\n\n\n\n\nWe say that \nShape\n and \nPrintable\n are \nsupertypes\n of \nCircle\n, and \nCircle\n is a subtype of \nShape\n and \nPrintable\n.\n\n\nLate Binding and Polymorphism\n\n\nWe can now do something cool like this:\n\n1\n2\n3\n4\n5\n6\n7\n  \nPrintable\n[]\n \nobjs\n;\n\n    \n:\n\n    \n// initialize array objs\n\n  \n:\n\n  \nfor\n \n(\nPrintable\n \no\n:\n \nobjs\n)\n \n{\n\n      \no\n.\nprint\n();\n\n  \n}\n\n\n\n\n\n\nLet's examine this code.  Line 1 declares an array of objects of type \nPrintable\n.  We skip over the code to initialize the content of the array for now, and\njump to Line 5-7, which is a \nfor\n loop.  Line 5 declares a loop variable \no\n of type \nPrintable\n and loops through all objects in the array \nobjs\n, and Line 6 invokes the method \nprint\n of \no\n.\n\n\n\n\nArray and For Loops in Java\n\n\nSee Oracle's tutorial on \narray\n and \nenhanced loop\n\n\n\n\nThe magic happens in Line 6:\n\n\n\n\nFirst, since we know that any object in the array has the type \nPrintable\n, this means that they must implement the \nPrintable\n interface and support the method \nprint()\n.  \n\n\nSecond, we do not know, and we do not \nneed\n to know which class an object is an instance of.\n\n\nThird, we can actually have objects of completely unrelated classes in the same array. We can have objects of type \nCircle\n, and objects of type \nPoint\n.  We can have objects of type \nFactory\n, or objects of type \nStudent\n, or objects of type \nCushion\n.  As long as the objects implement the \nPrintable\n interface, we can put them into the same array.\n\n\nFourth, at \nrun time\n, Java looks at the object \no\n, and determines its class, and invokes the right implementation of \nprint()\n corresponding to the \no\n.  That is, if \no\n is an instance of a class \nCircle\n, then it will call \nprint()\n method of \nCircle\n; if \no\n is an instance of a class \nPoint\n, then it will call \nprint()\n method of \nPoint\n, and so on.\n\n\n\n\nTo further appreciate the magic in Line 6, especially on last point above, consider how a function call is done in C.  In C, you cannot have two functions of the same name within the same scope, so if you call a function \nprint()\n, you know exactly which set of instructions will be called\n1\n.  So, the name \nprint\n is bound to the corresponding set of instructions at compilation time.  This is called \nstatic binding\n or \nearly binding\n.\nTo have \nprint()\n for different types, we need to name them differently to avoid naming conflicts: e.g., \nprint_point()\n, \nprint_circle()\n.\n\n\nIn a language with static binding, suppose you want to mix objects of different types\ntogether in an array, you need to do something like the following pseudocode:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n   \nfor\n \neach\n \nobject\n \nin\n \nthe\n \narray\n\n       \nif\n \nobject\n \nis\n \na\n \npoint\n\n           \nprint_point\n(\nobject\n)\n\n       \nelse\n \nif\n \nobject\n \nis\n \na\n \ncircle\n\n           \nprint_circle\n(\nobject\n)\n\n     \nelse\n \nif\n \nobject\n \nis\n \na\n \nsquare\n\n           \nprint_square\n(\nobject\n)\n\n           \n:\n\n           \n:\n\n\n\n\n\n\nNot only is the code verbose and ugly, it would be cumbersome if you define a new compound data type that supports printing, since you would need to remember to add a new if-else condition to call for a corresponding print function.\n\n\nIn OO languages, you can have methods named \nprint()\n implemented differently in different classes.  When we compile the code above, the compiler will have no way to know which implementation will be called.  The bindings of \nprint()\n to the actual set of instructions will only be done at run time, after the object \no\n is instantiated from a class.  This is known as \ndynamic binding\n, or \nlate binding\n, or \ndynamic dispatch\n.\n\n\n\n\nIf you understand how an object is represented internally, this is not so magical after all.  Referring to the figure above, the array \nobjs[]\n contains an array of references to objects, the first one is a \nCircle\n object, and the following two are \nPoint\n objects.  When \no.print()\n is invoked, Java refers to the method table, which points to either the method table for \nCircle\n or for \nPoint\n, based on the class the object is an instance of.\n\n\nThis behavior, which is common to OO programming languages, is known as \npolymorphism\n2\n.\n\n\nThe Abstraction Principle\n\n\nWith the interface \nShape\n, we can implement other classes, such as \nRectangle\n, \nSquare\n, \nPolygon\n with the same interface.  For instance,\n\n\n1\n2\n3\nclass\n \nRectangle\n \nimplements\n \nShape\n,\n \nPrintable\n \n{\n\n   \n// left as exercise (See Exercise 2)\n\n\n}\n\n\n\n\n\n\n\nSo far, we have been treating our shapes as pure geometric objects.  Let's consider an application where we want to paint the shapes.  Each shape should have a fill color and a border (with color and thickness).\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nimport\n \njava.awt.Color\n;\n\n    \n:\n\n\n\nclass\n \nPaintedCircle\n \nimplements\n \nShape\n,\n \nPrintable\n \n{\n\n  \nprivate\n \nColor\n  \nfillColor\n;\n\n  \nprivate\n \nColor\n  \nborderColor\n;\n\n  \nprivate\n \ndouble\n \nborderThickness\n;\n\n\n  \npublic\n \nvoid\n \nfillWith\n(\nColor\n \nc\n)\n \n{\n\n    \nfillColor\n \n=\n \nc\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nsetBorderThickness\n(\ndouble\n \nt\n)\n \n{\n\n    \nborderThickness\n \n=\n \nt\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nsetBorderColor\n(\nColor\n \nc\n)\n \n{\n\n    \nborderColor\n \n=\n \nc\n;\n\n  \n}\n\n\n  \n// other methods and fields for Circle from before\n\n\n\n}\n\n\n\n\n\n\n\nIn the code above, we added the line \nimport\n \njava.awt.Color\n to use the \nColor class\n that Java provides, and added three private members as well as their setters.\n\n\nWe can do the same for \nTriangle\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nimport\n \njava.awt.Color\n;\n\n    \n:\n\n\n\nclass\n \nPaintedTriangle\n \nimplements\n \nShape\n,\n \nPrintable\n \n{\n\n  \nprivate\n \nColor\n  \nfillColor\n;\n\n  \nprivate\n \nColor\n  \nborderColor\n;\n\n  \nprivate\n \ndouble\n \nborderThickness\n;\n\n\n  \npublic\n \nvoid\n \nfillWith\n(\nColor\n \nc\n)\n \n{\n\n    \nfillColor\n \n=\n \nc\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nsetBorderThickness\n(\ndouble\n \nt\n)\n \n{\n\n    \nborderThickness\n \n=\n \nt\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nsetBorderColor\n(\nColor\n \nc\n)\n \n{\n\n    \nborderColor\n \n=\n \nc\n;\n\n  \n}\n\n\n  \n// other methods and fields written for Triangle\n\n\n\n}\n\n\n\n\n\n\n\nand for other shapes.\n\n\nGreat!  We now have colorful shapes.  The code above, however, is not \ngood\n code, even though it is \ncorrect\n.  Just consider what needs to be done if we decide to support border styles (dotted border, solid border, dashed border, etc).  We would have to edit every single class that supports colors and borders!\n\n\nOne principle that we can follow is the \nabstraction principle\n, which says \"Each significant piece of functionality in a program should be implemented in just one place in the source code. Where similar functions are carried out by distinct pieces of code, it is generally beneficial to combine them into one by abstracting out the varying parts.\"\n3\n\n\nFollowing the principle, we want to implement these style-related fields and methods in just one place.  But where?\n\n\nInheritance\n\n\nThe OO-way to do this is to create a \nparent class\n, and put all common fields and methods into the parent.  A parent class is defined just like a normal class.  For instance:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nclass\n \nPaintedShape\n \n{\n\n  \nprivate\n \nColor\n  \nfillColor\n;\n\n  \nprivate\n \nColor\n  \nborderColor\n;\n\n  \nprivate\n \ndouble\n \nborderThickness\n;\n\n\n  \npublic\n \nPaintedShape\n(\nColor\n \nfillColor\n,\n \nColor\n \nborderColor\n,\n \ndouble\n \nborderThickness\n)\n \n{\n\n    \nthis\n.\nfillColor\n \n=\n \nfillColor\n;\n\n    \nthis\n.\nborderColor\n \n=\n \nborderColor\n;\n\n    \nthis\n.\nborderThickness\n \n=\n \nborderThickness\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nfillWith\n(\nColor\n \nc\n)\n \n{\n\n    \nfillColor\n \n=\n \nc\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nsetBorderThickness\n(\ndouble\n \nt\n)\n \n{\n\n    \nborderThickness\n \n=\n \nt\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nsetBorderColor\n(\nColor\n \nc\n)\n \n{\n\n    \nborderColor\n \n=\n \nc\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nThe \nPaintedCircle\n class, \nPaintedSquare\n class, etc, can now \ninherits\n non-private fields and methods from the parent class, using the \nextends\n keyword.\n\n\n1\n2\n3\n4\n5\n6\n7\nclass\n \nPaintedCircle\n \nextends\n \nPaintedShape\n \nimplements\n \nShape\n,\n \nPrintable\n \n{\n\n      \n:\n\n\n}\n\n\n\nclass\n \nPaintedSquare\n \nextends\n \nPaintedShape\n \nimplements\n \nShape\n,\n \nPrintable\n \n{\n\n      \n:\n\n\n}\n\n\n\n\n\n\nThis mechanism for a class to inherit the properties and behavior from a parent is called \ninheritance\n, and is the fourth and final basic OO principles we cover\n4\n.\n\n\nWith inheritance, we do not have to repeat the declaration of fields \nfillColor\n, \nborderColor\n, \nborderThickness\n and the associated methods in them.  This software engineering principle is also known as the DRY principle -- \"\ndon't repeat yourself\n\" principle.  We are going to see DRY very regularly in future lectures.\n\n\nWe also call the \nPaintedShape\n the superclass (or base class) of \nPaintedCircle\n and \nPaintedSquare\n, and call \nPaintedCircle\n and \nPaintedSquare\n the subclass (or derived class)\n5\n of \nPaintedShape\n.\n\n\nA \nPaintedCircle\n object can now call \nfillWith()\n even if the method \nfillWith()\n is not defined in \nPaintedCircle\n -- it is defined in \nPaintedCircle\n's parent \nPaintedShape\n.  \n\n\nWhen a class extends a parent class, it inherits all the non-private fields and methods, so we can depict the objects and the class as follows:\n\n\n\n\nThe method table now includes pointers to methods defined in the parent (and grandparents, and so on).\n\n\nOverloading\n\n\nNow consider the constructor for \nPaintedCircle\n.   We need to initialize the geometric shape as well as the painting style.  But, we define the fields \nfillColor\n, etc \nprivate\n, and thus subclasses have no access to \nprivate\n fields in the parent.  We need to call the constructor of the parent to initialize these private fields.  The way to do this is to use the \nsuper\n keyword, as such:\n\n\n1\n2\n3\n4\n5\n  \npublic\n \nPaintedCircle\n(\nPoint\n \ncenter\n,\n \ndouble\n \nradius\n,\n \nColor\n \nfillColor\n,\n \nColor\n \nborderColor\n,\n \ndouble\n \nborderThickness\n)\n \n{\n\n    \nsuper\n(\nfillColor\n,\n \nborderColor\n,\n \nborderThickness\n);\n\n    \nthis\n.\ncenter\n \n=\n \ncenter\n;\n\n    \nthis\n.\nradius\n \n=\n \nradius\n;\n\n  \n}\n\n\n\n\n\n\n\nYou can see that the constructor for \nPaintedCircle\n now takes in five parameters.  You can imagine that as the class gets more sophisticated with more fields, we need to pass in more parameters to the class to initialize the fields.  It is not uncommon to provide alternative constructors with fewer parameters and assign some \ndefault\n values to the fields.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n  \n// create circle with default style (white with black border of thickness 1)\n\n  \npublic\n \nPaintedCircle\n(\nPoint\n \ncenter\n,\n \ndouble\n \nradius\n)\n \n{\n\n    \nsuper\n(\nColor\n.\nWHITE\n,\n \nColor\n.\nBLACK\n,\n \n1.0\n);\n\n    \nthis\n.\ncenter\n \n=\n \ncenter\n;\n\n    \nthis\n.\nradius\n \n=\n \nradius\n;\n\n  \n}\n\n\n  \n// create circle with customized styles  \n\n  \npublic\n \nPaintedCircle\n(\nPoint\n \ncenter\n,\n \ndouble\n \nradius\n,\n \nColor\n \nfillColor\n,\n \nColor\n \nborderColor\n,\n \ndouble\n \nborderThickness\n)\n \n{\n\n    \nsuper\n(\nfillColor\n,\n \nborderColor\n,\n \nborderThickness\n);\n\n    \nthis\n.\ncenter\n \n=\n \ncenter\n;\n\n    \nthis\n.\nradius\n \n=\n \nradius\n;\n\n  \n}\n\n\n\n\n\n\n\nTwo methods in a class can have the same name and still co-exist peacefully together.  This is called \noverloading\n.  When a method is called, we look at the \nsignature\n of the method, which consists of (i) the name of the method, (ii) the number, order, and type of the arguments, to determine which method is called.  To be precise, the first sentence of this paragraph should read: Two methods in a class can have the same name and still co-exist peacefully together, as long as they have different signatures.  Note that the return type is not part of the method signature, so you cannot have two methods with the same name and same arguments but different return type.  \n\n\nEven though the example above shows overloading of the constructor, we can overload other methods as well.  \n\n\nExercise\n\n\n\n\n\n\nConsider what happen when we do the following:\n\n\n1\n2\n3\nCircle\n \nc\n \n=\n \nnew\n \nCircle\n(\nnew\n \nPoint\n(\n0\n,\n0\n),\n \n10\n);\n\n\nShape\n \nc1\n \n=\n \nc\n;\n\n\nPrintable\n \nc2\n \n=\n \nc\n;\n\n\n\n\n\n\n\nAre the following statements allowed?  Why do you think Java does not allow some of the following statements?\n\n\n1\n2\n3\n4\nc1.print();\nc2.print();\nc1.getArea();\nc2.getArea();\n\n\n\n\n\n\n\n\n\n\nWrite another class \nRectangle\n that implements these two interfaces.  You should make use of the class \nPoint\n that you implemented from Lecture 1's exercise.  Then write another class \nPaintedRectangle\n that implements the two interfaces and inherits from \nPaintedShape\n that implements the two interfaces and inherits from \nPaintedShape\n.  You can assume that the sides of the rectangles are parallel with the x- and y-axes (in other words, the sides are either horizontal or vertical).\n\n\n\n\n\n\n(i) Write an interface called \nShape3D\n that supports a method \ngetVolume\n.  Write a class called \nCuboid\n that implements \nShape3D\n and has three private \ndouble\n fields \nlength\n, \nheight\n, and \nbreadth\n.  \ngetVolume()\n should return the volume of the \nCuboid\n object.  The constructor for \nCuboid\n should allow the client to create a \nCuboid\n object by specifying the three fields \nlength\n, \nheight\n and \nbreadth\n.\n\n\n(ii) We can extend one interface from another as well.  Find out how, and write a new interface \nSolid3D\n that inherits from interface \nShape3D\n that supports a method \ngetDensity\n and \ngetMass\n.  \n\n\n(iii) Now, write a new class called \nSolidCuboid\n with an additional private \ndouble\n field \ndensity\n.  The implementation of \ngetDensity()\n should return this field while \ngetMass()\n should return the mass of the cuboid.  The \nSolidCuboid\n should call the constructor of \nCuboid\n via \nsuper\n and provides two constructors: one constructor allows the client to specify the density, and the other does not and just set the default density to 1.0.\n\n\n\n\n\n\nWrite a class \nRectangle\n that implements \nShape\n.  A \nRectangle\n class has two \ndouble\n fields, \nlength\n and \nwidth\n, and a public method \nsetSize(int length, int width)\n that allows the client to change its size.  \n\n\nNow, write a class \nSquare\n that inherits from \nRectangle\n.  A \nSquare\n has an additional constraint that \nlength\n must be the same as \nwidth\n.  How should \nSquare\n implement the \nsetSize(int length, int width)\n method?  Do you think \nSquare\n should inherit from \nRectangle\n?  Or should it be another way around?  Or maybe they should not inherit from each other?\n\n\n(Note: to implement the \ncontains\n method in \nShape\n, you need to also keep the position of the \nSquare\n (top left corner, for instance).  But, it is not important for this question)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRemember a function is just an abstraction over a set of instructions.\u00a0\n\u21a9\n\n\n\n\n\n\nIn biology, polymorphism means that an organism can have many different forms.\u00a0\n\u21a9\n\n\n\n\n\n\nThis principle is formulated by Benjamin C. Pierce in his book \nTypes and Programming Languages\n.\u00a0\n\u21a9\n\n\n\n\n\n\nThe other three is encapsulation, abstraction, and polymorphism.\u00a0\n\u21a9\n\n\n\n\n\n\nAgain, you see that computer scientist can be quite indecisive when it comes to the terminologies in OOP.\u00a0\n\u21a9",
            "title": "2. Interface, Inheritance & Polymorphism"
        },
        {
            "location": "/lec02/index.html#lecture-2-inheritance-polymorphism",
            "text": "",
            "title": "Lecture 2: Inheritance &amp; Polymorphism"
        },
        {
            "location": "/lec02/index.html#learning-objectives",
            "text": "After this lecture, students should:   be able to build a mental model for how objects and classes are represented in Java  understand the concepts of object-oriented programming, including interface, polymorphism, late binding, inheritance, method overloading, and the usage of these concepts in programming.  know the purpose and usage of Java keywords  implements ,  extends ,  super ,  this , and  @Override  understand Java concepts of arrays, enhanced  for  loop, and method signature.",
            "title": "Learning Objectives"
        },
        {
            "location": "/lec02/index.html#memory-model-for-objects",
            "text": "To help understand how classes and objects work, it is useful to visualize how they are stored in the memory.  We mentioned last week that data (e.g., fields) and code (e.g., methods) are stored in two different regions in the memory.  Since an object contains both fields and methods, where do we keep an object?  It turned out that different implementations of Java may store the objects differently, but here is one way that we will follow for CS2030:   In the figure above, there are two objects of the same class.  An object is referred to through its reference, which is a pointer to the memory location where the instance fields for the object is stored, along with a pointer to a  method table .  A method table stores a table of pointers to the methods, along with a table to the class fields.      As an example, consider the following class:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 class   A   { \n   private   int   x ; \n   static   public   int   y ; \n\n   public   void   foo ()   { \n     : \n   } \n\n   public   void   bar ()   { \n     : \n   } \n\n     :  }    If we have two instances of A,  a1  and  a2 , with  A.y = 1 ,  a1.x = 9 ,  a2.x = 40 , then the memory layout looks like:   Note that, we have only one copy of the  static  class field  y , regardless of how many instances of  A  we create.",
            "title": "Memory Model for Objects"
        },
        {
            "location": "/lec02/index.html#enforcing-abstraction-barrier-with-interface",
            "text": "Recall the concept of encapsulation. When we develop a large piece of software, it is important to hide the details on data representation and implementation, and only expose certain  public  methods for the users to use.  We can imagine that there is an abstraction barrier between the code that implements the internals of a class (called the  implementer ) and the code that uses the class (called the  client ) to achieve a higher level task.  We have seen that we use  private  to enforce data hiding -- to hide certain fields and methods from outside of the barrier.  Now, we are going to see how we can enforce that the right set of methods are defined, implemented, and used on both sides of the barrier.  The mechanism to do this is through defining an  interface  (aka a  protocol  as it is called in Objective-C or Swift).  An interface is like a contract between the implementer of a class and the client of a class.  If a class promises to implement an interface, then we are guaranteed that the methods defined in the interface are already implemented in the class.  Otherwise, the code would not compile.  In Java, we can define an interface using  interface  keyword:  1\n2\n3\n4\n5 interface   Shape   { \n   public   double   getArea (); \n   public   double   getPerimeter (); \n   public   boolean   contains ( Point   p );  }    The example interface  Shape  above contains only the declaration of the methods, not the implementation.    Now, let's see how the implementer would implement a class using the interface.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30 import   java.lang.Math ;  class   Circle   implements   Shape   { \n   private   Point   center ; \n   private   double   radius ; \n\n   public   Circle ( Point   center ,   double   radius )   { \n     this . center   =   center ; \n     this . radius   =   radius ; \n   } \n\n   public   void   moveTo ( Point   p )   { \n     center   =   p ; \n   } \n\n   @Override \n   public   double   getArea ()   { \n     return   Math . PI   *   radius   *   radius ; \n   } \n\n   @Override \n   public   boolean   contains ( Point   p )   { \n     return   ( p . distance ( center )   <   radius ); \n   } \n\n   @Override \n   public   double   getPerimeter ()   { \n     return   Math . PI   *   2   *   radius ; \n   }  }    This is very similar to the code you saw in Lecture 1, except that in Line 2, we say  class   Circle   implements   Shape .  This line informs the compiler that the programmer intends to implement all the methods included in the interface  Shape  exactly as declared (in terms of names, the number of arguments, the types of arguments, returned type, and access modifier).  The rest of the class is the same, except that we renamed  getCircumference  with  getPerimeter , which is more general and applies to all shapes.  We also added  annotations  to our code by adding the line  @Override  before methods in  Circle  that implement the methods declared in  Shape .  This annotation is optional, but it informs the compiler of our intention and helps make the intention of the programmer clearer to others who read the code.   Java Annotation  Annotations are metadata that is not part of the code.  They do not affect execution.  They are useful to compilers and other software tools, as well as humans who read the code.  While we can similarly make the code more human-friendly with comments, an annotation is structured and so can be easily parsed by software.  You will see 1-2 more useful annotations in this module.    this  The  this  keyword in Java that refers to the current object.  In the example above, we use  this  to disambiguate the argument  center  and the field  center .  In general, it is a good practice to use  this  when referring the instance variable of the current object to make your intention clear.   Note that we can have other methods (such as  moveTo ) in the class beyond what is promised in the interface the class implements.  A class can implement more than one interface.   For instance, let's say that we have another interface called  Printable [^1] with a single method defined:  1\n2\n3 interface   Printable   { \n   public   void   print ();  }    The implementer of  Circle  wants to inform the clients that the method  void print()  is implemented, it can do the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 class   Circle   implements   Shape ,   Printable   { \n      : \n      : \n    @Override \n    public   void   print ()   { \n      System . out . printf ( \"radius: %f\\n\" ,   radius ); \n      System . out . printf ( \"center:\" ); \n      center . print (); \n    }  }    In the above, we call  print()  on the  Point  object as well.  How do we know that  Point  provides a  print()  method?  Well, we can read the implementation code of  Point , or we can agree with the implementer of  Point  that  Point  provides a  Printable  interface!    It is important to note that,  interface  provides a  syntactic  contract on the abstraction barrier, but it does not provide a  semantic  contract.  It does not, for instance, guarantee that  print()  actually prints something to the screen.  One could still implement interface  Printable  as follows:  1\n2\n3\n4\n5\n6\n7 class   Circle   implements   Shape ,   Printable   { \n      : \n      : \n    @Override \n    public   void   print ()   { \n    }  }    and the code still compiles!  Not all programming languages that support classes support interface.  C++, Javascript, and Python, for instance, do not support similar concepts.   Default Access Modifier for Interface  In the examples above, I explicitly specify the methods in the  Printable  and  Shape  interfaces as  public .  In Java, all methods in an interface are public by default, so the keywords  public  could be omitted.",
            "title": "Enforcing Abstraction Barrier with Interface"
        },
        {
            "location": "/lec02/index.html#interface-as-type",
            "text": "In Java, an interface is a type.  What this means is that:   We can declare a variable with an interface type, such as: 1    Shape   circle ;   \nor 1    Printable   circle ;   \nWe cannot, however, instantiate an object from an interface\nsince an interface is a \"template\", an \"abstraction\", and does not have an implementation.  For instance:   1\n2\n3\n4    // this is not OK \n   Printable   p   =   new   Printable (); \n   // this is OK \n   Printable   circle   =   new   Circle ( new   Point ( 0 ,   0 ),   10 );      Similarly, we can pass arguments of an interface type into a method, and the return type of a method can be an interface.    An object can be an instance of multiple types.  Recall that Java is a statically typed language. We associate a type with a variable.  We can assign a variable to an object if the object is an instance of the type of the variable.  For example, Line 4 above creates a new circle, which is an instance of three types:  Circle ,  Shape , and  Printable .  It is ok to assign this new circle to a variable of type  Printable .    We say that  Shape  and  Printable  are  supertypes  of  Circle , and  Circle  is a subtype of  Shape  and  Printable .",
            "title": "Interface as Type"
        },
        {
            "location": "/lec02/index.html#late-binding-and-polymorphism",
            "text": "We can now do something cool like this: 1\n2\n3\n4\n5\n6\n7    Printable []   objs ; \n     : \n     // initialize array objs \n   : \n   for   ( Printable   o :   objs )   { \n       o . print (); \n   }    Let's examine this code.  Line 1 declares an array of objects of type  Printable .  We skip over the code to initialize the content of the array for now, and\njump to Line 5-7, which is a  for  loop.  Line 5 declares a loop variable  o  of type  Printable  and loops through all objects in the array  objs , and Line 6 invokes the method  print  of  o .   Array and For Loops in Java  See Oracle's tutorial on  array  and  enhanced loop   The magic happens in Line 6:   First, since we know that any object in the array has the type  Printable , this means that they must implement the  Printable  interface and support the method  print() .    Second, we do not know, and we do not  need  to know which class an object is an instance of.  Third, we can actually have objects of completely unrelated classes in the same array. We can have objects of type  Circle , and objects of type  Point .  We can have objects of type  Factory , or objects of type  Student , or objects of type  Cushion .  As long as the objects implement the  Printable  interface, we can put them into the same array.  Fourth, at  run time , Java looks at the object  o , and determines its class, and invokes the right implementation of  print()  corresponding to the  o .  That is, if  o  is an instance of a class  Circle , then it will call  print()  method of  Circle ; if  o  is an instance of a class  Point , then it will call  print()  method of  Point , and so on.   To further appreciate the magic in Line 6, especially on last point above, consider how a function call is done in C.  In C, you cannot have two functions of the same name within the same scope, so if you call a function  print() , you know exactly which set of instructions will be called 1 .  So, the name  print  is bound to the corresponding set of instructions at compilation time.  This is called  static binding  or  early binding .\nTo have  print()  for different types, we need to name them differently to avoid naming conflicts: e.g.,  print_point() ,  print_circle() .  In a language with static binding, suppose you want to mix objects of different types\ntogether in an array, you need to do something like the following pseudocode: 1\n2\n3\n4\n5\n6\n7\n8\n9     for   each   object   in   the   array \n        if   object   is   a   point \n            print_point ( object ) \n        else   if   object   is   a   circle \n            print_circle ( object ) \n      else   if   object   is   a   square \n            print_square ( object ) \n            : \n            :    Not only is the code verbose and ugly, it would be cumbersome if you define a new compound data type that supports printing, since you would need to remember to add a new if-else condition to call for a corresponding print function.  In OO languages, you can have methods named  print()  implemented differently in different classes.  When we compile the code above, the compiler will have no way to know which implementation will be called.  The bindings of  print()  to the actual set of instructions will only be done at run time, after the object  o  is instantiated from a class.  This is known as  dynamic binding , or  late binding , or  dynamic dispatch .   If you understand how an object is represented internally, this is not so magical after all.  Referring to the figure above, the array  objs[]  contains an array of references to objects, the first one is a  Circle  object, and the following two are  Point  objects.  When  o.print()  is invoked, Java refers to the method table, which points to either the method table for  Circle  or for  Point , based on the class the object is an instance of.  This behavior, which is common to OO programming languages, is known as  polymorphism 2 .",
            "title": "Late Binding and Polymorphism"
        },
        {
            "location": "/lec02/index.html#the-abstraction-principle",
            "text": "With the interface  Shape , we can implement other classes, such as  Rectangle ,  Square ,  Polygon  with the same interface.  For instance,  1\n2\n3 class   Rectangle   implements   Shape ,   Printable   { \n    // left as exercise (See Exercise 2)  }    So far, we have been treating our shapes as pure geometric objects.  Let's consider an application where we want to paint the shapes.  Each shape should have a fill color and a border (with color and thickness).   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 import   java.awt.Color ; \n     :  class   PaintedCircle   implements   Shape ,   Printable   { \n   private   Color    fillColor ; \n   private   Color    borderColor ; \n   private   double   borderThickness ; \n\n   public   void   fillWith ( Color   c )   { \n     fillColor   =   c ; \n   } \n\n   public   void   setBorderThickness ( double   t )   { \n     borderThickness   =   t ; \n   } \n\n   public   void   setBorderColor ( Color   c )   { \n     borderColor   =   c ; \n   } \n\n   // other methods and fields for Circle from before  }    In the code above, we added the line  import   java.awt.Color  to use the  Color class  that Java provides, and added three private members as well as their setters.  We can do the same for  Triangle   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 import   java.awt.Color ; \n     :  class   PaintedTriangle   implements   Shape ,   Printable   { \n   private   Color    fillColor ; \n   private   Color    borderColor ; \n   private   double   borderThickness ; \n\n   public   void   fillWith ( Color   c )   { \n     fillColor   =   c ; \n   } \n\n   public   void   setBorderThickness ( double   t )   { \n     borderThickness   =   t ; \n   } \n\n   public   void   setBorderColor ( Color   c )   { \n     borderColor   =   c ; \n   } \n\n   // other methods and fields written for Triangle  }    and for other shapes.  Great!  We now have colorful shapes.  The code above, however, is not  good  code, even though it is  correct .  Just consider what needs to be done if we decide to support border styles (dotted border, solid border, dashed border, etc).  We would have to edit every single class that supports colors and borders!  One principle that we can follow is the  abstraction principle , which says \"Each significant piece of functionality in a program should be implemented in just one place in the source code. Where similar functions are carried out by distinct pieces of code, it is generally beneficial to combine them into one by abstracting out the varying parts.\" 3  Following the principle, we want to implement these style-related fields and methods in just one place.  But where?",
            "title": "The Abstraction Principle"
        },
        {
            "location": "/lec02/index.html#inheritance",
            "text": "The OO-way to do this is to create a  parent class , and put all common fields and methods into the parent.  A parent class is defined just like a normal class.  For instance:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 class   PaintedShape   { \n   private   Color    fillColor ; \n   private   Color    borderColor ; \n   private   double   borderThickness ; \n\n   public   PaintedShape ( Color   fillColor ,   Color   borderColor ,   double   borderThickness )   { \n     this . fillColor   =   fillColor ; \n     this . borderColor   =   borderColor ; \n     this . borderThickness   =   borderThickness ; \n   } \n\n   public   void   fillWith ( Color   c )   { \n     fillColor   =   c ; \n   } \n\n   public   void   setBorderThickness ( double   t )   { \n     borderThickness   =   t ; \n   } \n\n   public   void   setBorderColor ( Color   c )   { \n     borderColor   =   c ; \n   }  }    The  PaintedCircle  class,  PaintedSquare  class, etc, can now  inherits  non-private fields and methods from the parent class, using the  extends  keyword.  1\n2\n3\n4\n5\n6\n7 class   PaintedCircle   extends   PaintedShape   implements   Shape ,   Printable   { \n       :  }  class   PaintedSquare   extends   PaintedShape   implements   Shape ,   Printable   { \n       :  }    This mechanism for a class to inherit the properties and behavior from a parent is called  inheritance , and is the fourth and final basic OO principles we cover 4 .  With inheritance, we do not have to repeat the declaration of fields  fillColor ,  borderColor ,  borderThickness  and the associated methods in them.  This software engineering principle is also known as the DRY principle -- \" don't repeat yourself \" principle.  We are going to see DRY very regularly in future lectures.  We also call the  PaintedShape  the superclass (or base class) of  PaintedCircle  and  PaintedSquare , and call  PaintedCircle  and  PaintedSquare  the subclass (or derived class) 5  of  PaintedShape .  A  PaintedCircle  object can now call  fillWith()  even if the method  fillWith()  is not defined in  PaintedCircle  -- it is defined in  PaintedCircle 's parent  PaintedShape .    When a class extends a parent class, it inherits all the non-private fields and methods, so we can depict the objects and the class as follows:   The method table now includes pointers to methods defined in the parent (and grandparents, and so on).",
            "title": "Inheritance"
        },
        {
            "location": "/lec02/index.html#overloading",
            "text": "Now consider the constructor for  PaintedCircle .   We need to initialize the geometric shape as well as the painting style.  But, we define the fields  fillColor , etc  private , and thus subclasses have no access to  private  fields in the parent.  We need to call the constructor of the parent to initialize these private fields.  The way to do this is to use the  super  keyword, as such:  1\n2\n3\n4\n5    public   PaintedCircle ( Point   center ,   double   radius ,   Color   fillColor ,   Color   borderColor ,   double   borderThickness )   { \n     super ( fillColor ,   borderColor ,   borderThickness ); \n     this . center   =   center ; \n     this . radius   =   radius ; \n   }    You can see that the constructor for  PaintedCircle  now takes in five parameters.  You can imagine that as the class gets more sophisticated with more fields, we need to pass in more parameters to the class to initialize the fields.  It is not uncommon to provide alternative constructors with fewer parameters and assign some  default  values to the fields.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13    // create circle with default style (white with black border of thickness 1) \n   public   PaintedCircle ( Point   center ,   double   radius )   { \n     super ( Color . WHITE ,   Color . BLACK ,   1.0 ); \n     this . center   =   center ; \n     this . radius   =   radius ; \n   } \n\n   // create circle with customized styles   \n   public   PaintedCircle ( Point   center ,   double   radius ,   Color   fillColor ,   Color   borderColor ,   double   borderThickness )   { \n     super ( fillColor ,   borderColor ,   borderThickness ); \n     this . center   =   center ; \n     this . radius   =   radius ; \n   }    Two methods in a class can have the same name and still co-exist peacefully together.  This is called  overloading .  When a method is called, we look at the  signature  of the method, which consists of (i) the name of the method, (ii) the number, order, and type of the arguments, to determine which method is called.  To be precise, the first sentence of this paragraph should read: Two methods in a class can have the same name and still co-exist peacefully together, as long as they have different signatures.  Note that the return type is not part of the method signature, so you cannot have two methods with the same name and same arguments but different return type.    Even though the example above shows overloading of the constructor, we can overload other methods as well.",
            "title": "Overloading"
        },
        {
            "location": "/lec02/index.html#exercise",
            "text": "Consider what happen when we do the following:  1\n2\n3 Circle   c   =   new   Circle ( new   Point ( 0 , 0 ),   10 );  Shape   c1   =   c ;  Printable   c2   =   c ;    Are the following statements allowed?  Why do you think Java does not allow some of the following statements?  1\n2\n3\n4 c1.print();\nc2.print();\nc1.getArea();\nc2.getArea();     Write another class  Rectangle  that implements these two interfaces.  You should make use of the class  Point  that you implemented from Lecture 1's exercise.  Then write another class  PaintedRectangle  that implements the two interfaces and inherits from  PaintedShape  that implements the two interfaces and inherits from  PaintedShape .  You can assume that the sides of the rectangles are parallel with the x- and y-axes (in other words, the sides are either horizontal or vertical).    (i) Write an interface called  Shape3D  that supports a method  getVolume .  Write a class called  Cuboid  that implements  Shape3D  and has three private  double  fields  length ,  height , and  breadth .   getVolume()  should return the volume of the  Cuboid  object.  The constructor for  Cuboid  should allow the client to create a  Cuboid  object by specifying the three fields  length ,  height  and  breadth .  (ii) We can extend one interface from another as well.  Find out how, and write a new interface  Solid3D  that inherits from interface  Shape3D  that supports a method  getDensity  and  getMass .    (iii) Now, write a new class called  SolidCuboid  with an additional private  double  field  density .  The implementation of  getDensity()  should return this field while  getMass()  should return the mass of the cuboid.  The  SolidCuboid  should call the constructor of  Cuboid  via  super  and provides two constructors: one constructor allows the client to specify the density, and the other does not and just set the default density to 1.0.    Write a class  Rectangle  that implements  Shape .  A  Rectangle  class has two  double  fields,  length  and  width , and a public method  setSize(int length, int width)  that allows the client to change its size.    Now, write a class  Square  that inherits from  Rectangle .  A  Square  has an additional constraint that  length  must be the same as  width .  How should  Square  implement the  setSize(int length, int width)  method?  Do you think  Square  should inherit from  Rectangle ?  Or should it be another way around?  Or maybe they should not inherit from each other?  (Note: to implement the  contains  method in  Shape , you need to also keep the position of the  Square  (top left corner, for instance).  But, it is not important for this question)        Remember a function is just an abstraction over a set of instructions.\u00a0 \u21a9    In biology, polymorphism means that an organism can have many different forms.\u00a0 \u21a9    This principle is formulated by Benjamin C. Pierce in his book  Types and Programming Languages .\u00a0 \u21a9    The other three is encapsulation, abstraction, and polymorphism.\u00a0 \u21a9    Again, you see that computer scientist can be quite indecisive when it comes to the terminologies in OOP.\u00a0 \u21a9",
            "title": "Exercise"
        },
        {
            "location": "/lec03/index.html",
            "text": "Lecture 3\n\n\nLearning Objectives\n\n\nAt the end of this lecture, students should\n\n\n\n\nbe familiar with the concept and power of method overriding\n\n\nunderstand how Java dispatches methods that have been overridden\n\n\nappreciate the usefulness of overriding \nequals\n and \ntoString\n in the \nObject\n class\n\n\nbe exposed to the \nString\n class and its associated methods, especially the \n+\n operator\n\n\nbe aware that inheritance can be easily abused and leads to bad code\n\n\nunderstand the differences between HAS-A and IS-A relationship\n\n\nbe able to use composition to model classes with HAS-A relationship\n\n\nbe able to use inheritance to model classes with IS-A relationship\n\n\nunderstand the Liskov Substitution Principle and thus be aware that not all IS-A relationship should be modeled with inheritance\n\n\nunderstand the purposes of the Java keyword \nfinal\n\n\n\n\nJava \nObject\n class\n\n\nIn Java, every class inherits from the \nclass \nObject\n implicitly.  The \nObject\n class defines many useful methods that are common to all objects.  The two useful ones are :\n\n\n\n\nequals(Object obj)\n, which checks if two objects are equal to each other, and\n\n\ntoString()\n, which returns a string representation of the object, and is a better way to print an object than the \nprint()\n method and \nPrintable\n interface we write.\n\n\n\n\nThe \nequals()\n method as implemented in \nObject\n, only compares if two object references refer to the same object.  In the Figure below, we show an array \ncircles\n with three \nCircle\n objects.  All three circles are centered at (0, 0) with radius 10.  They are created as follows:\n\n\n1\n2\n3\n4\n    \nCircle\n[]\n \ncircles\n \n=\n \nnew\n \nCircle\n[\n3\n];\n\n    \ncircles\n[\n0\n]\n \n=\n \nnew\n \nCircle\n(\nnew\n \nPoint\n(\n0\n,\n \n0\n),\n \n10\n);\n\n    \ncircles\n[\n1\n]\n \n=\n \nnew\n \nCircle\n(\nnew\n \nPoint\n(\n0\n,\n \n0\n),\n \n10\n);\n\n    \ncircles\n[\n2\n]\n \n=\n \ncircles\n[\n1\n];\n\n\n\n\n\n\n\nWhen you check \ncircles[0].equals(circles[1])\n, however, it returns \nfalse\n, because even though \ncircles[0]\n and \ncircles[1]\n are semantically the same, they refer to the two different objects.  Calling \ncircles[1].equals(circles[2])\n returns \ntrue\n, as they are referring to the same object.  \n\n\n\n\nWhat if you need a method that compares if two circles are \nsemantically\n the same?  You can implement your own method, say \nisTheSameCircle(Circle c)\n.  But, the \nequals()\n method is universal (all classes inherits this method) and is used by other classes for equality tests.  So, in most cases, we can implement a method called \nequals()\n with the same signature with the semantic that we want[^8].\n\n\nThat's right.  Even though we cannot have two methods with the same signature in the same class, we can have two methods with the same signature, one in the superclass (or the superclass's superclass, and so on), one in the subclass.  The method in the subclass will override the method in the superclass.  For example,\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nclass\n \nCircle\n \nimplements\n \nShape\n,\n \nPrintable\n \n{\n\n    \n:\n\n  \n@Override\n\n  \npublic\n \nboolean\n \nequals\n(\nObject\n \nobj\n)\n \n{\n\n    \nif\n \n(\nthis\n \n==\n \nobj\n)\n \n{\n\n      \nreturn\n \ntrue\n;\n\n    \n}\n\n    \nif\n \n(\nobj\n \ninstanceof\n \nCircle\n)\n \n{\n\n      \nCircle\n \ncircle\n \n=\n \n(\nCircle\n)\n \nobj\n;\n\n      \nreturn\n \n(\ncircle\n.\ncenter\n.\nequals\n(\ncenter\n)\n \n&&\n \ncircle\n.\nradius\n \n==\n \nradius\n);\n\n    \n}\n \nelse\n \n{\n\n      \nreturn\n \nfalse\n;\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nLine 10 above compares if the two center points are equal, and the two radius values are equal.  So, we compare if the two circles are semantically the same.  The rest of this code requires some explanation:\n\n\n\n\nLine 3 uses the same \n@Override\n annotation that we have seen before -- we are telling the compilers that we are overriding a method in the superclass.\n\n\nLine 4 declares the method \nequals\n, and note that it has to have exactly the same signature as the \nequals()\n method we are overriding.  Even though we meant to compare two \nCircle\n objects, we cannot declare it as \npublic boolean equals(Circle circle)\n, since the signature is different and the compiler would complain.\n\n\nSince \nobj\n is of an \nObject\n type, we can actually pass in any object to compare with a \nCircle\n.  Line 5 checks if the comparison makes sense, by checking if \nobj\n is instantiated from a \nCircle\n class, using the \ninstanceof\n keyword.  If \nobj\n is not even a \nCircle\n object, then we simply return \nfalse\n.\n\n\nIf \nobj\n is an instance of \nCircle\n, we assign \nobj\n to a variable of type \nCircle\n and compare as in Line 10.\n\n\n\n\nFor the code above to work, we have to override the \nequals\n method of \nPoint\n as well.  That is left as an exercise\n1\n.\n\n\nOne final note: polymorphism works here as well.  If we have an object reference \nobj\n of type \nObject\n that refers to an instance of a \nCircle\n, calling \nobj.equals()\n will invoke the \nequals()\n method of \nCircle\n, not \nObject\n, just like the case of interfaces.\n\n\nRecall that when a class implements an interface, an instance of that class can take on the type of that interface.  Similarly, when a class inherits from a parent class, an instance of that class can take on the type of the parent class.  So, we can do the following:\n\n\n1\n2\nCircle\n \nc\n \n=\n \nnew\n \nCircle\n(\nnew\n \nPoint\n(\n0\n,\n0\n),\n \n10\n);\n\n\nObject\n \no\n \n=\n \nc\n;\n\n\n\n\n\n\n\nLine 2 assigns the circle object \nc\n to \no\n of type \nObject\n.  So, both \no\n and \nc\n are referring to the same objects.  Due to type checking at compile time, however, Java does not allow methods and fields in the subclass (e.g., \nCircle\n) that is not in the superclass (e.g., \nObject\n) to be called.  In this example, only the methods known to \nObject\n can be accessed by \no\n.\n\n\nNow, consider what would happen if we override the method \nequals()\n from the \nObject\n class.  \n\n\nThe method table will update the entry for \nequals()\n to point to the implementation provided by the \nCircle\n class, instead of the \nObject\n class.\n\n\n\n\nNow, consider what would happen if we \noverload\n the method \nequals()\n with one that takes in a \nCircle\n object.  I also throw in a couple of \nSystem.out.print()\n to help us figure out what is going on.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nclass\n \nCircle\n \nimplements\n \nShape\n,\n \nPrintable\n \n{\n\n    \n:\n\n  \n@Override\n\n  \npublic\n \nboolean\n \nequals\n(\nObject\n \nobj\n)\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"equals(Object) called\"\n);\n\n    \nif\n \n(\nobj\n \n==\n \nthis\n)\n \n{\n\n      \nreturn\n \ntrue\n;\n\n    \n}\n\n    \nif\n \n(\nobj\n \ninstanceof\n \nCircle\n)\n \n{\n\n      \nCircle\n \ncircle\n \n=\n \n(\nCircle\n)\n \nobj\n;\n\n      \nreturn\n \n(\ncircle\n.\ncenter\n.\nequals\n(\ncenter\n)\n \n&&\n \ncircle\n.\nradius\n \n==\n \nradius\n);\n\n    \n}\n \nelse\n \n{\n\n      \nreturn\n \nfalse\n;\n\n    \n}\n\n  \n}\n\n\n  \npublic\n \nboolean\n \nequals\n(\nCircle\n \ncircle\n)\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"equals(Circle) called\"\n);\n\n    \nreturn\n \n((\ncircle\n.\ncenter\n.\nequals\n(\ncenter\n)\n \n&&\n \ncircle\n.\nradius\n \n==\n \nradius\n);\n\n  \n}\n \n\n}\n\n\n\n\n\n\n\nSince this new \nequals()\n method does not override the method in \nObject\n, it gets its own slot in the method table of \nCircle\n, instead of reusing one from the \nObject\n.\n\n\n\n\nNow, consider which version of \nequals\n are called by the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nCircle\n \nc1\n \n=\n \nnew\n \nCircle\n(\nnew\n \nPoint\n(\n0\n,\n0\n),\n \n10\n);\n\n\nCircle\n \nc2\n \n=\n \nnew\n \nCircle\n(\nnew\n \nPoint\n(\n0\n,\n0\n),\n \n10\n);\n\n\nObject\n \no1\n \n=\n \nc1\n;\n\n\nObject\n \no2\n \n=\n \nc2\n;\n\n\n\no1\n.\nequals\n(\no2\n);\n\n\no1\n.\nequals\n((\nCircle\n)\no2\n);\n\n\no1\n.\nequals\n(\nc2\n);\n\n\nc1\n.\nequals\n(\no2\n);\n\n\nc1\n.\nequals\n((\nCircle\n)\no2\n);\n\n\nc1\n.\nequals\n(\nc2\n);\n\n\n\n\n\n\n\nLines 6-9 call \nequals(Object)\n defined in \nCircle\n\uff0c while Lines 10-11 call \nequals(Circle)\n defined in \nCircle\n.  Let's look at why for each one:\n\n\n\n\nLine 6 calls \nequals\n of an \nObject\n object on an \nObject\n object.  Java checks through all methods defined in \nObject\n, and finds a method that matches the signature, which is the \nequals(Object)\n (which \nCircle\n has overridden). This is the one that will get called.\n\n\nLine 7-8 call \nequals\n of an \nObject\n object on a \nCircle\n object.  Java checks through all methods defined in \nObject\n and finds one method that matches the signature, which is \nequals(Object)\n (which \nCircle\n has overridden).  Even though there is another method \nequals(Circle)\n defined, it is defined as part of the \nCircle\n class, which Java refuses to access because \no1\n is declared to have the type \nObject\n.  Since the only method that Java can find has an argument of type \nObject\n, the argument is cast as an \nObject\n when \nequals\n is invoked.\n\n\nLine 9 calls \nequals\n of a \nCircle\n object on an \nObject\n object.  Java finds a method with the matching signature, \nequals(Object)\n, and invokes that.\n\n\nFinally, Lines 10-11 call \nequals\n of a \nCircle\n object on a \nCircle\n object.  Even though there are two overloaded methods which Java can call without type error, Java always invokes \nthe most specific method\n, in this case, \nequals(Circle)\n.\n\n\n\n\nWhy do we need to override \nequals\n in \nObject\n, rather than just using the \nCircle\n-specific \nequals(Circle)\n?  As shown above, only when an object declared as \nCircle\n calls \nequals\n on another \nCircle\n object, the \nCircle\n-specific \nequals(Circle)\n is invoked.\n\nTo write code that is general and reusable, we should exploit OO polymorphism, that means different subclasses of \nObject\n implement their own customized version of \nequals\n, and the right version of \nequals\n will be called.\n\n\nOne example of where this is called the \ncontains(Object)\n method from class \nArrayList\n (we will cover this later in class), which checks if an object is already in the list, and to check this, it checks for equality of the given object with every object in the \nArrayList\n, by calling \nequals(Object)\n.\n\n\ntoString\n\n\nWe now turn our attention to another method in \nObject\n that we could override, the \ntoString()\n method.  \ntoString()\n is called whenever the \nString\n representation of an object is needed.  For instance, when we try to print an object.   By default, the \ntoString\n of \nObject\n simply prints the name of the class, followed by \n@\n, followed by the reference.   It is often useful to override this to include the content of the object as well, for debugging and logging purposes.  This is a much more useful and flexible way than writing our own \nprint()\n method as we have seen in earlier lectures, since we are not limited to printing to standard output anymore.\n\n\n\n\njava.lang.String\n\n\nString\n is one of the many useful classes provided by Java.  You can skim through to see what methods are available and keep the \nAPI reference\n handy.\n\n\n\n\n1\n2\n3\n4\n5\n6\nclass\n \nPoint\n \n{\n\n  \n:\n\n  \npublic\n \nString\n \ntoString\n()\n \n{\n\n    \nreturn\n \n\"(\"\n \n+\n \nx\n \n+\n \n\",\"\n \n+\n \ny\n \n\")\"\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nNow, if we run:\n\n1\n2\nPoint\n \np\n \n=\n \nnew\n \nPoint\n(\n0\n,\n0\n);\n\n\nSystem\n.\nout\n.\nprintln\n(\np\n);\n\n\n\n\n\n\nIt should print \n(0,0)\n instead of \nPoint\n@1235\nde\n.\n\n\nThe ability to override methods that you inherit from a parent, including root class \nObject\n, makes overriding an extremely powerful tool.  It allows you to change how existing libraries behave, and customize them to your classes, without changing a single line of their code or even accessing their code!\n\n\nAs Uncle Ben said, \"With great power, comes great responsibility.\"  We must use overriding and inheritance carefully.  Since we can affect how existing libraries behave, we can easily break existing code and introduce bugs.  Since you may not have access to these existing code, it is often tricky to trace and debug.  \n\n\n\n\nUsing \nsuper\n To Access Overridden Methods\n\n\nAfter a subclass overrides a method in the superclass, the methods have been overridden can still be called, with \nsuper\n keyword. \nFor instance, the following \ntoString\n implementation of \nPoint\n calls the \ntoString\n from \nObject\n, to prefix the string representation of Point with the class and reference address.\n\n1\n2\n3\n4\n@Override\n\n\npublic\n \nString\n \ntoString\n()\n \n{\n\n  \nreturn\n \nsuper\n.\ntoString\n()\n \n+\n \n\" (\"\n \n+\n \nx\n \n+\n \n\",\"\n \n+\n \ny\n \n+\n \n\")\"\n;\n\n\n}\n\n\n\n\n\n\n\n\nThe \nprotected\n and Default Access Modifiers\n\n\nIn the last lecture, when we inherit \nCircle\n from \nPaintedShape\n, we set the fields \nfillColor\n etc to \nprivate\n, to create an abstraction barrier between the superclass and its subclasses.  This barrier allows the implementor of the superclass to freely change the internal representation of the superclass without worrying about the effect on the subclasses.\n\n\nSometimes, the implementor of a superclass may choose to allow the subclasses to have access to some of its fields and methods, but yet prevent other classes from accessing them.  This type of access restriction can be achieved with the \nprotected\n access modifier. \n\n\n\n\nprotected\n in Other Languages\n\n\nC++ and C# both provide \nprotected\n keyword, allowing subclasses to access \nprotected\n fields and methods of the superclass.  Swift, however, decided that \ndeciding fields/methods access based on inheritance complicates things without bringing any advantage\n and does not provide the \nprotected\n access modifier.\n\n\n\n\nJava Packages\n\n\nSo far we have written several classes and interfaces (\nCircle\n, \nPoint\n, \nShape\n, \nPrintable\n, \nPaintedShape\n, \nSquare\n, etc).  We are using common names to name our classes and interfaces, and it is not inconceivable that in a large software project using external libraries that we will end up with multiple classes with the same name!  For instance, Java library provides a \nPoint\n class and a \nShape\n interface as well.  \n\n\nJava \npackage\n mechanism allows us to group relevant classes and interfaces together under a \nnamespace\n.  You have seen two packages so far: \njava.awt\n where we import the \nColor\n class from, and \njava.lang\n where we import the \nMath\n class from.  These are provided by Java as standard libraries.  We can also create our own package and put the classes and interfaces into the same package.  We (and the clients) can then import and use the classes and interfaces that we provide.  \n\n\nBesides providing namespace to disambiguate classes or interfaces with the same name, Java \npackage\n also provides another higher-layer of abstraction barrier.  In Java, a \nprotected\n field or method can be accessed by other classes in the same package.\n\n\nFinally, Java has the forth access modifier known as the default modifier.  This access modifier (or lack of it) is used when we do not specify \npublic\n, \nprotected\n, nor \nprivate\n.  A field or member with no access modifier is private to the package -- it is \npublic\n to all classes within the same package, but \nprivate\n to classes outside of the package.  The default access modifier is also known as \npackage-private\n by some.\n\n\nThe following table, taken from \nOracle's Java Tutorial\n\nsummarizes the access modifiers:\n\n\n\n\n\n\n\n\nAccess Modifier\n\n\nClass\n\n\nPackage\n\n\nSubclass\n\n\nWorld\n\n\n\n\n\n\n\n\n\n\npublic\n\n\nY\n\n\nY\n\n\nY\n\n\nY\n\n\n\n\n\n\nprotected\n\n\nY\n\n\nY\n\n\nY\n\n\nN\n\n\n\n\n\n\nno modifier\n\n\nY\n\n\nY\n\n\nN\n\n\nN\n\n\n\n\n\n\nprivate\n\n\nY\n\n\nN\n\n\nN\n\n\nN\n\n\n\n\n\n\n\n\nIn Java, every class belongs to a package, whether we like it or not.  If we do not declare that a class belongs to a package, then it belongs to the default package.\n\n\nWe will not be discussing \npackage\n much more than what we have done today.  You can learn more about packages via \nOracle's Java Tutorial\n.\n\n\nModeling HAS-A Relationship\n\n\nInheritance in OO tends to get overused.  \nIn practice, we seldom use inheritance\n.  Let's look at some examples of how \nnot\n to use inheritance, and why.\n\n\nYou may come across examples online or in books that look like the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nclass\n \nPoint\n \n{\n\n  \nprotected\n \ndouble\n \nx\n;\n\n  \nprotected\n \ndouble\n \ny\n;\n\n    \n:\n\n\n}\n\n\n\nclass\n \nCircle\n \nextends\n \nPoint\n \n{\n\n  \nprotected\n \ndouble\n \nradius\n;\n\n    \n:\n\n\n}\n\n\n\nclass\n \nCylinder\n \nextends\n \nCircle\n \n{\n\n  \nprotected\n \ndouble\n \nheight\n;\n\n    \n:\n\n\n}\n\n\n\n\n\n\n\nCircle\n implemented like the above would have the center coordinate inherited from the parent (so it has three fields, x, y, and radius), and \nCylinder\n would have the fields corresponding to a circle, which is its base, and the height.  So, we are \nreusing\n the fields and the code related to initializing and manipulating the fields.\n\n\nWhen we start to consider methods encapsulated with each object, things start to get less intuitive.  What does \ngetPerimeter()\n and \ngetArea()\n of \nCylinder\n means?  How about \ndistanceTo\n between a \nCylinder\n and a \nPoint\n?   What is the meaning of a \nCircle\n containing a \nCylinder\n?\n\n\nThe inheritance hierarchy above actually models the HAS-A relationship: A circle has a center (which is a point), a cylinder has a base which is a circle.  Therefore, a better way to capture the relationship between the three types of objects is through \ncomposition\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nclass\n \nPoint\n \n{\n\n  \ndouble\n \nx\n;\n\n  \ndouble\n \ny\n;\n\n    \n:\n\n\n}\n\n\n\nclass\n \nCircle\n \n{\n\n  \nPoint\n \ncenter\n;\n\n  \ndouble\n \nradius\n;\n\n    \n:\n\n\n}\n\n\n\nclass\n \nCylinder\n \n{\n\n  \nCircle\n \nbase\n;\n\n  \ndouble\n \nheight\n;\n\n    \n:\n\n\n}\n\n\n\n\n\n\n\nComposition allows us to build more complex classes from simpler ones, and is usually favored over inheritance.  \n\n\nThe \nPaintedShape\n class from Lecture 2, for instance, could be modeled as a composition of a \nStyle\n object and \nShape\n object.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nclass\n \nStyle\n \n{\n\n  \nColor\n \nfillColor\n;\n\n  \nColor\n \nborderColor\n;\n\n    \n:\n\n\n}\n\n\n\nclass\n \nPaintedShape\n \n{\n\n  \nStyle\n \nstyle\n;\n\n  \nShape\n \nshape\n;\n\n    \n:\n\n  \npublic\n \ndouble\n \ngetArea\n()\n \n{\n\n    \nreturn\n \nshape\n.\ngetArea\n();\n\n  \n}\n\n  \n:\n\n  \npublic\n \nvoid\n \nfillWith\n(\nColor\n \nc\n)\n \n{\n\n    \nstyle\n.\nfillWith\n(\nc\n);\n\n  \n}\n\n    \n:\n\n\n}\n\n\n\n\n\n\n\nThe design above is also known as the \nforwarding\n -- calls to methods on \nPaintedShape\n gets forwarded to either \nStyle\n or \nShape\n objects.\n\n\nModeling IS-A Relationship\n\n\nA better situation to use inheritance is to model a IS-A relationship: when the subclass behaves just like parent class, but has some additional behaviors.  For instance, it is natural to model a \nPaintedCircle\n as a subclass of \nCircle\n -- since a PaintedCircle has all the behavior of \nCircle\n, but has \nadditional\n behaviors related to being painted.\n\n\n1\n2\n3\n4\nclass\n \nPaintedCircle\n \nextends\n \nCircle\n \n{\n\n  \nStyle\n \nstyle\n;\n\n    \n:\n\n\n}\n\n\n\n\n\n\n\nA more tricky situation for modeling a IS-A relationship occurs when the subclass behaves just like the parent class \nmost\n of the time, but sometimes behave slightly differently than the parent.  Consider how we model a rectangle and a square.  Normally, we consider a square IS-A special case of a rectangle.  So, we could model as:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nclass\n \nRectangle\n \n{\n\n  \ndouble\n \nwidth\n,\n \nheight\n;\n\n  \nPoint\n \ntopLeft\n;\n\n  \nRectangle\n(\nPoint\n \ntopLeft\n,\n \nin\n \nwidth\n,\n \nint\n \nheight\n)\n \n{\n\n    \nthis\n.\ntopLeft\n \n=\n \ntopLeft\n;\n\n    \nthis\n.\nwidth\n \n=\n \nwidth\n;\n\n    \nthis\n.\nheight\n \n=\n \nheight\n;\n\n  \n}\n\n\n}\n\n\n\nclass\n \nSquare\n \nextends\n \nRectangle\n \n{\n\n  \nSquare\n(\nPoint\n \ntopLeft\n,\n \nint\n \nwidth\n)\n \n{\n\n      \nsuper\n(\ntopLeft\n,\n \nwidth\n,\n \nwidth\n);\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nSo far, so good.\n\n\nNow, suppose the two classes are written by two different developers.  The developer who wrote Rectangle decided to add the method \nresizeTo\n:\n\n\n1\n2\n3\n4\n5\n6\n7\nclass\n \nRectangle\n \n{\n\n      \n:\n\n    \nvoid\n \nsetSize\n(\nint\n \nwidth\n,\n \nint\n \nheight\n)\n \n{\n\n        \nthis\n.\nwidth\n \n=\n \nwidth\n;\n\n        \nthis\n.\nheight\n \n=\n \nheight\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nThis developer assumes the behavior that, after calling \nsetSize(w, h)\n, the width of the rectangle will be \nw\n and the height will be \nh\n.  He/she publishes this API, and another developer then assumes this behavior, and wrote some code, like:\n\n\n1\n2\n3\n4\nvoid\n \ndoSomething\n(\nRectangle\n \nr\n)\n \n{\n\n  \nr\n.\nsetSize\n(\n1\n,\n \n2\n);\n\n    \n:\n\n\n}\n\n\n\n\n\nWhat should the developer who develops \nSquare\n do?  Since \nSquare\n is a subclass of \nRectangle\n, it would inherit \nsetSize\n from its parent, but it does not make sense to call \nsetSize\n with two different parameters.  Sure, \nSquare\n can overload \nsetSize\n and provide a \nsetSize\n with one parameter only, but that does not prevent someone from calling \nsetSize\n with two parameters on a \nSquare\n.  Someone could do the following and the code would still compile and run, turning the square into a rectangle!\n\n\n1\n2\nSquare\n \ns\n \n=\n \nnew\n \nSquare\n(\nnew\n \nPoint\n(\n0\n,\n0\n),\n \n10\n);\n\n\ns\n.\nsetSize\n(\n4\n,\n \n8\n);\n\n\n\n\n\n\n\nThe \nSquare\n developer can try to override \nsetSize\n, to ignore the second parameter:\n\n\n1\n2\n3\n4\n5\n6\n7\nclass\n \nSquare\n \n{\n\n    \n:\n\n  \nvoid\n \nsetSize\n(\nint\n \nwidth\n,\n \nint\n \nheight\n)\n \n{\n\n    \nthis\n.\nwidth\n \n=\n \nwidth\n;\n\n    \nthis\n.\nheight\n \n=\n \nwidth\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nThis makes more sense and would make everyone who uses \nSquare\n happy -- a square is always a square -- but it introduces an \ninconsistency\n in behavior and will most likely break another part of the code that the developer is totally unaware of.  The developer of \ndoSomething\n suddenly cannot assume that \nsetSize\n works as intended and documented.\n\n\nIt is a developer's responsibility that any inheritance with method overriding does not alter the behavior of existing code.  This brings us to the \nLiskov Substitution Principle\n (LSP), which says that: \"Let \n\\(\\phi(x)\\)\n be a property provable about objects \n\\(x\\)\n of type \n\\(T\\)\n. Then \n\\(\\phi(y)\\)\n should be true for objects \n\\(y\\)\n of type \n\\(S\\)\n where \n\\(S\\)\n is a subtype of \n\\(T\\)\n.\"   \n\n\nThis means that if \n\\(S\\)\n is a subclass of \n\\(T\\)\n, then an object of type \n\\(T\\)\n can be replaced by an object of type \n\\(S\\)\n without changing the desirable property of the program.\n\n\nIn the example above, this means that everywhere we can expect rectangles to be used, we can replace a rectangle with a square.  This was no longer true with the introduction of \nsetSize\n method.\n\n\nPreventing Inheritance and Method Overriding\n\n\nSometimes, it is useful for a developer to explicitly prevent a class to be inherited.  Not allowing inheritance would make it much easier to argue for the correctness of programs, something that is important when it comes to writing secure programs.  Both the two java classes you have seen, \njava.lang.Math\n and \njava.lang.String\n, cannot be inherited from.  In Java, we use the keyword \nfinal\n when declaring a class to tell Java that we ban this class from being inherited.\n\n\n1\n2\n3\nfinal\n \nclass\n \nCircle\n \n{\n\n    \n:\n\n\n}\n\n\n\n\n\n\n\nAlternatively, we can allow inheritance, but still prevent a specific method from being overridden, by declaring a method as \nfinal\n.  Usually, we do this on methods that are critical for the correctness of the class.\n\n\n1\n2\n3\n4\n5\n6\nclass\n \nCircle\n \n{\n\n   \n:\n\n  \nfinal\n \npublic\n \nboolean\n \ncontains\n(\nPoint\n \np\n)\n \n{\n\n    \n:\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nfinal variable\n\n\nThe keyword \nfinal\n has another use.   When declaring a variable as \nfinal\n, just like\n    \nPI\n in \nMath\n, it prevents the variable from being modified.  In other words, the variable becomes constant.\n\n1\n    \npublic\n \nstatic\n \nfinal\n \ndouble\n \nPI\n   \n=\n \n3.141592653589793\n;\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\n\nIn the class \nPoint\n, add a new method \nequals\n that overrides the \nequals\n from \nObject\n, so that when calling \np.equals(q)\n on two \nPoint\n objects, the method return \ntrue\n if and only \np\n and \nq\n coincide (i.e., have the same coordinates).\n\n\n\n\n\n\nConsider the following classes: \nFormattedText\n adds formatting information to the text. We call \ntoggleUnderline()\n to add or remove underlines from the text. A \nURL\n \nis a\n \nFormattedText\n that is always underlined.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nclass\n \nFormattedText\n \n{\n\n  \npublic\n \nString\n \ntext\n;\n \n  \npublic\n \nboolean\n \nisUnderlined\n;\n\n  \npublic\n \nvoid\n \ntoggleUnderline\n()\n \n{\n \n    \nisUnderlined\n \n=\n \n(!\nisUnderlined\n);\n\n  \n}\n\n\n}\n\n\n\nclass\n \nURL\n \nextends\n \nFormattedText\n \n{\n \n  \npublic\n \nURL\n()\n \n{\n \n    \nisUnderlined\n \n=\n \ntrue\n;\n\n  \n}\n\n  \npublic\n \nvoid\n \ntoggleUnderline\n()\n \n{\n \n    \n// do nothing\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nDoes it violate the Liskov Substitution Principle? Explain.\n\n\n\n\n\n\nConsider each of the code snippets below.  Will it result in a compilation or run time error?  If not, what will be printed? \n\n\n(a)\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nclass\n \nA\n \n{\n\n  \nvoid\n \nf\n()\n \n{\n \n    \nSystem\n.\nout\n.\nprintln\n(\n\"A f\"\n);\n \n  \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\nA\n \na\n \n=\n \nb\n;\n\n\na\n.\nf\n();\n\n\n\n\n\n\n(b)\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nclass\n \nA\n \n{\n\n  \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"A f\"\n);\n\n  \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"B f\"\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\nA\n \na\n \n=\n \nb\n;\n\n\na\n.\nf\n();\n\n\na\n \n=\n \nnew\n \nA\n();\n\n\na\n.\nf\n();\n\n\n\n\n\n\n(C)\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nclass\n \nA\n \n{\n\n  \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"A f\"\n);\n\n  \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \nvoid\n \nf\n()\n \n{\n\n    \nsuper\n.\nf\n();\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"B f\"\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\nA\n \na\n \n=\n \nb\n;\n\n\na\n.\nf\n();\n\n\n\n\n\n\n(d)\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nclass\n \nA\n \n{\n\n  \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"A f\"\n);\n\n  \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \nvoid\n \nf\n()\n \n{\n\n    \nthis\n.\nf\n();\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"B f\"\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\nA\n \na\n \n=\n \nb\n;\n\n\na\n.\nf\n();\n\n\n\n\n\n\n(e)\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nclass\n \nA\n \n{\n\n  \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"A f\"\n);\n\n  \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \nint\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"B f\"\n);\n\n    \nreturn\n \n0\n;\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\nA\n \na\n \n=\n \nb\n;\n\n\na\n.\nf\n();\n\n\n\n\n\n\n(f)\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nclass\n \nA\n \n{\n\n  \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"A f\"\n);\n\n  \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \nvoid\n \nf\n(\nint\n \nx\n)\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"B f\"\n);\n\n    \nreturn\n \nx\n;\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\nb\n.\nf\n(\n0\n);\n\n\nA\n \na\n \n=\n \nb\n;\n\n\na\n.\nf\n();\n\n\na\n.\nf\n(\n0\n);\n\n\n\n\n\n\n(g)\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nclass\n \nA\n \n{\n\n  \npublic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"A f\"\n);\n\n  \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \npublic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"B f\"\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nA\n \na\n \n=\n \nb\n;\n\n\na\n.\nf\n();\n\n\nb\n.\nf\n();\n\n\n\n\n\n\n(h)\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nclass\n \nA\n \n{\n\n  \nprivate\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"A f\"\n);\n\n  \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \npublic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"B f\"\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nA\n \na\n \n=\n \nb\n;\n\n\na\n.\nf\n();\n\n\nb\n.\nf\n();\n\n\n\n\n\n\n(i)\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nclass\n \nA\n \n{\n\n  \nstatic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"A f\"\n);\n\n  \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \npublic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"B f\"\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nA\n \na\n \n=\n \nb\n;\n\n\na\n.\nf\n();\n\n\nb\n.\nf\n();\n\n\n\n\n\n\n(j)\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nclass\n \nA\n \n{\n\n  \nstatic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"A f\"\n);\n\n  \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \nstatic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"B f\"\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nA\n \na\n \n=\n \nb\n;\n\n\nA\n.\nf\n();\n\n\nB\n.\nf\n();\n\n\na\n.\nf\n();\n\n\nb\n.\nf\n();\n\n\n\n\n\n\n(k)\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nclass\n \nA\n \n{\n\n  \nprivate\n \nint\n \nx\n \n=\n \n0\n;\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \npublic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\nx\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\n\n\n\n\n(l)\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nclass\n \nA\n \n{\n\n  \nprivate\n \nint\n \nx\n \n=\n \n0\n;\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \npublic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\nsuper\n.\nx\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\n\n\n\n\n(m)\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nclass\n \nA\n \n{\n\n  \nprotected\n \nint\n \nx\n \n=\n \n0\n;\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \npublic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\nx\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\n\n\n\n\n(n)\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nclass\n \nA\n \n{\n\n  \nprotected\n \nint\n \nx\n \n=\n \n0\n;\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \npublic\n \nint\n \nx\n \n=\n \n1\n;\n\n  \npublic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\nx\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\n\n\n\n\n(o)\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nclass\n \nA\n \n{\n\n  \nprotected\n \nint\n \nx\n \n=\n \n0\n;\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \npublic\n \nint\n \nx\n \n=\n \n1\n;\n\n  \npublic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\nsuper\n.\nx\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\n\n\n\n\n\n\n\n\nConsider each of the code snippets below.  Which will result in a compilation error?\n\n\n(a)\n\n1\n2\n3\n4\nclass\n \nA\n \n{\n\n  \npublic\n \nvoid\n \nf\n(\nint\n \nx\n)\n \n{}\n\n  \npublic\n \nvoid\n \nf\n(\nboolean\n \ny\n)\n \n{}\n\n\n}\n\n\n\n\n\n\n(b)\n\n1\n2\n3\n4\nclass\n \nA\n \n{\n\n  \npublic\n \nvoid\n \nf\n(\nint\n \nx\n)\n \n{}\n\n  \npublic\n \nvoid\n \nf\n(\nint\n \ny\n)\n \n{}\n\n\n}\n\n\n\n\n\n\n(C)\n\n1\n2\n3\n4\nclass\n \nA\n \n{\n\n  \nprivate\n \nvoid\n \nf\n(\nint\n \nx\n)\n \n{}\n\n  \npublic\n \nvoid\n \nf\n(\nint\n \ny\n)\n \n{}\n\n\n}\n\n\n\n\n\n\n(d)\n\n1\n2\n3\n4\n5\n6\nclass\n \nA\n \n{\n\n  \npublic\n \nint\n \nf\n(\nint\n \nx\n)\n \n{\n\n      \nreturn\n \nx\n;\n\n  \n}\n\n  \npublic\n \nvoid\n \nf\n(\nint\n \ny\n)\n \n{}\n\n\n}\n\n\n\n\n\n\n(e)\n\n1\n2\n3\n4\nclass\n \nA\n \n{\n\n  \npublic\n \nvoid\n \nf\n(\nint\n \nx\n,\n \nString\n \ns\n)\n \n{}\n\n  \npublic\n \nvoid\n \nf\n(\nString\n \ns\n,\n \nint\n \ny\n)\n \n{}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you override \nequals()\n you should generally override \nhashCode()\n as well, but let's leave that for another lesson on another day.\u00a0\n\u21a9",
            "title": "3. More on Inheritance"
        },
        {
            "location": "/lec03/index.html#lecture-3",
            "text": "",
            "title": "Lecture 3"
        },
        {
            "location": "/lec03/index.html#learning-objectives",
            "text": "At the end of this lecture, students should   be familiar with the concept and power of method overriding  understand how Java dispatches methods that have been overridden  appreciate the usefulness of overriding  equals  and  toString  in the  Object  class  be exposed to the  String  class and its associated methods, especially the  +  operator  be aware that inheritance can be easily abused and leads to bad code  understand the differences between HAS-A and IS-A relationship  be able to use composition to model classes with HAS-A relationship  be able to use inheritance to model classes with IS-A relationship  understand the Liskov Substitution Principle and thus be aware that not all IS-A relationship should be modeled with inheritance  understand the purposes of the Java keyword  final",
            "title": "Learning Objectives"
        },
        {
            "location": "/lec03/index.html#java-object-class",
            "text": "In Java, every class inherits from the  class  Object  implicitly.  The  Object  class defines many useful methods that are common to all objects.  The two useful ones are :   equals(Object obj) , which checks if two objects are equal to each other, and  toString() , which returns a string representation of the object, and is a better way to print an object than the  print()  method and  Printable  interface we write.   The  equals()  method as implemented in  Object , only compares if two object references refer to the same object.  In the Figure below, we show an array  circles  with three  Circle  objects.  All three circles are centered at (0, 0) with radius 10.  They are created as follows:  1\n2\n3\n4      Circle []   circles   =   new   Circle [ 3 ]; \n     circles [ 0 ]   =   new   Circle ( new   Point ( 0 ,   0 ),   10 ); \n     circles [ 1 ]   =   new   Circle ( new   Point ( 0 ,   0 ),   10 ); \n     circles [ 2 ]   =   circles [ 1 ];    When you check  circles[0].equals(circles[1]) , however, it returns  false , because even though  circles[0]  and  circles[1]  are semantically the same, they refer to the two different objects.  Calling  circles[1].equals(circles[2])  returns  true , as they are referring to the same object.     What if you need a method that compares if two circles are  semantically  the same?  You can implement your own method, say  isTheSameCircle(Circle c) .  But, the  equals()  method is universal (all classes inherits this method) and is used by other classes for equality tests.  So, in most cases, we can implement a method called  equals()  with the same signature with the semantic that we want[^8].  That's right.  Even though we cannot have two methods with the same signature in the same class, we can have two methods with the same signature, one in the superclass (or the superclass's superclass, and so on), one in the subclass.  The method in the subclass will override the method in the superclass.  For example,   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 class   Circle   implements   Shape ,   Printable   { \n     : \n   @Override \n   public   boolean   equals ( Object   obj )   { \n     if   ( this   ==   obj )   { \n       return   true ; \n     } \n     if   ( obj   instanceof   Circle )   { \n       Circle   circle   =   ( Circle )   obj ; \n       return   ( circle . center . equals ( center )   &&   circle . radius   ==   radius ); \n     }   else   { \n       return   false ; \n     } \n   }  }    Line 10 above compares if the two center points are equal, and the two radius values are equal.  So, we compare if the two circles are semantically the same.  The rest of this code requires some explanation:   Line 3 uses the same  @Override  annotation that we have seen before -- we are telling the compilers that we are overriding a method in the superclass.  Line 4 declares the method  equals , and note that it has to have exactly the same signature as the  equals()  method we are overriding.  Even though we meant to compare two  Circle  objects, we cannot declare it as  public boolean equals(Circle circle) , since the signature is different and the compiler would complain.  Since  obj  is of an  Object  type, we can actually pass in any object to compare with a  Circle .  Line 5 checks if the comparison makes sense, by checking if  obj  is instantiated from a  Circle  class, using the  instanceof  keyword.  If  obj  is not even a  Circle  object, then we simply return  false .  If  obj  is an instance of  Circle , we assign  obj  to a variable of type  Circle  and compare as in Line 10.   For the code above to work, we have to override the  equals  method of  Point  as well.  That is left as an exercise 1 .  One final note: polymorphism works here as well.  If we have an object reference  obj  of type  Object  that refers to an instance of a  Circle , calling  obj.equals()  will invoke the  equals()  method of  Circle , not  Object , just like the case of interfaces.  Recall that when a class implements an interface, an instance of that class can take on the type of that interface.  Similarly, when a class inherits from a parent class, an instance of that class can take on the type of the parent class.  So, we can do the following:  1\n2 Circle   c   =   new   Circle ( new   Point ( 0 , 0 ),   10 );  Object   o   =   c ;    Line 2 assigns the circle object  c  to  o  of type  Object .  So, both  o  and  c  are referring to the same objects.  Due to type checking at compile time, however, Java does not allow methods and fields in the subclass (e.g.,  Circle ) that is not in the superclass (e.g.,  Object ) to be called.  In this example, only the methods known to  Object  can be accessed by  o .  Now, consider what would happen if we override the method  equals()  from the  Object  class.    The method table will update the entry for  equals()  to point to the implementation provided by the  Circle  class, instead of the  Object  class.   Now, consider what would happen if we  overload  the method  equals()  with one that takes in a  Circle  object.  I also throw in a couple of  System.out.print()  to help us figure out what is going on.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 class   Circle   implements   Shape ,   Printable   { \n     : \n   @Override \n   public   boolean   equals ( Object   obj )   { \n     System . out . println ( \"equals(Object) called\" ); \n     if   ( obj   ==   this )   { \n       return   true ; \n     } \n     if   ( obj   instanceof   Circle )   { \n       Circle   circle   =   ( Circle )   obj ; \n       return   ( circle . center . equals ( center )   &&   circle . radius   ==   radius ); \n     }   else   { \n       return   false ; \n     } \n   } \n\n   public   boolean   equals ( Circle   circle )   { \n     System . out . println ( \"equals(Circle) called\" ); \n     return   (( circle . center . equals ( center )   &&   circle . radius   ==   radius ); \n   }   }    Since this new  equals()  method does not override the method in  Object , it gets its own slot in the method table of  Circle , instead of reusing one from the  Object .   Now, consider which version of  equals  are called by the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 Circle   c1   =   new   Circle ( new   Point ( 0 , 0 ),   10 );  Circle   c2   =   new   Circle ( new   Point ( 0 , 0 ),   10 );  Object   o1   =   c1 ;  Object   o2   =   c2 ;  o1 . equals ( o2 );  o1 . equals (( Circle ) o2 );  o1 . equals ( c2 );  c1 . equals ( o2 );  c1 . equals (( Circle ) o2 );  c1 . equals ( c2 );    Lines 6-9 call  equals(Object)  defined in  Circle \uff0c while Lines 10-11 call  equals(Circle)  defined in  Circle .  Let's look at why for each one:   Line 6 calls  equals  of an  Object  object on an  Object  object.  Java checks through all methods defined in  Object , and finds a method that matches the signature, which is the  equals(Object)  (which  Circle  has overridden). This is the one that will get called.  Line 7-8 call  equals  of an  Object  object on a  Circle  object.  Java checks through all methods defined in  Object  and finds one method that matches the signature, which is  equals(Object)  (which  Circle  has overridden).  Even though there is another method  equals(Circle)  defined, it is defined as part of the  Circle  class, which Java refuses to access because  o1  is declared to have the type  Object .  Since the only method that Java can find has an argument of type  Object , the argument is cast as an  Object  when  equals  is invoked.  Line 9 calls  equals  of a  Circle  object on an  Object  object.  Java finds a method with the matching signature,  equals(Object) , and invokes that.  Finally, Lines 10-11 call  equals  of a  Circle  object on a  Circle  object.  Even though there are two overloaded methods which Java can call without type error, Java always invokes  the most specific method , in this case,  equals(Circle) .   Why do we need to override  equals  in  Object , rather than just using the  Circle -specific  equals(Circle) ?  As shown above, only when an object declared as  Circle  calls  equals  on another  Circle  object, the  Circle -specific  equals(Circle)  is invoked. \nTo write code that is general and reusable, we should exploit OO polymorphism, that means different subclasses of  Object  implement their own customized version of  equals , and the right version of  equals  will be called.  One example of where this is called the  contains(Object)  method from class  ArrayList  (we will cover this later in class), which checks if an object is already in the list, and to check this, it checks for equality of the given object with every object in the  ArrayList , by calling  equals(Object) .",
            "title": "Java Object class"
        },
        {
            "location": "/lec03/index.html#tostring",
            "text": "We now turn our attention to another method in  Object  that we could override, the  toString()  method.   toString()  is called whenever the  String  representation of an object is needed.  For instance, when we try to print an object.   By default, the  toString  of  Object  simply prints the name of the class, followed by  @ , followed by the reference.   It is often useful to override this to include the content of the object as well, for debugging and logging purposes.  This is a much more useful and flexible way than writing our own  print()  method as we have seen in earlier lectures, since we are not limited to printing to standard output anymore.   java.lang.String  String  is one of the many useful classes provided by Java.  You can skim through to see what methods are available and keep the  API reference  handy.   1\n2\n3\n4\n5\n6 class   Point   { \n   : \n   public   String   toString ()   { \n     return   \"(\"   +   x   +   \",\"   +   y   \")\" ; \n   }  }    Now, if we run: 1\n2 Point   p   =   new   Point ( 0 , 0 );  System . out . println ( p );    It should print  (0,0)  instead of  Point @1235 de .  The ability to override methods that you inherit from a parent, including root class  Object , makes overriding an extremely powerful tool.  It allows you to change how existing libraries behave, and customize them to your classes, without changing a single line of their code or even accessing their code!  As Uncle Ben said, \"With great power, comes great responsibility.\"  We must use overriding and inheritance carefully.  Since we can affect how existing libraries behave, we can easily break existing code and introduce bugs.  Since you may not have access to these existing code, it is often tricky to trace and debug.     Using  super  To Access Overridden Methods  After a subclass overrides a method in the superclass, the methods have been overridden can still be called, with  super  keyword. \nFor instance, the following  toString  implementation of  Point  calls the  toString  from  Object , to prefix the string representation of Point with the class and reference address. 1\n2\n3\n4 @Override  public   String   toString ()   { \n   return   super . toString ()   +   \" (\"   +   x   +   \",\"   +   y   +   \")\" ;  }",
            "title": "toString"
        },
        {
            "location": "/lec03/index.html#the-protected-and-default-access-modifiers",
            "text": "In the last lecture, when we inherit  Circle  from  PaintedShape , we set the fields  fillColor  etc to  private , to create an abstraction barrier between the superclass and its subclasses.  This barrier allows the implementor of the superclass to freely change the internal representation of the superclass without worrying about the effect on the subclasses.  Sometimes, the implementor of a superclass may choose to allow the subclasses to have access to some of its fields and methods, but yet prevent other classes from accessing them.  This type of access restriction can be achieved with the  protected  access modifier.    protected  in Other Languages  C++ and C# both provide  protected  keyword, allowing subclasses to access  protected  fields and methods of the superclass.  Swift, however, decided that  deciding fields/methods access based on inheritance complicates things without bringing any advantage  and does not provide the  protected  access modifier.",
            "title": "The protected and Default Access Modifiers"
        },
        {
            "location": "/lec03/index.html#java-packages",
            "text": "So far we have written several classes and interfaces ( Circle ,  Point ,  Shape ,  Printable ,  PaintedShape ,  Square , etc).  We are using common names to name our classes and interfaces, and it is not inconceivable that in a large software project using external libraries that we will end up with multiple classes with the same name!  For instance, Java library provides a  Point  class and a  Shape  interface as well.    Java  package  mechanism allows us to group relevant classes and interfaces together under a  namespace .  You have seen two packages so far:  java.awt  where we import the  Color  class from, and  java.lang  where we import the  Math  class from.  These are provided by Java as standard libraries.  We can also create our own package and put the classes and interfaces into the same package.  We (and the clients) can then import and use the classes and interfaces that we provide.    Besides providing namespace to disambiguate classes or interfaces with the same name, Java  package  also provides another higher-layer of abstraction barrier.  In Java, a  protected  field or method can be accessed by other classes in the same package.  Finally, Java has the forth access modifier known as the default modifier.  This access modifier (or lack of it) is used when we do not specify  public ,  protected , nor  private .  A field or member with no access modifier is private to the package -- it is  public  to all classes within the same package, but  private  to classes outside of the package.  The default access modifier is also known as  package-private  by some.  The following table, taken from  Oracle's Java Tutorial \nsummarizes the access modifiers:     Access Modifier  Class  Package  Subclass  World      public  Y  Y  Y  Y    protected  Y  Y  Y  N    no modifier  Y  Y  N  N    private  Y  N  N  N     In Java, every class belongs to a package, whether we like it or not.  If we do not declare that a class belongs to a package, then it belongs to the default package.  We will not be discussing  package  much more than what we have done today.  You can learn more about packages via  Oracle's Java Tutorial .",
            "title": "Java Packages"
        },
        {
            "location": "/lec03/index.html#modeling-has-a-relationship",
            "text": "Inheritance in OO tends to get overused.   In practice, we seldom use inheritance .  Let's look at some examples of how  not  to use inheritance, and why.  You may come across examples online or in books that look like the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 class   Point   { \n   protected   double   x ; \n   protected   double   y ; \n     :  }  class   Circle   extends   Point   { \n   protected   double   radius ; \n     :  }  class   Cylinder   extends   Circle   { \n   protected   double   height ; \n     :  }    Circle  implemented like the above would have the center coordinate inherited from the parent (so it has three fields, x, y, and radius), and  Cylinder  would have the fields corresponding to a circle, which is its base, and the height.  So, we are  reusing  the fields and the code related to initializing and manipulating the fields.  When we start to consider methods encapsulated with each object, things start to get less intuitive.  What does  getPerimeter()  and  getArea()  of  Cylinder  means?  How about  distanceTo  between a  Cylinder  and a  Point ?   What is the meaning of a  Circle  containing a  Cylinder ?  The inheritance hierarchy above actually models the HAS-A relationship: A circle has a center (which is a point), a cylinder has a base which is a circle.  Therefore, a better way to capture the relationship between the three types of objects is through  composition :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 class   Point   { \n   double   x ; \n   double   y ; \n     :  }  class   Circle   { \n   Point   center ; \n   double   radius ; \n     :  }  class   Cylinder   { \n   Circle   base ; \n   double   height ; \n     :  }    Composition allows us to build more complex classes from simpler ones, and is usually favored over inheritance.    The  PaintedShape  class from Lecture 2, for instance, could be modeled as a composition of a  Style  object and  Shape  object.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 class   Style   { \n   Color   fillColor ; \n   Color   borderColor ; \n     :  }  class   PaintedShape   { \n   Style   style ; \n   Shape   shape ; \n     : \n   public   double   getArea ()   { \n     return   shape . getArea (); \n   } \n   : \n   public   void   fillWith ( Color   c )   { \n     style . fillWith ( c ); \n   } \n     :  }    The design above is also known as the  forwarding  -- calls to methods on  PaintedShape  gets forwarded to either  Style  or  Shape  objects.",
            "title": "Modeling HAS-A Relationship"
        },
        {
            "location": "/lec03/index.html#modeling-is-a-relationship",
            "text": "A better situation to use inheritance is to model a IS-A relationship: when the subclass behaves just like parent class, but has some additional behaviors.  For instance, it is natural to model a  PaintedCircle  as a subclass of  Circle  -- since a PaintedCircle has all the behavior of  Circle , but has  additional  behaviors related to being painted.  1\n2\n3\n4 class   PaintedCircle   extends   Circle   { \n   Style   style ; \n     :  }    A more tricky situation for modeling a IS-A relationship occurs when the subclass behaves just like the parent class  most  of the time, but sometimes behave slightly differently than the parent.  Consider how we model a rectangle and a square.  Normally, we consider a square IS-A special case of a rectangle.  So, we could model as:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 class   Rectangle   { \n   double   width ,   height ; \n   Point   topLeft ; \n   Rectangle ( Point   topLeft ,   in   width ,   int   height )   { \n     this . topLeft   =   topLeft ; \n     this . width   =   width ; \n     this . height   =   height ; \n   }  }  class   Square   extends   Rectangle   { \n   Square ( Point   topLeft ,   int   width )   { \n       super ( topLeft ,   width ,   width ); \n   }  }    So far, so good.  Now, suppose the two classes are written by two different developers.  The developer who wrote Rectangle decided to add the method  resizeTo :  1\n2\n3\n4\n5\n6\n7 class   Rectangle   { \n       : \n     void   setSize ( int   width ,   int   height )   { \n         this . width   =   width ; \n         this . height   =   height ; \n     }  }    This developer assumes the behavior that, after calling  setSize(w, h) , the width of the rectangle will be  w  and the height will be  h .  He/she publishes this API, and another developer then assumes this behavior, and wrote some code, like:  1\n2\n3\n4 void   doSomething ( Rectangle   r )   { \n   r . setSize ( 1 ,   2 ); \n     :  }   \nWhat should the developer who develops  Square  do?  Since  Square  is a subclass of  Rectangle , it would inherit  setSize  from its parent, but it does not make sense to call  setSize  with two different parameters.  Sure,  Square  can overload  setSize  and provide a  setSize  with one parameter only, but that does not prevent someone from calling  setSize  with two parameters on a  Square .  Someone could do the following and the code would still compile and run, turning the square into a rectangle!  1\n2 Square   s   =   new   Square ( new   Point ( 0 , 0 ),   10 );  s . setSize ( 4 ,   8 );    The  Square  developer can try to override  setSize , to ignore the second parameter:  1\n2\n3\n4\n5\n6\n7 class   Square   { \n     : \n   void   setSize ( int   width ,   int   height )   { \n     this . width   =   width ; \n     this . height   =   width ; \n   }  }    This makes more sense and would make everyone who uses  Square  happy -- a square is always a square -- but it introduces an  inconsistency  in behavior and will most likely break another part of the code that the developer is totally unaware of.  The developer of  doSomething  suddenly cannot assume that  setSize  works as intended and documented.  It is a developer's responsibility that any inheritance with method overriding does not alter the behavior of existing code.  This brings us to the  Liskov Substitution Principle  (LSP), which says that: \"Let  \\(\\phi(x)\\)  be a property provable about objects  \\(x\\)  of type  \\(T\\) . Then  \\(\\phi(y)\\)  should be true for objects  \\(y\\)  of type  \\(S\\)  where  \\(S\\)  is a subtype of  \\(T\\) .\"     This means that if  \\(S\\)  is a subclass of  \\(T\\) , then an object of type  \\(T\\)  can be replaced by an object of type  \\(S\\)  without changing the desirable property of the program.  In the example above, this means that everywhere we can expect rectangles to be used, we can replace a rectangle with a square.  This was no longer true with the introduction of  setSize  method.",
            "title": "Modeling IS-A Relationship"
        },
        {
            "location": "/lec03/index.html#preventing-inheritance-and-method-overriding",
            "text": "Sometimes, it is useful for a developer to explicitly prevent a class to be inherited.  Not allowing inheritance would make it much easier to argue for the correctness of programs, something that is important when it comes to writing secure programs.  Both the two java classes you have seen,  java.lang.Math  and  java.lang.String , cannot be inherited from.  In Java, we use the keyword  final  when declaring a class to tell Java that we ban this class from being inherited.  1\n2\n3 final   class   Circle   { \n     :  }    Alternatively, we can allow inheritance, but still prevent a specific method from being overridden, by declaring a method as  final .  Usually, we do this on methods that are critical for the correctness of the class.  1\n2\n3\n4\n5\n6 class   Circle   { \n    : \n   final   public   boolean   contains ( Point   p )   { \n     : \n   }  }     final variable  The keyword  final  has another use.   When declaring a variable as  final , just like\n     PI  in  Math , it prevents the variable from being modified.  In other words, the variable becomes constant. 1      public   static   final   double   PI     =   3.141592653589793 ;",
            "title": "Preventing Inheritance and Method Overriding"
        },
        {
            "location": "/lec03/index.html#exercise",
            "text": "In the class  Point , add a new method  equals  that overrides the  equals  from  Object , so that when calling  p.equals(q)  on two  Point  objects, the method return  true  if and only  p  and  q  coincide (i.e., have the same coordinates).    Consider the following classes:  FormattedText  adds formatting information to the text. We call  toggleUnderline()  to add or remove underlines from the text. A  URL   is a   FormattedText  that is always underlined.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 class   FormattedText   { \n   public   String   text ;  \n   public   boolean   isUnderlined ; \n   public   void   toggleUnderline ()   {  \n     isUnderlined   =   (! isUnderlined ); \n   }  }  class   URL   extends   FormattedText   {  \n   public   URL ()   {  \n     isUnderlined   =   true ; \n   } \n   public   void   toggleUnderline ()   {  \n     // do nothing \n   }  }    Does it violate the Liskov Substitution Principle? Explain.    Consider each of the code snippets below.  Will it result in a compilation or run time error?  If not, what will be printed?   (a)  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 class   A   { \n   void   f ()   {  \n     System . out . println ( \"A f\" );  \n   }  }  class   B   extends   A   {  }  B   b   =   new   B ();  b . f ();  A   a   =   b ;  a . f ();    (b)  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 class   A   { \n   void   f ()   { \n     System . out . println ( \"A f\" ); \n   }  }  class   B   extends   A   { \n   void   f ()   { \n     System . out . println ( \"B f\" ); \n   }  }  B   b   =   new   B ();  b . f ();  A   a   =   b ;  a . f ();  a   =   new   A ();  a . f ();    (C)  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 class   A   { \n   void   f ()   { \n     System . out . println ( \"A f\" ); \n   }  }  class   B   extends   A   { \n   void   f ()   { \n     super . f (); \n     System . out . println ( \"B f\" ); \n   }  }  B   b   =   new   B ();  b . f ();  A   a   =   b ;  a . f ();    (d)  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 class   A   { \n   void   f ()   { \n     System . out . println ( \"A f\" ); \n   }  }  class   B   extends   A   { \n   void   f ()   { \n     this . f (); \n     System . out . println ( \"B f\" ); \n   }  }  B   b   =   new   B ();  b . f ();  A   a   =   b ;  a . f ();    (e)  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 class   A   { \n   void   f ()   { \n     System . out . println ( \"A f\" ); \n   }  }  class   B   extends   A   { \n   int   f ()   { \n     System . out . println ( \"B f\" ); \n     return   0 ; \n   }  }  B   b   =   new   B ();  b . f ();  A   a   =   b ;  a . f ();    (f)  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 class   A   { \n   void   f ()   { \n     System . out . println ( \"A f\" ); \n   }  }  class   B   extends   A   { \n   void   f ( int   x )   { \n     System . out . println ( \"B f\" ); \n     return   x ; \n   }  }  B   b   =   new   B ();  b . f ();  b . f ( 0 );  A   a   =   b ;  a . f ();  a . f ( 0 );    (g)  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 class   A   { \n   public   void   f ()   { \n     System . out . println ( \"A f\" ); \n   }  }  class   B   extends   A   { \n   public   void   f ()   { \n     System . out . println ( \"B f\" ); \n   }  }  B   b   =   new   B ();  A   a   =   b ;  a . f ();  b . f ();    (h)  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 class   A   { \n   private   void   f ()   { \n     System . out . println ( \"A f\" ); \n   }  }  class   B   extends   A   { \n   public   void   f ()   { \n     System . out . println ( \"B f\" ); \n   }  }  B   b   =   new   B ();  A   a   =   b ;  a . f ();  b . f ();    (i)  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 class   A   { \n   static   void   f ()   { \n     System . out . println ( \"A f\" ); \n   }  }  class   B   extends   A   { \n   public   void   f ()   { \n     System . out . println ( \"B f\" ); \n   }  }  B   b   =   new   B ();  A   a   =   b ;  a . f ();  b . f ();    (j)  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 class   A   { \n   static   void   f ()   { \n     System . out . println ( \"A f\" ); \n   }  }  class   B   extends   A   { \n   static   void   f ()   { \n     System . out . println ( \"B f\" ); \n   }  }  B   b   =   new   B ();  A   a   =   b ;  A . f ();  B . f ();  a . f ();  b . f ();    (k)  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 class   A   { \n   private   int   x   =   0 ;  }  class   B   extends   A   { \n   public   void   f ()   { \n     System . out . println ( x ); \n   }  }  B   b   =   new   B ();  b . f ();    (l)  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 class   A   { \n   private   int   x   =   0 ;  }  class   B   extends   A   { \n   public   void   f ()   { \n     System . out . println ( super . x ); \n   }  }  B   b   =   new   B ();  b . f ();    (m)  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 class   A   { \n   protected   int   x   =   0 ;  }  class   B   extends   A   { \n   public   void   f ()   { \n     System . out . println ( x ); \n   }  }  B   b   =   new   B ();  b . f ();    (n)  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 class   A   { \n   protected   int   x   =   0 ;  }  class   B   extends   A   { \n   public   int   x   =   1 ; \n   public   void   f ()   { \n     System . out . println ( x ); \n   }  }  B   b   =   new   B ();  b . f ();    (o)  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 class   A   { \n   protected   int   x   =   0 ;  }  class   B   extends   A   { \n   public   int   x   =   1 ; \n   public   void   f ()   { \n     System . out . println ( super . x ); \n   }  }  B   b   =   new   B ();  b . f ();      Consider each of the code snippets below.  Which will result in a compilation error?  (a) 1\n2\n3\n4 class   A   { \n   public   void   f ( int   x )   {} \n   public   void   f ( boolean   y )   {}  }    (b) 1\n2\n3\n4 class   A   { \n   public   void   f ( int   x )   {} \n   public   void   f ( int   y )   {}  }    (C) 1\n2\n3\n4 class   A   { \n   private   void   f ( int   x )   {} \n   public   void   f ( int   y )   {}  }    (d) 1\n2\n3\n4\n5\n6 class   A   { \n   public   int   f ( int   x )   { \n       return   x ; \n   } \n   public   void   f ( int   y )   {}  }    (e) 1\n2\n3\n4 class   A   { \n   public   void   f ( int   x ,   String   s )   {} \n   public   void   f ( String   s ,   int   y )   {}  }          If you override  equals()  you should generally override  hashCode()  as well, but let's leave that for another lesson on another day.\u00a0 \u21a9",
            "title": "Exercise"
        },
        {
            "location": "/style/index.html",
            "text": "CS2030 Java Style Guide\n\n\nWhy Coding Style is Important\n\n\nOne of the goals of CS2030 is to move you away from the mindset that you are writing code that you will discard after it is done (e.g., in CS1010 labs) and you are writing code that noone else will read except you.  CS2030 prepares you to work in a software engineering teams in many ways, and one of the ways is to enforce a consistent coding style.\n\n\nIf everyone on the team follows the same style, the intend of the programmer can become clear (e.g., is this a class or a field?), the code is more readable and less bug prone (e.g., the \nApple \ngoto fail\n bug\n).  Empirical studies support this:\n\n\n\n\nQuote\n\n\n\"It is not merely a matter of aesthetics that programs should be written in a particular style. Rather there is a psychological basis for writing programs in a conventional manner: programmers have strong expectations that other programmers will follow these discourse rules. If the rules are violated, then the utility afforded by the expectations that programmers have built up over time is effectively nullified. The results from the experiments with novice and advanced student programmers and with professional programmers described in this paper provide clear support for these claims.\"\n\n\nElliot Soloway and Kate Ehrlich. \"Empirical studies of programming knowledge.\" IEEE Transactions on Software Engineering 5 (1984): 595-609.\n\n\n\n\nMany major companies enforce coding styles, and some have published them.  For CS2030, we base our (simplified) coding style on \nGoogle's Java Coding Style\n.  You should bookmark the link because you need to come back to it again and again.\n\n\nCS2030 Coding Style\n\n\n\n\n\n\nNo tab\n    Use only whitespace.  \n\n\nFor \nvim\n users, you can add the following line in your \n~/.vimrc\n file:\n\n1\nset expandtab\n\n\n\n\nSo that when you press \n it is expanded to whitespace.\n\n\nMost other source code editors have similar configuration.  \n\n\n\n\n\n\nExactly one blank line after import statements and exactly one top-level (i.e., non-nested) class.\n\n\n\n\n\n\nEach top-level class resides in a source file of its own.\n\n\n\n\n\n\nWhen a class has overladed methods (e.g., multiple constructors or methods of the same name), they appear sequentially with no other code in between.\n\n\n\n\n\n\nBraces are always used (even if the body is empty or contains a single statement}\n\n\n\n\n\n\nUse \"Egyptian brackets\": \n\n\n\n\nOpening brace have no line break before; but has line break after\n\n\nClosing brace has a line break before; and has a line break after (except when there is \nelse\n or comma following a closing brace.\n\n\n\n\nExample:\n\n1\n2\n3\n   \nif\n \n(\nx\n \n==\n \n0\n)\n \n{\n\n     \nx\n++;\n\n   \n}\n \n\n\n\n\n\nis good.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n   \nif\n \n(\nx\n \n==\n \n0\n)\n \n{\n \nx\n++;\n \n}\n\n   \nif\n \n(\nx\n \n==\n \n0\n)\n \n   \n{\n\n     \nx\n++;\n\n   \n}\n\n   \nif\n \n(\nx\n \n==\n \n0\n)\n \n   \n{\n\n     \nx\n++;\n \n}\n\n\n\n\n\n\n\nare not good.\n\n\n\n\n\n\nBlock indentation is exactly two spaces.\n\n\n1\n2\n3\n4\n5\n6\nif\n \n(\nx\n \n==\n \n0\n)\n \n{\n \n  \nx\n++;\n\n  \nfor\n \n(\ni\n \n=\n \n0\n;\n \ni\n \n<\n \nx\n;\n \ni\n++)\n \n{\n\n    \nx\n \n+=\n \ni\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nFor \nvim\n users, in \n~/.vimrc\n, add the following:\n\n1\n2\n3\n4\nset tabstop=2\nset shiftwidth=2\nset autoindent\nset smartindent\n\n\n\n\n\nTo help you with indentation.\n\n\nMost other source code editors have similar configuration.  \n\n\n\n\n\n\nEach statement is followed by a line break, no matter how short the statement is.\n\n\n1\n  \nx\n++;\n \ni\n++;\n\n\n\n\n\nis bad.\n\n1\n2\n  \nx\n++;\n \n  \ni\n++;\n\n\n\n\n\nis good.\n\n\n\n\n\n\nEach line is limited to 80 characters in length.  You can break a long\nline into multiple lines to enhance readability, this is called \nline wrapping\n.  When you do so, each continuation line is indented at least 4 spaces from the original line.\n\n\n1\nSystem\n.\nout\n.\nprintln\n(\n\"Daenerys of the House Targaryen, the First of Her Name, The Unburnt, Queen of the Andals, the Rhoynar and the First Men, Queen of Meereen, Khaleesi of the Great Grass Sea, Protector of the Realm, Lady Regnant of the Seven Kingdoms, Breaker of Chains and Mother of Dragon\"\n);\n\n\n\n\n\n\n\nis bad.\n\n\n1\n2\n3\n4\n5\nSystem\n.\nout\n.\nprintln\n(\n\"Daenerys of the House Targaryen, the First of\"\n \n+\n\n\n\" Her Name, The Unburnt, Queen of the Andals, the Rhoynar and the\"\n \n+\n\n\n\" First Men, Queen of Meereen, Khaleesi of the Great Grass Sea, P\"\n \n+\n\n\n\"rotector of the Realm, Lady Regnant of the Seven Kingdoms, Break\"\n \n+\n\n\n\"er of Chains and Mother of Dragon\"\n);\n\n\n\n\n\n\n\nis also bad.\n\n\n1\n2\n3\n4\n5\n6\nSystem\n.\nout\n.\nprintln\n(\n\"Daenerys of the House Targaryen,\"\n \n+\n \n    \n\"the First of Her Name, The Unburnt, Queen of the Andals,\"\n \n+\n\n    \n\"the Rhoynar and the First Men, Queen of Meereen,\"\n \n+\n\n    \n\"Khaleesi of the Great Grass Sea, Protector of the Realm,\"\n \n+\n\n    \n\"Lady Regnant of the Seven Kingdoms, Breaker of Chains and\"\n \n+\n\n    \n\"Mother of Dragon\"\n);\n\n\n\n\n\nis ok.\n\n\n\n\n\n\nThere should be a blank line between constructors, methods, nested classes and static initializers.  Blank lines can be used between fields to create logical groupings.\n\n\n\n\n\n\nWhite space should separate Java keywords from parenthesis and braces, and be added on both sides of binary operators (\n+\n, \n-\n, \n/\n, etc) as well as \n:\n in enhanced for.  Space should also appears before and after \n//\n comments\n\n\n1\n2\n3\n4\n5\n6\nif\n(\nx\n==\n0\n){\n \n  \nx\n++;\n//to make sure x is at least one.\n\n  \nfor\n(\ni\n=\n0\n;\ni\n<\nx\n;\ni\n++){\n\n    \nx\n+=\ni\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nis bad.\n\n\n1\n2\n3\n4\n5\n6\nif\n \n(\nx\n \n==\n \n0\n)\n \n{\n \n  \nx\n++;\n \n// to make sure x is at least one.\n\n  \nfor\n \n(\ni\n \n=\n \n0\n;\n \ni\n \n<\n \nx\n;\n \ni\n++)\n \n{\n\n    \nx\n \n+=\n \ni\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nis good.\n\n\n\n\n\n\nOne variable per declaration.  \n\n\n1\nint\n \nx\n,\n \ny\n;\n\n\n\n\n\n\n\nbad.\n\n\n1\n2\nint\n \nx\n;\n\n\nint\n \ny\n;\n\n\n\n\n\n\n\ngood!\n\n\n\n\n\n\nNo C-style array declaration\n\n\n1\nString\n \nargs\n[];\n\n\n\n\n\n\n\nnot good.\n\n\n1\nString\n[]\n \nargs\n;\n\n\n\n\n\n\n\ngood!\n\n\n\n\n\n\nSwitch statement always include a \ndefault\n case.\n\n\n\n\n\n\nOne annotation per line.  Always use \n@Override\n.\n\n\n1\n2\n3\n4\n@Override\n\n\npublic\n \nboolean\n \nequals\n(\nObject\n \no\n)\n \n{\n\n  \n:\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nIndent comments at the same level as the surrounding code.  For multiple comments, align \n*\n with the previous line.\n\n\n1\n2\n3\n4\n5\n6\n/*\n\n\n* Not a good style\n\n\n*/\n\n\n/*\n\n\n * Good style\n\n\n */\n\n\n\n\n\n\n\n\n\n\n\nClass modifier appears in the following order:\n\n\n1\npublic\n \nprotected\n \nprivate\n \nabstract\n \ndefault\n \nstatic\n \nfinal\n \ntransient\n \nvolatile\n \nsynchronized\n \nnative\n \nstrictfp\n\n\n\n\n\n\n\nExample:\n\n1\nstatic\n \npublic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n\n\n\n\n\nis bad.\n\n1\npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n\n\n\n\n\nis good!\n\n\n\n\n\n\nClass names are writte in UpperCamelCase, method names and field names in lowerCamelCase, constant names in ALL_CAPS_SNAKE_CASE.  Type parameters in single capital letter.\n\n\n\n\n\n\nCaught exceptions should not be ignored.\n\n\n\n\n\n\nStatic fields and methods must be accessed with class name.",
            "title": "Coding Style"
        },
        {
            "location": "/style/index.html#cs2030-java-style-guide",
            "text": "",
            "title": "CS2030 Java Style Guide"
        },
        {
            "location": "/style/index.html#why-coding-style-is-important",
            "text": "One of the goals of CS2030 is to move you away from the mindset that you are writing code that you will discard after it is done (e.g., in CS1010 labs) and you are writing code that noone else will read except you.  CS2030 prepares you to work in a software engineering teams in many ways, and one of the ways is to enforce a consistent coding style.  If everyone on the team follows the same style, the intend of the programmer can become clear (e.g., is this a class or a field?), the code is more readable and less bug prone (e.g., the  Apple  goto fail  bug ).  Empirical studies support this:   Quote  \"It is not merely a matter of aesthetics that programs should be written in a particular style. Rather there is a psychological basis for writing programs in a conventional manner: programmers have strong expectations that other programmers will follow these discourse rules. If the rules are violated, then the utility afforded by the expectations that programmers have built up over time is effectively nullified. The results from the experiments with novice and advanced student programmers and with professional programmers described in this paper provide clear support for these claims.\"  Elliot Soloway and Kate Ehrlich. \"Empirical studies of programming knowledge.\" IEEE Transactions on Software Engineering 5 (1984): 595-609.   Many major companies enforce coding styles, and some have published them.  For CS2030, we base our (simplified) coding style on  Google's Java Coding Style .  You should bookmark the link because you need to come back to it again and again.",
            "title": "Why Coding Style is Important"
        },
        {
            "location": "/style/index.html#cs2030-coding-style",
            "text": "No tab\n    Use only whitespace.    For  vim  users, you can add the following line in your  ~/.vimrc  file: 1 set expandtab  \nSo that when you press   it is expanded to whitespace.  Most other source code editors have similar configuration.      Exactly one blank line after import statements and exactly one top-level (i.e., non-nested) class.    Each top-level class resides in a source file of its own.    When a class has overladed methods (e.g., multiple constructors or methods of the same name), they appear sequentially with no other code in between.    Braces are always used (even if the body is empty or contains a single statement}    Use \"Egyptian brackets\":    Opening brace have no line break before; but has line break after  Closing brace has a line break before; and has a line break after (except when there is  else  or comma following a closing brace.   Example: 1\n2\n3     if   ( x   ==   0 )   { \n      x ++; \n    }     is good.  1\n2\n3\n4\n5\n6\n7\n8     if   ( x   ==   0 )   {   x ++;   } \n    if   ( x   ==   0 )  \n    { \n      x ++; \n    } \n    if   ( x   ==   0 )  \n    { \n      x ++;   }    are not good.    Block indentation is exactly two spaces.  1\n2\n3\n4\n5\n6 if   ( x   ==   0 )   {  \n   x ++; \n   for   ( i   =   0 ;   i   <   x ;   i ++)   { \n     x   +=   i ; \n   }  }    For  vim  users, in  ~/.vimrc , add the following: 1\n2\n3\n4 set tabstop=2\nset shiftwidth=2\nset autoindent\nset smartindent   To help you with indentation.  Most other source code editors have similar configuration.      Each statement is followed by a line break, no matter how short the statement is.  1    x ++;   i ++;   \nis bad. 1\n2    x ++;  \n   i ++;   \nis good.    Each line is limited to 80 characters in length.  You can break a long\nline into multiple lines to enhance readability, this is called  line wrapping .  When you do so, each continuation line is indented at least 4 spaces from the original line.  1 System . out . println ( \"Daenerys of the House Targaryen, the First of Her Name, The Unburnt, Queen of the Andals, the Rhoynar and the First Men, Queen of Meereen, Khaleesi of the Great Grass Sea, Protector of the Realm, Lady Regnant of the Seven Kingdoms, Breaker of Chains and Mother of Dragon\" );    is bad.  1\n2\n3\n4\n5 System . out . println ( \"Daenerys of the House Targaryen, the First of\"   +  \" Her Name, The Unburnt, Queen of the Andals, the Rhoynar and the\"   +  \" First Men, Queen of Meereen, Khaleesi of the Great Grass Sea, P\"   +  \"rotector of the Realm, Lady Regnant of the Seven Kingdoms, Break\"   +  \"er of Chains and Mother of Dragon\" );    is also bad.  1\n2\n3\n4\n5\n6 System . out . println ( \"Daenerys of the House Targaryen,\"   +  \n     \"the First of Her Name, The Unburnt, Queen of the Andals,\"   + \n     \"the Rhoynar and the First Men, Queen of Meereen,\"   + \n     \"Khaleesi of the Great Grass Sea, Protector of the Realm,\"   + \n     \"Lady Regnant of the Seven Kingdoms, Breaker of Chains and\"   + \n     \"Mother of Dragon\" );   \nis ok.    There should be a blank line between constructors, methods, nested classes and static initializers.  Blank lines can be used between fields to create logical groupings.    White space should separate Java keywords from parenthesis and braces, and be added on both sides of binary operators ( + ,  - ,  / , etc) as well as  :  in enhanced for.  Space should also appears before and after  //  comments  1\n2\n3\n4\n5\n6 if ( x == 0 ){  \n   x ++; //to make sure x is at least one. \n   for ( i = 0 ; i < x ; i ++){ \n     x += i ; \n   }  }    is bad.  1\n2\n3\n4\n5\n6 if   ( x   ==   0 )   {  \n   x ++;   // to make sure x is at least one. \n   for   ( i   =   0 ;   i   <   x ;   i ++)   { \n     x   +=   i ; \n   }  }    is good.    One variable per declaration.    1 int   x ,   y ;    bad.  1\n2 int   x ;  int   y ;    good!    No C-style array declaration  1 String   args [];    not good.  1 String []   args ;    good!    Switch statement always include a  default  case.    One annotation per line.  Always use  @Override .  1\n2\n3\n4 @Override  public   boolean   equals ( Object   o )   { \n   :  }      Indent comments at the same level as the surrounding code.  For multiple comments, align  *  with the previous line.  1\n2\n3\n4\n5\n6 /*  * Not a good style  */  /*   * Good style   */      Class modifier appears in the following order:  1 public   protected   private   abstract   default   static   final   transient   volatile   synchronized   native   strictfp    Example: 1 static   public   void   main ( String []   args )   \nis bad. 1 public   static   void   main ( String []   args )   \nis good!    Class names are writte in UpperCamelCase, method names and field names in lowerCamelCase, constant names in ALL_CAPS_SNAKE_CASE.  Type parameters in single capital letter.    Caught exceptions should not be ignored.    Static fields and methods must be accessed with class name.",
            "title": "CS2030 Coding Style"
        },
        {
            "location": "/jdk/index.html",
            "text": "Java: Install/Compile/Run\n\n\nJava Development Kit (JDK)\n\n\nThe Java Development Kit, or JDK, is a development environment for building Java applications.  The environment provides a virtual machine to execute compiled Java code (JVM), a collection of classes and libraries, and a set of tools to support development (including a compiler (\njavac\n), a debugger (\njdb\n), an interactive shell (\njshell\n)) etc.\n\n\nThere are several variations of JDK available.  For instance, \nOpenJDK\n is a free and open source version of JDK.  \nGNU\n offers a compiler in Java (\ngcj\n) and Java core libraries in Gnu classpath.\nEclipse offers its own version of Java compiler\n1\n.  These variations are mostly the same, but for the purpose of this module, we will use the \nofficial Oracle version\n.\n\n\nThere are different editions of Java.  The main ones are Java SE (standard edition), Java EE (enterprise edition), and Java ME (micro edition).  We will be using \nJava SE\n.\n\n\nThe latest version of Java SE is Java 9.0.1.\nJava 8 is the earliest version of Java that will work with this module, as many concepts we will cover are only introduced in Java 8.\n\nTo use \njshell\n, however, you need Java 9.\n\n\nInstalling JDK or Java SE 9\n\n\nYou can \ndownload the latest version of Java SE 9\n from Oracle and follow its \ninstallation instructions\n.\n\n\nCompiling\n\n\nNow that you've installed Java on your machine, here's an example of how you can compile and run some Java code.\n\n\nJava source files\n\n\nCreate a new Java source file and put it in a new folder (e.g. \nCS2030\n).\n\n\n1\n2\n3\n4\n5\nclass\n \nHelloWorld\n \n{\n\n  \npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"Hello, world!\"\n);\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nBy convention, the file should be named \nHelloWorld.java\n, following the \nUpperCamelCase\n name of the class. At this point, our \nCS2030\n folder only contains that one file.\n\n\n1\n2\nhappytan@cs2030-i:~[xxx]$ ls\nHelloWorld.java\n\n\n\n\n\n\nJava class files\n\n\nWe can go ahead and compile our Java program by running the \njavac HelloWorld.java\n command. This creates the corresponding Java class file, \nHelloWorld.class\n.\n\n\n1\n2\n3\nhappytan@cs2030-i:~[xxx]$ javac HelloWorld.java\nhappytan@cs2030-i:~[xxx]$ ls\nHelloWorld.class HelloWorld.java\n\n\n\n\n\n\nWe can now execute it with \njava HelloWorld\n. Remember to omit the \n.class\n extension when doing this!\n\n\n1\n2\nhappytan@cs2030-i:~[xxx]$ java HelloWorld\nHello, world!\n\n\n\n\n\n\nSuccess! \ud83c\udf89\n\n\n\n\nWhat actually happens under the hood? Is Java an interpreted or compiled language?\n\n\nThis can get a little mind-boggling at first, but this \ndiagram\n summarizes it quite well.\n\n\n\n\n\n\n\n\n\n\n\n\nSee: \nWhat is the difference between javac and the Eclipse compiler?\n\u00a0\n\u21a9",
            "title": "Java"
        },
        {
            "location": "/jdk/index.html#java-installcompilerun",
            "text": "",
            "title": "Java: Install/Compile/Run"
        },
        {
            "location": "/jdk/index.html#java-development-kit-jdk",
            "text": "The Java Development Kit, or JDK, is a development environment for building Java applications.  The environment provides a virtual machine to execute compiled Java code (JVM), a collection of classes and libraries, and a set of tools to support development (including a compiler ( javac ), a debugger ( jdb ), an interactive shell ( jshell )) etc.  There are several variations of JDK available.  For instance,  OpenJDK  is a free and open source version of JDK.   GNU  offers a compiler in Java ( gcj ) and Java core libraries in Gnu classpath.\nEclipse offers its own version of Java compiler 1 .  These variations are mostly the same, but for the purpose of this module, we will use the  official Oracle version .  There are different editions of Java.  The main ones are Java SE (standard edition), Java EE (enterprise edition), and Java ME (micro edition).  We will be using  Java SE .  The latest version of Java SE is Java 9.0.1.\nJava 8 is the earliest version of Java that will work with this module, as many concepts we will cover are only introduced in Java 8. \nTo use  jshell , however, you need Java 9.",
            "title": "Java Development Kit (JDK)"
        },
        {
            "location": "/jdk/index.html#installing-jdk-or-java-se-9",
            "text": "You can  download the latest version of Java SE 9  from Oracle and follow its  installation instructions .",
            "title": "Installing JDK or Java SE 9"
        },
        {
            "location": "/jdk/index.html#compiling",
            "text": "Now that you've installed Java on your machine, here's an example of how you can compile and run some Java code.",
            "title": "Compiling"
        },
        {
            "location": "/jdk/index.html#java-source-files",
            "text": "Create a new Java source file and put it in a new folder (e.g.  CS2030 ).  1\n2\n3\n4\n5 class   HelloWorld   { \n   public   static   void   main ( String []   args )   { \n     System . out . println ( \"Hello, world!\" ); \n   }  }    By convention, the file should be named  HelloWorld.java , following the  UpperCamelCase  name of the class. At this point, our  CS2030  folder only contains that one file.  1\n2 happytan@cs2030-i:~[xxx]$ ls\nHelloWorld.java",
            "title": "Java source files"
        },
        {
            "location": "/jdk/index.html#java-class-files",
            "text": "We can go ahead and compile our Java program by running the  javac HelloWorld.java  command. This creates the corresponding Java class file,  HelloWorld.class .  1\n2\n3 happytan@cs2030-i:~[xxx]$ javac HelloWorld.java\nhappytan@cs2030-i:~[xxx]$ ls\nHelloWorld.class HelloWorld.java   We can now execute it with  java HelloWorld . Remember to omit the  .class  extension when doing this!  1\n2 happytan@cs2030-i:~[xxx]$ java HelloWorld\nHello, world!   Success! \ud83c\udf89   What actually happens under the hood? Is Java an interpreted or compiled language?  This can get a little mind-boggling at first, but this  diagram  summarizes it quite well.       See:  What is the difference between javac and the Eclipse compiler? \u00a0 \u21a9",
            "title": "Java class files"
        },
        {
            "location": "/javadoc/index.html",
            "text": "Javadoc\n\n\nWhy is documentation important\n\n\nOne of the goals of CS2030 is to move you away from the mindset that you are writing code that you will discard after it is done (e.g., in CS1010 labs) and you are writing code that noone else will read except you.  CS2030 prepares you to work in a software engineering teams in many ways, and one of the ways is to get you to document your code.\n\n\njavadoc\n is a tool used to document Java code.  It automatically generates HTML documentation from the comments in your code.  The \nJava SE 8 API\n that you have seen are generated from \njavadoc\n.\n\n\nHow to comment for javadoc\n\n\njavadoc\n distinguishes between normal comments and comments meant for \njavadoc\n by how we \"fence\" the comments.  A \njavadoc\n comments always starts with \n/**\n (not the double asterisks) and ends with \n*/\n and are always placed \nimmediately\n before a class, an interface, a constructor, a method, or field declaration.\n\n\nExample:\n\n1\n2\n3\n4\n5\n/** \n\n\n * Encapsulates a circle on a 2D plane.  The `Circle` class supports operators \n\n\n * supported includes (i) checking if a point is contained in the circle,\n\n\n * and (ii) moving the circle around to a new position.\n\n\n */\n\n\n\n\n\n\nThe first sentence is the summary sentence.  We should follow some style guideline when writing the summary sentence (see below).\n\n\njavadoc\n comments supports HTML tags.  If you are not familiar with HTML, \nthat is fine.  We will tell you what you need to know below.\n\n\nTags\n\n\njavadoc\n supports tags.  Here are some tags that we would like you to use:\n\n\n\n\n@param <name> <description>\n: describe the parameter \n\n\n@return <description>\n describe the return value\n\n\n@throws <class name> <description>\n describe what the exception \n being thrown and what are the possible reasons\n\n\n\n\nSee Lab 1 and Lab 2 skeleton code for samples.\n\n\nStyle\n\n\n\n\n\n\nIf you want to break you comments into paragraphs, insert one blank line between paragraphs.  Start a new paragraph with HTML tag \n<p>\n with no space after, and ends your paragraph with HTML tag \n</p>\n.\n\n\n\n\n\n\nYou should use the tags \n@param\n \n@return\n and \n@throws\n in that order, and they should never appear without a description.\n\n\n\n\n\n\nThe summary should be short and succint.  It is not a complete sentence, however, but should still be capitalized and ends with a period.  E.g., \n/** Encapsulates a circle on 2D plane. .. */\n\n\n\n\n\n\nYou don't get to write \njavadoc\n for self-explanatory, simple, obvious, methods.  e.g., \ngetX()\n, unless you want to explain what \nx\n means.  \n\n\n\n\n\n\nHow to generate javadoc\n\n\nIn its simplest form, you can generate \njavadoc\n like this:\n\n\n1\njavadoc *.java\n\n\n\n\n\n\nThis will generate the HTML files in your current directory.  \n\n\nTo avoid clutters, I recommend that you specify the output directory, e.g.,\n\n\n1\njavadoc *.java -d docs\n\n\n\n\n\n\nThis will generate the documentations and put it under the \ndocs\n subdirectory.\n\n\njavadoc\n by default generates documents only for public classes, fields, and methods.  To generate documentation for everything, run\n\n1\njavadoc *.java -d docs -private\n\n\n\n\n\nHow to view generate javadoc\n\n\nIf you generate the documentation on your computer, you can view it by opening up the file \nindex.html\n in your browser.\n\n\nIf you generate the documentation on \ncs2030-i.comp.nus.edu.sg\n, then, you can create under your \npublic_html\n directory (your home page, so to say).\n\n\n1\njavadoc -private -d ~/public_html/lab03 *.java\n\n\n\n\n\n\nYou can then view the documents on your computer through the URL\n\n\n1\nhttps://cs2030-i.comp.nus.edu.sg/~<username>/lab03\n\n\n\n\n\n\n(replace \n<username>\n with your username on \ncs2030-i\n.  The content is password protected and is only visible to you.  (If the website said that the certificate is invalid and website is not secure, please ignore the warning for now).\n\n\nSee Also\n\n\n\n\nOracle's \njavadoc\n Manual\n for a detailed \njavadoc\n guide",
            "title": "Javadoc"
        },
        {
            "location": "/javadoc/index.html#javadoc",
            "text": "",
            "title": "Javadoc"
        },
        {
            "location": "/javadoc/index.html#why-is-documentation-important",
            "text": "One of the goals of CS2030 is to move you away from the mindset that you are writing code that you will discard after it is done (e.g., in CS1010 labs) and you are writing code that noone else will read except you.  CS2030 prepares you to work in a software engineering teams in many ways, and one of the ways is to get you to document your code.  javadoc  is a tool used to document Java code.  It automatically generates HTML documentation from the comments in your code.  The  Java SE 8 API  that you have seen are generated from  javadoc .",
            "title": "Why is documentation important"
        },
        {
            "location": "/javadoc/index.html#how-to-comment-for-javadoc",
            "text": "javadoc  distinguishes between normal comments and comments meant for  javadoc  by how we \"fence\" the comments.  A  javadoc  comments always starts with  /**  (not the double asterisks) and ends with  */  and are always placed  immediately  before a class, an interface, a constructor, a method, or field declaration.  Example: 1\n2\n3\n4\n5 /**    * Encapsulates a circle on a 2D plane.  The `Circle` class supports operators    * supported includes (i) checking if a point is contained in the circle,   * and (ii) moving the circle around to a new position.   */    The first sentence is the summary sentence.  We should follow some style guideline when writing the summary sentence (see below).  javadoc  comments supports HTML tags.  If you are not familiar with HTML, \nthat is fine.  We will tell you what you need to know below.",
            "title": "How to comment for javadoc"
        },
        {
            "location": "/javadoc/index.html#tags",
            "text": "javadoc  supports tags.  Here are some tags that we would like you to use:   @param <name> <description> : describe the parameter   @return <description>  describe the return value  @throws <class name> <description>  describe what the exception   being thrown and what are the possible reasons   See Lab 1 and Lab 2 skeleton code for samples.",
            "title": "Tags"
        },
        {
            "location": "/javadoc/index.html#style",
            "text": "If you want to break you comments into paragraphs, insert one blank line between paragraphs.  Start a new paragraph with HTML tag  <p>  with no space after, and ends your paragraph with HTML tag  </p> .    You should use the tags  @param   @return  and  @throws  in that order, and they should never appear without a description.    The summary should be short and succint.  It is not a complete sentence, however, but should still be capitalized and ends with a period.  E.g.,  /** Encapsulates a circle on 2D plane. .. */    You don't get to write  javadoc  for self-explanatory, simple, obvious, methods.  e.g.,  getX() , unless you want to explain what  x  means.",
            "title": "Style"
        },
        {
            "location": "/javadoc/index.html#how-to-generate-javadoc",
            "text": "In its simplest form, you can generate  javadoc  like this:  1 javadoc *.java   This will generate the HTML files in your current directory.    To avoid clutters, I recommend that you specify the output directory, e.g.,  1 javadoc *.java -d docs   This will generate the documentations and put it under the  docs  subdirectory.  javadoc  by default generates documents only for public classes, fields, and methods.  To generate documentation for everything, run 1 javadoc *.java -d docs -private",
            "title": "How to generate javadoc"
        },
        {
            "location": "/javadoc/index.html#how-to-view-generate-javadoc",
            "text": "If you generate the documentation on your computer, you can view it by opening up the file  index.html  in your browser.  If you generate the documentation on  cs2030-i.comp.nus.edu.sg , then, you can create under your  public_html  directory (your home page, so to say).  1 javadoc -private -d ~/public_html/lab03 *.java   You can then view the documents on your computer through the URL  1 https://cs2030-i.comp.nus.edu.sg/~<username>/lab03   (replace  <username>  with your username on  cs2030-i .  The content is password protected and is only visible to you.  (If the website said that the certificate is invalid and website is not secure, please ignore the warning for now).",
            "title": "How to view generate javadoc"
        },
        {
            "location": "/javadoc/index.html#see-also",
            "text": "Oracle's  javadoc  Manual  for a detailed  javadoc  guide",
            "title": "See Also"
        },
        {
            "location": "/unix/index.html",
            "text": "Accessing CS2030 Lab Programming Environment\n\n\nThe Environment\n\n\nThe school has created a VM (virtual machine) for CS2030, with hostname \ncs2030-i.comp.nus.edu.sg\n.  The VM is running CentOS, one of the Linux distributions.\nThis will be the official programming environment for CS2030 for all your lab assignments.\n\n\nI have created your accounts on the VM based on your SoC UNIX account.  You can login with your SoC UNIX username (not your NUSNET username, unless you intentionally set the two to be the same) and password.\n\n\nSSH\n\n\nFor UNIX-based OS\n\n\nIf you use either macOS, Windows 10 (requires \nLinux Subsystem on Windows\n), or Linux, you should have the command line \nssh\n installed.  \n\n\nRun:\n\n1\nssh <username>@cs2030-i.comp.nus.edu.sg\n\n\n\n\n\nReplace \n<username>\n with your SoC UNIX username, for instance, I would do:\n\n1\nssh ooiwt@cs2030-i.comp.nus.edu.sg\n\n\n\n\n\nAfter the command above, following the instructions on screen.  The first time you ever connect to \ncs2030-i.comp.nus.edu.sg\n, you will be warned that you are connecting to a previously unknown host.  Say \nyes\n, and you will be prompted with your SoC UNIX password.\n\n\nFor Windows 7 or 8 (or Windows 10 without Linux Subsystem)\n\n\nThe desktop computers in Programming Lab 6 (PL6) runs Windows 7.  If you are using these computers, or your own computers with older versions of Windows, you need to use programs like \nPuTTY\n to access the VM.\n\n\nAccessing \ncs2030-i\n from Outside SoC\n\n\nTHe VM can only be accessed from within the School of Computing networks.  If you want to access it from outside, there are two ways\n\n\nUsing SoC VPN\n\n\nOne way is to setup a Virtual Private Network (VPN) (See \ninstruction here\n).  The staff at \nhelpdesk@comp.nus.edu.sg\n or the IT helpdesk in COM1, Level 1, will be able to help with you setting up if needed.\n\n\nTunneling through Sunfire\n\n\nThe alternative is to use ssh tunnels.\n\n\nSoC's Sunfire (\nsunfire.comp.nus.edu.sg\n) is configured to allow your connection if it's originating from a local telco. (See \nmore details here\n.)  Since \nsunfire\n is situated within the School of Computing network, \nsunfire\n is able to access the VM.  This opens the possibility of connecting from your device (using an Internet connection from a local telco) to \nsunfire\n, and then from \nsunfire\n to the VM.\n\n\nThere are two ways to achieve this, and in both ways it appears to the CS2030 VM that Sunfire is the client.\n\n\nSSH Using Sunfire's Terminal\n\n\nConnect to Sunfire at \nsunfire.comp.nus.edu.sg\n via your favourite SSH client.  After logging in, run the command \nssh cs2030-i\n to connect to the CS2030 VM.  This effectively starts an SSH session to the VM from within your existing SSH session to Sunfire.  Refer to instructions below on how to connect via SSH.\n\n\nSSH Port Forwarding\n\n\nSSH has built-in support for local and remote port forwarding, and local port forwarding can be used to commect to the CS2030 VM.  Local port forwarding means that a port of the SSH client (your machine) is forwarded to the SSH server (\nsunfire\n), which opens a connection to a preset destination server (\ncs2030-i\n).  This method causes the CS2030 VM to seem as if it is hosted on a local port, e.g. \nlocalhost\n:\n2030\n, allowing you to use your favourite SCP program (e.g. \nFileZilla\n) to access the VM.\n\n\nTo use local port forwarding (from local port \n2030\n), connect to \nsunfire\n using \n\n1\nssh -L 2030:cs2030-i.comp.nus.edu.sg:22 <username>@sunfire.comp.nus.edu.sg\n\n\n\n\nThis command opens an SSH tunnel from port \n2030\n of your machine to port \n22\n (the default SSH port) of \ncs2030-i.comp.nus.edu.sg\n via \nsunfire\n.  After successful login, open a separate SSH (or SCP) connection from your machine to \nlocalhost\n:\n2030\n to access the VM.\n\n\nPuTTY\n supports SSH port forwarding, so this setup can also be used on Windows.\n\n\nBasic UNIX Commands\n\n\nOnce you logged into the VM, you will be prompted to enter a command with a prompt that looks like this:\n\n1\nhappytan@cs2030-i:~[xxx]$\n\n\n\n\nThis interface is provided by a UNIX shell -- not unlike \njshell\n, this shell sits in a loop and wait for users to enter a command, then it interprets and executes the command.  There are many versions of shells, the default shell for our VM is \nbash\n1\n.\n\n\nThe following is adapted for CS2030 from \nthe instructions created by Aaron Tan\n. Bugs are mine.\n  \n\n\nThe power of UNIX stems from the many commands it offers. The following are a few commonly used commands. This list is by no means exhaustive and you are urged to explore on your own. Note that UNIX commands are case-sensitive.\n\n\nIn the examples below, bold words are commands which you are expected to enter. All commands are to be entered after the UNIX (local or \nsunfire\n or \ncs2030-i\n) prompt of the form\n\n\n1\nhappytan@cs2030-i:~[xxx]$\n\n\n\n\n\n\n~\n indicates that you are currently in your home directory, \nxxx\n is a number indicating the number of commands that have been entered.  The following examples assumes that user \nhappytan\n is logged into cs2030-i; however you can do it on your local UNIX platform too.\n\n\nIt might be good to understand the directory structure in UNIX, a multi-user system. The directory tree is shown below:\n\n\n\n\nEach user has his/her own home directory, which is where he/she will be automatically placed when he/she logs into the system. The above figure shows where the home directory of user \nhappytan\n resides in the directory tree. The user \nhappytan\n may create files or directories in his/her home directory, but not elsewhere unless permission is given.\n\n\nDirectory commands\n\n\n\n\n\n\npwd\n: Print current Working Directory to show you which directory you are currently in\n\n1\n2\nhappytan@cs2030-i:~[xxx]$ pwd\n/home/h/happytan\n\n\n\n\n\n\n\n\n\nls\n: LiSt files in your current directory\n\n1\n2\nhappytan@cs2030-i:~[xxx]$ ls\nhappytan@cs2030-i:~[xxx]$\n\n\n\n\n   If you do not have any regular files in your home directory, as you should when you first login, you should immediately return to the shell prompt.  \n\n\n\n\n\n\n\n\nRule of Silence\nUNIX follows the \nrule of silence\n: programs should not print unnecessary output, to allow other programs and users to easily parse the output from one program.  So, if \nls\n has nothing to list, it will list nothing (as oppose to, say, printing \"This is an empty directory.\")\n\n\n\n\n\n\n\n\n\n\nmkdir\n: MaKe a subDIRectory in current directory\n\n1\n2\n3\n4\n5\nhappytan@cs2030-i:~[xxx]$ mkdir lab01\nhappytan@cs2030-i:~[xxx]$ ls\nlab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nlab01/\n\n\n\n\nHere, you create a directory called \nlab01\n.  Now, when you \nls\n, you can see the directory listed.\nYou may also use \nls -F\n for more information (\n-F\n is one of the many \noptions\n/\nflags\n available for the \nls\n command. To see a complete list of the options, refer to the man pages, i.e., \nman ls\n.)\n\n\nThe slash \n/\n beside the filename tells you that the file is a directory (aka folder in Windows lingo). A normal file does not have a slash beside its name when \"ls -F\" is used.\n\n\nYou may also use the \nls -l\n command (hyphen el, not hyphen one) to display almost all the file information, include the size of the file and the date of modification.\n\n\n\n\n\n\n\n\nCommand history\n\n\nUNIX maintains a history of your previously executed UNIX commands, and you may use the up and down arrows to go through it. Press the up arrow until you find a previously executed UNIX command. You may then press Enter to execute it, or edit the command before executing it. This is handy when you need to repeatedly executed a long UNIX command.\n\n\n\n\n\n\n\n\ncd\n: Change Directory from current directory to another\n\n1\n2\nhappytan@cs2030-i:~[xxx]$ cd lab01\nhappytan@cs2030-i:~/lab01[xxx]$\n\n\n\n\nNote that the prompt changes to \n~/lab01\n to indicate that you are now in the \nlab01\n directory below your \nHOME\n directory.\n\n\nEntering \ncd\n alone brings you back to your \nHOME\n directory, i.e.,. the directory in which you started with when you first logged into the system.\n\n1\n2\nhappytan@cs2030-i:~/lab01[xxx]$ cd\nhappytan@cs2030-i:~[xxx]$\n\n\n\n\n\n\n\n\n\nrmdir\n:  to ReMove a subDIRectory in current directory -- note that a directory must be empty before it can be removed.\n\n1\n2\n3\n4\n5\nhappytan@cs2030-i:~[xxx]$ rmdir lab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nhappytan@cs2030-i:~[xxx]$ mkdir lab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nlab01/\n\n\n\n\n\n\n\n\n\nFile commands\n\n\n\n\ncp\n:  CoPy files\n\n1\n2\n3\nhappytan@cs2030-i:~/lab01[xxx]$ cp ~cs2030/lab01/Circle.java .\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nCircle.java\n\n\n\n\nThe command above copy the files Circle.java from the HOME of user \ncs2030\n, under directory \nlab01\n, to the current directory.\n\n\n\n\nIf you want to copy the whole directory, use \n-r\n flag, where \nr\n stands for recursive copy.\n\n\n1\nhappytan@cs2030-i:~/lab01[xxx]$ cp -r ~cs2030/lab01 .\n\n\n\n\n\n\nThe directory \nlab01\n and everything under it will be copied.\n\n\n\n\nmv\n: MoVe files from one directory to another; can also be used to rename files.\n\n1\n2\n3\nhappytan@cs2030-i:~/lab01[xxx]$ mv Circle.java Test.java\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nTest.java\n\n\n\n\n\n\n\n\n\nFilename completion\n\n\nIf you have a very long file name, you may use UNIX's filename completion feature to reduce typing. For instance, you may type:\n\n1\nhappytan@cs2030-i:~/lab01[xxx]$ mv C\n\n\n\n\nand press the tab key, and UNIX will complete the filename for you if there is only one filename with the prefix \"C\". Otherwise, it will fill up the filename up to point where you need to type in more characters for disambiguation.\n\n\n\n\n\n\nrm\n: ReMove files. Be careful with this command -- files deleted cannot be restored (unless they have been backed up during the normal backup cycle).\n\n1\n2\n3\n4\nhappytan@cs2030-i:~/lab01[xxx]$ rm Test.java\nrm: remove 'Test.java'? y\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nhappytan@cs2030-i:~/lab01[xxx]$\n\n\n\n\n\n\n\nCommand to display text files\n\n\n\n\ncat\n: to string together or display (CATenate) the contents of files onto the screen\n\n1\nhappytan@cs2030-i:~/lab01[xxx]$ cat Circle.java\n\n\n\n\n\nless\n - variant of \ncat\n (includes features to read each page leisurely)\n\n1\nhappytan@cs2030-i:~/lab01[xxx]$ less Circle.java\n\n\n\n\nIn \nless\n, use \n<space>\n to move down one page, \nb\n to move Back up one page, and \nq\n to Quit from \"less\".\n\n\n\n\nAn online help facility is available in UNIX via the \nman\n command (\nman\n stands for MANual). To look for more information about any UNIX command, for example, \nls\n, type \nman ls\n. Type \nman man\n and refer to Man Pages to find out more about the facility. To exit \nman\n, press \nq\n.\n\n\nNow that you are familiar with how the UNIX shell works, I won't show the command prompt any more in the rest of this article.\n\n\nUNIX File Permission\n\n\nIt is important to guide our files properly on a multi-user system where users share the same file system.  UNIX has a simple mechanism to for ensuring that: every file and directory has nine bits of access permission, corresponds to three access operations, read (\nr\n), write (\nw\n), and execute (\nx\n), for four classes of users, the user who owns of the file (\nu\n), users in the same group as the owner (\ng\n), all other users (\no\n), and all users (\na\n) (union of all three classes before)\n\n\nWhen you run \nls -l\n, you will see the permission encoded as strings that look like \n-rw-------\n or \ndrwx--x--x\n besides other file information.   \n\n\n\n\nThe first character indicates if the file is a directory (\nd\n) or not (\n-\n).  \n\n\nThe next three characters are the permission for the owner.  \nrwx\n means that the owner can do all three: reading, writing, and executing, \nrw-\n means that the owner can read and write, but cannot execute.\n\n\nThe next three characters are the permission for the users in the same group.\n\n\nThe last three characters are the permission for the users in the other groups.\n\n\n\n\nTo change permission, we use the \nchmod\n command.  Let's say that we want to remove the read and write permission from all other users in the group.  You can run:\n\n1\nchmod g-rw <file>\n\n\n\n\n\nwhere \n<file>\n is the name of the file whose permission you want to change.  This would change the permission from \n-rw-rw-rw-\n to \n-rw----rw-\n, or from \n-rwxr--r--\n to \n-rwx---r--\n.\n\n\nTo add executable permission to everyone, you can run:\n\n1\nchmod a+x <file>\n\n\n\n\n\nThis would change the permission from \n-rw-rw-rw-\n to \n-rwx--xrwx\n, or from \n-rwxr--r--\n to \n-rwx--xr-x\n, and so on.  You get the idea.\n\n\nAnother way to change the permission is set the permission directly, instead of adding with \n+\n and removing with \n-\n.  To do this, one convenient way is to treat the permission for each class of user as a 3-bit binary number between 0 to 7.  So, \nrwx\n is 7, \nrw-\n is 6, \n-w-\n is 2, \n---\n is 0, etc.  \n\n\nTo set the permission of a file to \n-r--r--r--\n (readable by everyone), run:\n\n1\nchmod 444 <file>\n\n\n\n\n\nTo set the permission to \n-rw-------\n, run:\n\n1\nchmod 600 <file>\n\n\n\n\n\nand so on.\n\n\nIt is important to ensure that your code is not readable and writable by other students, especially for graded lab exercises.\n\n\nSecure Copy (\nscp\n)\n\n\nSecure copy, or \nscp\n, is one way to transfer files from your local computer to \ncs2030-i\n.  If you choose not to use \nemacs\n or \nvim\n2\n and write your code on \ncs2030-i\n, you can write your code on your local computer, and transfer them.  Let's say that you are in the directory with a bunch of java files you want to transfer, and you want them transferred into directory \ntest\n that you have created, do the following:\n\n\n1\nscp *.java happytan@cs2030-i:~/test\n\n\n\n\n\n\n\n\nWarning\n\n\nIf you have files with the same name in the remote directory, the files will be overwritten without warning.  I have lost my code a few times due to \nscp\n.  \n\n\n\n\nThe expression \n*.java\n is a regular expression that means all files with filename ending with \n.java\n.  You can copy specific files as well.  For instance,\n\n\n1\nscp Circle.java Point.java happytan@cs2030-i:~/test\n\n\n\n\n\n\nscp\n supports \n-r\n (recursive copy) as well.\n\n\nSetting up SSH Keys\n\n\nOnce you are comfortable with UNIX, you can set up a pair of public/private keys for authentication.  \n\n\nYou can use\n\n1\nssh-keygen -t rsa\n\n\n\n\n\nto generate a pair of keys on your local computer.  Keep the private key \nid_rsa\n on your local machine in the hidden \n~/.ssh\n directory, and copy the public key \nid_rsa.pub\n to your home directory on VM \ncs2030-i\n.  On \ncs2030-i\n, run\n\n1\ncat id_rsa.pub >> ~/.ssh/authorized_keys\n\n\n\n\n\nMake sure that the permission for \n.ssh\n both on local machine and on VM is set to \n700\n and the files \nid_rsa\n on local machine and \nauthorized_keys\n on remote machine is set to \n600\n.  Once setup, you need not enter your password every time you run \nssh\n or \nscp\n.  \n\n\n\n\n\n\n\n\n\n\nI run \nfish\n on my macOS, as you might have noticed during the in-class demos.  You can use any shell you like, if you know what you are doing.  Otherwise, \nbash\n is a popular one.\u00a0\n\u21a9\n\n\n\n\n\n\nMy personal opinion is that, you should really master one of these two time-tested source code editor if you want a career in software development.\u00a0\n\u21a9",
            "title": "UNIX"
        },
        {
            "location": "/unix/index.html#accessing-cs2030-lab-programming-environment",
            "text": "",
            "title": "Accessing CS2030 Lab Programming Environment"
        },
        {
            "location": "/unix/index.html#the-environment",
            "text": "The school has created a VM (virtual machine) for CS2030, with hostname  cs2030-i.comp.nus.edu.sg .  The VM is running CentOS, one of the Linux distributions.\nThis will be the official programming environment for CS2030 for all your lab assignments.  I have created your accounts on the VM based on your SoC UNIX account.  You can login with your SoC UNIX username (not your NUSNET username, unless you intentionally set the two to be the same) and password.",
            "title": "The Environment"
        },
        {
            "location": "/unix/index.html#ssh",
            "text": "",
            "title": "SSH"
        },
        {
            "location": "/unix/index.html#for-unix-based-os",
            "text": "If you use either macOS, Windows 10 (requires  Linux Subsystem on Windows ), or Linux, you should have the command line  ssh  installed.    Run: 1 ssh <username>@cs2030-i.comp.nus.edu.sg   Replace  <username>  with your SoC UNIX username, for instance, I would do: 1 ssh ooiwt@cs2030-i.comp.nus.edu.sg   After the command above, following the instructions on screen.  The first time you ever connect to  cs2030-i.comp.nus.edu.sg , you will be warned that you are connecting to a previously unknown host.  Say  yes , and you will be prompted with your SoC UNIX password.",
            "title": "For UNIX-based OS"
        },
        {
            "location": "/unix/index.html#for-windows-7-or-8-or-windows-10-without-linux-subsystem",
            "text": "The desktop computers in Programming Lab 6 (PL6) runs Windows 7.  If you are using these computers, or your own computers with older versions of Windows, you need to use programs like  PuTTY  to access the VM.",
            "title": "For Windows 7 or 8 (or Windows 10 without Linux Subsystem)"
        },
        {
            "location": "/unix/index.html#accessing-cs2030-i-from-outside-soc",
            "text": "THe VM can only be accessed from within the School of Computing networks.  If you want to access it from outside, there are two ways",
            "title": "Accessing cs2030-i from Outside SoC"
        },
        {
            "location": "/unix/index.html#using-soc-vpn",
            "text": "One way is to setup a Virtual Private Network (VPN) (See  instruction here ).  The staff at  helpdesk@comp.nus.edu.sg  or the IT helpdesk in COM1, Level 1, will be able to help with you setting up if needed.",
            "title": "Using SoC VPN"
        },
        {
            "location": "/unix/index.html#tunneling-through-sunfire",
            "text": "The alternative is to use ssh tunnels.  SoC's Sunfire ( sunfire.comp.nus.edu.sg ) is configured to allow your connection if it's originating from a local telco. (See  more details here .)  Since  sunfire  is situated within the School of Computing network,  sunfire  is able to access the VM.  This opens the possibility of connecting from your device (using an Internet connection from a local telco) to  sunfire , and then from  sunfire  to the VM.  There are two ways to achieve this, and in both ways it appears to the CS2030 VM that Sunfire is the client.",
            "title": "Tunneling through Sunfire"
        },
        {
            "location": "/unix/index.html#ssh-using-sunfires-terminal",
            "text": "Connect to Sunfire at  sunfire.comp.nus.edu.sg  via your favourite SSH client.  After logging in, run the command  ssh cs2030-i  to connect to the CS2030 VM.  This effectively starts an SSH session to the VM from within your existing SSH session to Sunfire.  Refer to instructions below on how to connect via SSH.",
            "title": "SSH Using Sunfire's Terminal"
        },
        {
            "location": "/unix/index.html#ssh-port-forwarding",
            "text": "SSH has built-in support for local and remote port forwarding, and local port forwarding can be used to commect to the CS2030 VM.  Local port forwarding means that a port of the SSH client (your machine) is forwarded to the SSH server ( sunfire ), which opens a connection to a preset destination server ( cs2030-i ).  This method causes the CS2030 VM to seem as if it is hosted on a local port, e.g.  localhost : 2030 , allowing you to use your favourite SCP program (e.g.  FileZilla ) to access the VM.  To use local port forwarding (from local port  2030 ), connect to  sunfire  using  1 ssh -L 2030:cs2030-i.comp.nus.edu.sg:22 <username>@sunfire.comp.nus.edu.sg  \nThis command opens an SSH tunnel from port  2030  of your machine to port  22  (the default SSH port) of  cs2030-i.comp.nus.edu.sg  via  sunfire .  After successful login, open a separate SSH (or SCP) connection from your machine to  localhost : 2030  to access the VM.  PuTTY  supports SSH port forwarding, so this setup can also be used on Windows.",
            "title": "SSH Port Forwarding"
        },
        {
            "location": "/unix/index.html#basic-unix-commands",
            "text": "Once you logged into the VM, you will be prompted to enter a command with a prompt that looks like this: 1 happytan@cs2030-i:~[xxx]$  \nThis interface is provided by a UNIX shell -- not unlike  jshell , this shell sits in a loop and wait for users to enter a command, then it interprets and executes the command.  There are many versions of shells, the default shell for our VM is  bash 1 .  The following is adapted for CS2030 from  the instructions created by Aaron Tan . Bugs are mine.     The power of UNIX stems from the many commands it offers. The following are a few commonly used commands. This list is by no means exhaustive and you are urged to explore on your own. Note that UNIX commands are case-sensitive.  In the examples below, bold words are commands which you are expected to enter. All commands are to be entered after the UNIX (local or  sunfire  or  cs2030-i ) prompt of the form  1 happytan@cs2030-i:~[xxx]$   ~  indicates that you are currently in your home directory,  xxx  is a number indicating the number of commands that have been entered.  The following examples assumes that user  happytan  is logged into cs2030-i; however you can do it on your local UNIX platform too.  It might be good to understand the directory structure in UNIX, a multi-user system. The directory tree is shown below:   Each user has his/her own home directory, which is where he/she will be automatically placed when he/she logs into the system. The above figure shows where the home directory of user  happytan  resides in the directory tree. The user  happytan  may create files or directories in his/her home directory, but not elsewhere unless permission is given.",
            "title": "Basic UNIX Commands"
        },
        {
            "location": "/unix/index.html#directory-commands",
            "text": "pwd : Print current Working Directory to show you which directory you are currently in 1\n2 happytan@cs2030-i:~[xxx]$ pwd\n/home/h/happytan     ls : LiSt files in your current directory 1\n2 happytan@cs2030-i:~[xxx]$ ls\nhappytan@cs2030-i:~[xxx]$  \n   If you do not have any regular files in your home directory, as you should when you first login, you should immediately return to the shell prompt.       Rule of Silence UNIX follows the  rule of silence : programs should not print unnecessary output, to allow other programs and users to easily parse the output from one program.  So, if  ls  has nothing to list, it will list nothing (as oppose to, say, printing \"This is an empty directory.\")      mkdir : MaKe a subDIRectory in current directory 1\n2\n3\n4\n5 happytan@cs2030-i:~[xxx]$ mkdir lab01\nhappytan@cs2030-i:~[xxx]$ ls\nlab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nlab01/  \nHere, you create a directory called  lab01 .  Now, when you  ls , you can see the directory listed.\nYou may also use  ls -F  for more information ( -F  is one of the many  options / flags  available for the  ls  command. To see a complete list of the options, refer to the man pages, i.e.,  man ls .)  The slash  /  beside the filename tells you that the file is a directory (aka folder in Windows lingo). A normal file does not have a slash beside its name when \"ls -F\" is used.  You may also use the  ls -l  command (hyphen el, not hyphen one) to display almost all the file information, include the size of the file and the date of modification.     Command history  UNIX maintains a history of your previously executed UNIX commands, and you may use the up and down arrows to go through it. Press the up arrow until you find a previously executed UNIX command. You may then press Enter to execute it, or edit the command before executing it. This is handy when you need to repeatedly executed a long UNIX command.     cd : Change Directory from current directory to another 1\n2 happytan@cs2030-i:~[xxx]$ cd lab01\nhappytan@cs2030-i:~/lab01[xxx]$  \nNote that the prompt changes to  ~/lab01  to indicate that you are now in the  lab01  directory below your  HOME  directory.  Entering  cd  alone brings you back to your  HOME  directory, i.e.,. the directory in which you started with when you first logged into the system. 1\n2 happytan@cs2030-i:~/lab01[xxx]$ cd\nhappytan@cs2030-i:~[xxx]$     rmdir :  to ReMove a subDIRectory in current directory -- note that a directory must be empty before it can be removed. 1\n2\n3\n4\n5 happytan@cs2030-i:~[xxx]$ rmdir lab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nhappytan@cs2030-i:~[xxx]$ mkdir lab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nlab01/",
            "title": "Directory commands"
        },
        {
            "location": "/unix/index.html#file-commands",
            "text": "cp :  CoPy files 1\n2\n3 happytan@cs2030-i:~/lab01[xxx]$ cp ~cs2030/lab01/Circle.java .\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nCircle.java  \nThe command above copy the files Circle.java from the HOME of user  cs2030 , under directory  lab01 , to the current directory.   If you want to copy the whole directory, use  -r  flag, where  r  stands for recursive copy.  1 happytan@cs2030-i:~/lab01[xxx]$ cp -r ~cs2030/lab01 .   The directory  lab01  and everything under it will be copied.   mv : MoVe files from one directory to another; can also be used to rename files. 1\n2\n3 happytan@cs2030-i:~/lab01[xxx]$ mv Circle.java Test.java\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nTest.java     Filename completion  If you have a very long file name, you may use UNIX's filename completion feature to reduce typing. For instance, you may type: 1 happytan@cs2030-i:~/lab01[xxx]$ mv C  \nand press the tab key, and UNIX will complete the filename for you if there is only one filename with the prefix \"C\". Otherwise, it will fill up the filename up to point where you need to type in more characters for disambiguation.    rm : ReMove files. Be careful with this command -- files deleted cannot be restored (unless they have been backed up during the normal backup cycle). 1\n2\n3\n4 happytan@cs2030-i:~/lab01[xxx]$ rm Test.java\nrm: remove 'Test.java'? y\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nhappytan@cs2030-i:~/lab01[xxx]$",
            "title": "File commands"
        },
        {
            "location": "/unix/index.html#command-to-display-text-files",
            "text": "cat : to string together or display (CATenate) the contents of files onto the screen 1 happytan@cs2030-i:~/lab01[xxx]$ cat Circle.java   less  - variant of  cat  (includes features to read each page leisurely) 1 happytan@cs2030-i:~/lab01[xxx]$ less Circle.java  \nIn  less , use  <space>  to move down one page,  b  to move Back up one page, and  q  to Quit from \"less\".   An online help facility is available in UNIX via the  man  command ( man  stands for MANual). To look for more information about any UNIX command, for example,  ls , type  man ls . Type  man man  and refer to Man Pages to find out more about the facility. To exit  man , press  q .  Now that you are familiar with how the UNIX shell works, I won't show the command prompt any more in the rest of this article.",
            "title": "Command to display text files"
        },
        {
            "location": "/unix/index.html#unix-file-permission",
            "text": "It is important to guide our files properly on a multi-user system where users share the same file system.  UNIX has a simple mechanism to for ensuring that: every file and directory has nine bits of access permission, corresponds to three access operations, read ( r ), write ( w ), and execute ( x ), for four classes of users, the user who owns of the file ( u ), users in the same group as the owner ( g ), all other users ( o ), and all users ( a ) (union of all three classes before)  When you run  ls -l , you will see the permission encoded as strings that look like  -rw-------  or  drwx--x--x  besides other file information.      The first character indicates if the file is a directory ( d ) or not ( - ).    The next three characters are the permission for the owner.   rwx  means that the owner can do all three: reading, writing, and executing,  rw-  means that the owner can read and write, but cannot execute.  The next three characters are the permission for the users in the same group.  The last three characters are the permission for the users in the other groups.   To change permission, we use the  chmod  command.  Let's say that we want to remove the read and write permission from all other users in the group.  You can run: 1 chmod g-rw <file>   where  <file>  is the name of the file whose permission you want to change.  This would change the permission from  -rw-rw-rw-  to  -rw----rw- , or from  -rwxr--r--  to  -rwx---r-- .  To add executable permission to everyone, you can run: 1 chmod a+x <file>   This would change the permission from  -rw-rw-rw-  to  -rwx--xrwx , or from  -rwxr--r--  to  -rwx--xr-x , and so on.  You get the idea.  Another way to change the permission is set the permission directly, instead of adding with  +  and removing with  - .  To do this, one convenient way is to treat the permission for each class of user as a 3-bit binary number between 0 to 7.  So,  rwx  is 7,  rw-  is 6,  -w-  is 2,  ---  is 0, etc.    To set the permission of a file to  -r--r--r--  (readable by everyone), run: 1 chmod 444 <file>   To set the permission to  -rw------- , run: 1 chmod 600 <file>   and so on.  It is important to ensure that your code is not readable and writable by other students, especially for graded lab exercises.",
            "title": "UNIX File Permission"
        },
        {
            "location": "/unix/index.html#secure-copy-scp",
            "text": "Secure copy, or  scp , is one way to transfer files from your local computer to  cs2030-i .  If you choose not to use  emacs  or  vim 2  and write your code on  cs2030-i , you can write your code on your local computer, and transfer them.  Let's say that you are in the directory with a bunch of java files you want to transfer, and you want them transferred into directory  test  that you have created, do the following:  1 scp *.java happytan@cs2030-i:~/test    Warning  If you have files with the same name in the remote directory, the files will be overwritten without warning.  I have lost my code a few times due to  scp .     The expression  *.java  is a regular expression that means all files with filename ending with  .java .  You can copy specific files as well.  For instance,  1 scp Circle.java Point.java happytan@cs2030-i:~/test   scp  supports  -r  (recursive copy) as well.",
            "title": "Secure Copy (scp)"
        },
        {
            "location": "/unix/index.html#setting-up-ssh-keys",
            "text": "Once you are comfortable with UNIX, you can set up a pair of public/private keys for authentication.    You can use 1 ssh-keygen -t rsa   to generate a pair of keys on your local computer.  Keep the private key  id_rsa  on your local machine in the hidden  ~/.ssh  directory, and copy the public key  id_rsa.pub  to your home directory on VM  cs2030-i .  On  cs2030-i , run 1 cat id_rsa.pub >> ~/.ssh/authorized_keys   Make sure that the permission for  .ssh  both on local machine and on VM is set to  700  and the files  id_rsa  on local machine and  authorized_keys  on remote machine is set to  600 .  Once setup, you need not enter your password every time you run  ssh  or  scp .        I run  fish  on my macOS, as you might have noticed during the in-class demos.  You can use any shell you like, if you know what you are doing.  Otherwise,  bash  is a popular one.\u00a0 \u21a9    My personal opinion is that, you should really master one of these two time-tested source code editor if you want a career in software development.\u00a0 \u21a9",
            "title": "Setting up SSH Keys"
        },
        {
            "location": "/vim/index.html",
            "text": "Vim Tips\n\n\nI collected below some tips on \nvim\n that I find helpful.\n\n\nConfiguration\n\n\nYou can configure your \nvim\n by putting your configuration options and scripts in the \n~/.vimrc\n file (a hidden file named \n.vimrc\n in your home directory).  This file will be loaded whenever you starts \nvim\n.\n\n\nHelp\n\n\nIn \nvim,\n the command \n:help <topic>\n shows help about a particular topic in \nvim\n.  Example, \n:help backup\n.\n\n\nBackup Files\n\n\nYou can ask \nvim\n to automatically backup files that you edit.  This has been a life saver for me in multiple  occasions.\n\n\nIn your \n~/.vimrc\n file, \n\n\n1\nset backup=on\n\n\n\n\n\n\nwill cause a copy of your file to be save with suffix \n~\n appended to its name everytime you save.\n\n\nI prefer not to clutter my working directory, so I set\n\n\n1\nset backupdir=~/.backup\n\n\n\n\n\n\nand create a directory named \n~/.backup\n to store my backup files.\n\n\nThe settings above are the default in your \ncs2030-i\n account.  So if you made changes to a file that you regreted on \ncs2030-i\n, or if accidentally deleted a file, you can check under \n~/.backup\n to see if the backup can save you.\n\n\nUndo\n\n\nSince we are on the topic of correcting mistakes, \nu\n in command mode undo your changes.  Prefix it with a number \n\\(n\\)\n to undo \n\\(n\\)\n times.  If you regreted your undo, \n<CTRL-R>\n will redo.\n\n\nSyntax Highlighting\n\n\nIf for some reasons, syntax highlighting is not on by default, add this to your \n~/.vimrc\n:\n\n\n1\nsyntax on\n\n\n\n\n\n\nRuler and Numbers\n\n\nIf you prefer to show the line number you are on and the column number you are on, adding the commands to \n~/.vimrc\n\n\n1\nset ruler\n\n\n\n\n\n\nwill display the line number and the column number on the lower right corner.  \n\n\nYou can also add\n\n1\nset number\n\n\n\n\n\nto label each line with a line number.\n\n\nJumping to a Line\n\n\nIf the compiler tells you there is an error on Line \n\\(x\\)\n, you can issue \n:<x>\n to jump to Line \n\\(x\\)\n.  For instance, \n:40\n will go to Line 40.\n\n\nNavigation\n\n\n\n\nw\n   jump to the beginning of the next word\n\n\nb\n   jump to the beginning of the previous word (reverse of \nw\n)\n\n\ne\n   jump to the end of the word (or next word when pressed again)\n\n\nf\n + char: search forward in the line and sit on the next matching char\n\n\nt\n + char:  search forward in the line and sit on one space before the matching char\n\n\n jump forward half page\n\n\n jump backward half page\n\n\n$\n jump to end of line\n\n\n0\n jump to the beginning of the line\n\n\n%\n jump between matching parentheses\n\n\n\n\nNavigation + Editing\n\n\nvim\n is powerful because you can combine \noperations\n with \nnavigation\n.  For instance \nc\n to change, \nd\n to delete, \ny\n to yank (copy).  Since \nw\n is the navigation command to move over the current word, combining them we get:\n\n\n\n\ncw\n change the current word (delete the current word and enter insert mode)\n\n\ndw\n delete the current word\n\n\nyw\n yank the current word (copy word into buffer)\n\n\n\n\nCan you guess what \ndf)\n, \ndt)\n, \nc$\n, \ny0\n do?\n\n\nIf you repeat the operation \nc\n, \nd\n, and \ny\n, it applies to the whole line, so:\n\n\n\n\ncc\n change the whole line\n\n\ndd\n delete the whole line\n\n\nyy\n yank the whole line\n\n\n\n\nYou can add a number before an operation to specify how many times you want to repeat an operation.  So \n5dd\n deletes 5 lines, \n5dw\n deletes 5 words, etc.\n\n\nSee the article \nOperator, the True Power of \nVim\n for more details.\n\n\nOther Editing Operations\n\n\n\n\nA\n jump to end of line and enter insert mode\n\n\no\n open next line and enter insert mode\n\n\nO\n open previous line and enter insert mode\n\n\n\n\nSearch and Replace in \nvim\n\n\n1\n:%s/oldWord/newWord/gc \n\n\n\n\n\n\n:\n enters the command mode.  \n%\n means apply to the whole document, \ns\n means substitute, \ng\n means global (otherwise, only the first occurance of each line is replaced). \nc\n is optional -- adding it cause \nvim\n to confirm with you before each replacement  \n\n\nCommenting blocks of code\n\n\nSometimes we need to comment out a whole block of code in Java for testing purposes. There are several ways to do it in \nvim\n:\n\n\n\n\nPlace the cursor on the first line of the block of code you want to comment.\n\n\n0\n to jump to the beginning of the line\n\n\nV\n enter visual mode\n\n\nUse arrow key to select the block of code you want to comment. \n\n\nI\n to insert at the beginning of the line (here, since we already selected the block, we will insert at the beginning of every selected)\n\n\n//\n to insert the Java comment character (you will see it inserted in the current line, but don't worry)\n\n\n to escape from the visual code.\n\n\n\n\nTo uncomment, \n\n\n\n\nPlace the cursor on the first line of the block of code you want to comment.\n\n\n0\n to jump to the beginning of the line\n\n\n<CTRL-v>\n enter block visual mode\n\n\nUse arrow key to select the columns of text containing \n//\n\n\nx\n to delete them\n\n\n\n\nShell Command\n\n\nIf you need to issue a shell command quickly, you don't have to exit \nvim\n, run the command, and launch \nvim\n again.  You can use \n!\n, \n\n\n1\n:!<command>\n\n\n\n\n\n\nwill issue the command to shell.  E.g.,\n\n\n1\n:!ls\n\n\n\n\n\n\nYou can use this to compile your current file, without exiting \nvim\n.\n\n\n1\n:!javac %\n\n\n\n\n\n\nAbbreviation\n\n\nYou can use the command \nab\n to abbreviate frequently typed commands.  E.g., in your \n~/.vimrc\n, \n\n\n1\nab Sop System.out.println(\"\n\n\n\n\n\n\nNow, when you type \nSop\n, it will be expanded into \nSystem.out.println(\"\n\n\nAuto-Completion\n\n\nYou can \n<CTRL-P>\n to auto-complete.  By default, the auto-complete dictionary is based on text in your current editing buffers.  This is a very useful keystroke saver for long function and variable names.\n\n\nAuto-Indent the Whole File\n\n\nYou can \ngg=G\n in command mode to auto-indent the whole file.  \ngg\n is the command to go to the beginning of the file.  \n=\n is the command to indent.  \nG\n is the command to go to the end of the file.\n\n\nSwapping Lines\n\n\nSometimes you want to swap the order of two lines of code, in command mode, \nddp\n will do the trick.  \ndd\n deletes the current line, \np\n paste it after the current line, in effect swapping the order of the two lines.\n\n\nGoto File\n\n\nPlace your cursor on the name of a class (e.g., \nEvent\n), then in command mode, issue the \ngf\n command (goto file).  \nvim\n will open \nEvent.java\n.  You can set the \npath\n to load files from directories other than the current directory.   \"Ctrl-^\" will get out and back to the previous file.\n\n\nSyntax and Style Checker\n\n\nI use \nsyntastic\n to check for style and syntax whenever I save a file.  \nsyntastic\n is a \nvim\n plugin. \n\n\nMy \n.vimrc\n configuration file contains the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n\"For syntastic\nset laststatus=2\nset statusline+=%#warningmsg#\nset statusline+=%{SyntasticStatuslineFlag()}\nset statusline+=%*\n\nlet g:syntastic_always_populate_loc_list = 1\nlet g:syntastic_auto_loc_list = 1\nlet g:syntastic_check_on_open = 1\nlet g:syntastic_check_on_wq = 0\nlet g:syntastic_java_checkers = [ \"checkstyle\", \"javac\" ]\nlet g:syntastic_java_checkstyle_classpath = \"~cs2030/bin/checkstyle-8.2-all.jar\"\nlet g:syntastic_java_checkstyle_conf_file = \"~cs2030/bin/cs2030_checks.xml\"\n\n\n\n\n\n\nThe last two lines refer to \ncheckstyle\n tool and its configuration file available from \n~cs2030/bin\n on the host \ncs2030-i.comp.nus.edu.sg\n.\n\n\nSplitting \nvim\n's Viewport\n\n\n\n\n:sp file.java\n splits the \nvim\n window horizontally\n\n\n:vsp file.java\n splits the \nvim\n window vertically\n\n\nCtrl-w Ctrl-w\n moves between the different \nvim\n viewports",
            "title": "Vim"
        },
        {
            "location": "/vim/index.html#vim-tips",
            "text": "I collected below some tips on  vim  that I find helpful.",
            "title": "Vim Tips"
        },
        {
            "location": "/vim/index.html#configuration",
            "text": "You can configure your  vim  by putting your configuration options and scripts in the  ~/.vimrc  file (a hidden file named  .vimrc  in your home directory).  This file will be loaded whenever you starts  vim .",
            "title": "Configuration"
        },
        {
            "location": "/vim/index.html#help",
            "text": "In  vim,  the command  :help <topic>  shows help about a particular topic in  vim .  Example,  :help backup .",
            "title": "Help"
        },
        {
            "location": "/vim/index.html#backup-files",
            "text": "You can ask  vim  to automatically backup files that you edit.  This has been a life saver for me in multiple  occasions.  In your  ~/.vimrc  file,   1 set backup=on   will cause a copy of your file to be save with suffix  ~  appended to its name everytime you save.  I prefer not to clutter my working directory, so I set  1 set backupdir=~/.backup   and create a directory named  ~/.backup  to store my backup files.  The settings above are the default in your  cs2030-i  account.  So if you made changes to a file that you regreted on  cs2030-i , or if accidentally deleted a file, you can check under  ~/.backup  to see if the backup can save you.",
            "title": "Backup Files"
        },
        {
            "location": "/vim/index.html#undo",
            "text": "Since we are on the topic of correcting mistakes,  u  in command mode undo your changes.  Prefix it with a number  \\(n\\)  to undo  \\(n\\)  times.  If you regreted your undo,  <CTRL-R>  will redo.",
            "title": "Undo"
        },
        {
            "location": "/vim/index.html#syntax-highlighting",
            "text": "If for some reasons, syntax highlighting is not on by default, add this to your  ~/.vimrc :  1 syntax on",
            "title": "Syntax Highlighting"
        },
        {
            "location": "/vim/index.html#ruler-and-numbers",
            "text": "If you prefer to show the line number you are on and the column number you are on, adding the commands to  ~/.vimrc  1 set ruler   will display the line number and the column number on the lower right corner.    You can also add 1 set number   to label each line with a line number.",
            "title": "Ruler and Numbers"
        },
        {
            "location": "/vim/index.html#jumping-to-a-line",
            "text": "If the compiler tells you there is an error on Line  \\(x\\) , you can issue  :<x>  to jump to Line  \\(x\\) .  For instance,  :40  will go to Line 40.",
            "title": "Jumping to a Line"
        },
        {
            "location": "/vim/index.html#navigation",
            "text": "w    jump to the beginning of the next word  b    jump to the beginning of the previous word (reverse of  w )  e    jump to the end of the word (or next word when pressed again)  f  + char: search forward in the line and sit on the next matching char  t  + char:  search forward in the line and sit on one space before the matching char   jump forward half page   jump backward half page  $  jump to end of line  0  jump to the beginning of the line  %  jump between matching parentheses",
            "title": "Navigation"
        },
        {
            "location": "/vim/index.html#navigation-editing",
            "text": "vim  is powerful because you can combine  operations  with  navigation .  For instance  c  to change,  d  to delete,  y  to yank (copy).  Since  w  is the navigation command to move over the current word, combining them we get:   cw  change the current word (delete the current word and enter insert mode)  dw  delete the current word  yw  yank the current word (copy word into buffer)   Can you guess what  df) ,  dt) ,  c$ ,  y0  do?  If you repeat the operation  c ,  d , and  y , it applies to the whole line, so:   cc  change the whole line  dd  delete the whole line  yy  yank the whole line   You can add a number before an operation to specify how many times you want to repeat an operation.  So  5dd  deletes 5 lines,  5dw  deletes 5 words, etc.  See the article  Operator, the True Power of  Vim  for more details.",
            "title": "Navigation + Editing"
        },
        {
            "location": "/vim/index.html#other-editing-operations",
            "text": "A  jump to end of line and enter insert mode  o  open next line and enter insert mode  O  open previous line and enter insert mode",
            "title": "Other Editing Operations"
        },
        {
            "location": "/vim/index.html#search-and-replace-in-vim",
            "text": "1 :%s/oldWord/newWord/gc    :  enters the command mode.   %  means apply to the whole document,  s  means substitute,  g  means global (otherwise, only the first occurance of each line is replaced).  c  is optional -- adding it cause  vim  to confirm with you before each replacement",
            "title": "Search and Replace in vim"
        },
        {
            "location": "/vim/index.html#commenting-blocks-of-code",
            "text": "Sometimes we need to comment out a whole block of code in Java for testing purposes. There are several ways to do it in  vim :   Place the cursor on the first line of the block of code you want to comment.  0  to jump to the beginning of the line  V  enter visual mode  Use arrow key to select the block of code you want to comment.   I  to insert at the beginning of the line (here, since we already selected the block, we will insert at the beginning of every selected)  //  to insert the Java comment character (you will see it inserted in the current line, but don't worry)   to escape from the visual code.   To uncomment,    Place the cursor on the first line of the block of code you want to comment.  0  to jump to the beginning of the line  <CTRL-v>  enter block visual mode  Use arrow key to select the columns of text containing  //  x  to delete them",
            "title": "Commenting blocks of code"
        },
        {
            "location": "/vim/index.html#shell-command",
            "text": "If you need to issue a shell command quickly, you don't have to exit  vim , run the command, and launch  vim  again.  You can use  ! ,   1 :!<command>   will issue the command to shell.  E.g.,  1 :!ls   You can use this to compile your current file, without exiting  vim .  1 :!javac %",
            "title": "Shell Command"
        },
        {
            "location": "/vim/index.html#abbreviation",
            "text": "You can use the command  ab  to abbreviate frequently typed commands.  E.g., in your  ~/.vimrc ,   1 ab Sop System.out.println(\"   Now, when you type  Sop , it will be expanded into  System.out.println(\"",
            "title": "Abbreviation"
        },
        {
            "location": "/vim/index.html#auto-completion",
            "text": "You can  <CTRL-P>  to auto-complete.  By default, the auto-complete dictionary is based on text in your current editing buffers.  This is a very useful keystroke saver for long function and variable names.",
            "title": "Auto-Completion"
        },
        {
            "location": "/vim/index.html#auto-indent-the-whole-file",
            "text": "You can  gg=G  in command mode to auto-indent the whole file.   gg  is the command to go to the beginning of the file.   =  is the command to indent.   G  is the command to go to the end of the file.",
            "title": "Auto-Indent the Whole File"
        },
        {
            "location": "/vim/index.html#swapping-lines",
            "text": "Sometimes you want to swap the order of two lines of code, in command mode,  ddp  will do the trick.   dd  deletes the current line,  p  paste it after the current line, in effect swapping the order of the two lines.",
            "title": "Swapping Lines"
        },
        {
            "location": "/vim/index.html#goto-file",
            "text": "Place your cursor on the name of a class (e.g.,  Event ), then in command mode, issue the  gf  command (goto file).   vim  will open  Event.java .  You can set the  path  to load files from directories other than the current directory.   \"Ctrl-^\" will get out and back to the previous file.",
            "title": "Goto File"
        },
        {
            "location": "/vim/index.html#syntax-and-style-checker",
            "text": "I use  syntastic  to check for style and syntax whenever I save a file.   syntastic  is a  vim  plugin.   My  .vimrc  configuration file contains the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 \"For syntastic\nset laststatus=2\nset statusline+=%#warningmsg#\nset statusline+=%{SyntasticStatuslineFlag()}\nset statusline+=%*\n\nlet g:syntastic_always_populate_loc_list = 1\nlet g:syntastic_auto_loc_list = 1\nlet g:syntastic_check_on_open = 1\nlet g:syntastic_check_on_wq = 0\nlet g:syntastic_java_checkers = [ \"checkstyle\", \"javac\" ]\nlet g:syntastic_java_checkstyle_classpath = \"~cs2030/bin/checkstyle-8.2-all.jar\"\nlet g:syntastic_java_checkstyle_conf_file = \"~cs2030/bin/cs2030_checks.xml\"   The last two lines refer to  checkstyle  tool and its configuration file available from  ~cs2030/bin  on the host  cs2030-i.comp.nus.edu.sg .",
            "title": "Syntax and Style Checker"
        },
        {
            "location": "/vim/index.html#splitting-vims-viewport",
            "text": ":sp file.java  splits the  vim  window horizontally  :vsp file.java  splits the  vim  window vertically  Ctrl-w Ctrl-w  moves between the different  vim  viewports",
            "title": "Splitting vim's Viewport"
        }
    ]
}